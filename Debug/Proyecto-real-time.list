
Proyecto-real-time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08007df4  08007df4  00008df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081e8  080081e8  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  080081e8  080081e8  000091e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081f0  080081f0  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081f0  080081f0  000091f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081f4  080081f4  000091f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080081f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c08  20000064  0800825c  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c6c  0800825c  0000ac6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b4d  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000351f  00000000  00000000  00021be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  00025100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001084  00000000  00000000  00026638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004001  00000000  00000000  000276bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016271  00000000  00000000  0002b6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099286  00000000  00000000  0004192e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dabb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f74  00000000  00000000  000dabf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e0b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ddc 	.word	0x08007ddc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08007ddc 	.word	0x08007ddc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe4a 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f8b6 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f9e6 	bl	800094c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f9ba 	bl	80008f8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000584:	f000 f91a 	bl	80007bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000588:	f000 f968 	bl	800085c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058c:	f003 faf8 	bl	8003b80 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex */
  MutexHandle = osMutexNew(&Mutex_attributes);
 8000590:	4835      	ldr	r0, [pc, #212]	@ (8000668 <main+0xf8>)
 8000592:	f003 fcd2 	bl	8003f3a <osMutexNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a34      	ldr	r2, [pc, #208]	@ (800066c <main+0xfc>)
 800059a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of frecuenciaUltrasonido */
  frecuenciaUltrasonidoHandle = osMessageQueueNew (16, sizeof(uint16_t), &frecuenciaUltrasonido_attributes);
 800059c:	4a34      	ldr	r2, [pc, #208]	@ (8000670 <main+0x100>)
 800059e:	2102      	movs	r1, #2
 80005a0:	2010      	movs	r0, #16
 80005a2:	f003 fd50 	bl	8004046 <osMessageQueueNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a32      	ldr	r2, [pc, #200]	@ (8000674 <main+0x104>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of frecuenciaConstante */
  frecuenciaConstanteHandle = osMessageQueueNew (16, sizeof(uint16_t), &frecuenciaConstante_attributes);
 80005ac:	4a32      	ldr	r2, [pc, #200]	@ (8000678 <main+0x108>)
 80005ae:	2102      	movs	r1, #2
 80005b0:	2010      	movs	r0, #16
 80005b2:	f003 fd48 	bl	8004046 <osMessageQueueNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a30      	ldr	r2, [pc, #192]	@ (800067c <main+0x10c>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of frecuenciaLog */
  frecuenciaLogHandle = osMessageQueueNew (16, sizeof(uint16_t), &frecuenciaLog_attributes);
 80005bc:	4a30      	ldr	r2, [pc, #192]	@ (8000680 <main+0x110>)
 80005be:	2102      	movs	r1, #2
 80005c0:	2010      	movs	r0, #16
 80005c2:	f003 fd40 	bl	8004046 <osMessageQueueNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a2e      	ldr	r2, [pc, #184]	@ (8000684 <main+0x114>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of MandarUARTqueue */
  MandarUARTqueueHandle = osMessageQueueNew (30, sizeof(uint8_t), &MandarUARTqueue_attributes);
 80005cc:	4a2e      	ldr	r2, [pc, #184]	@ (8000688 <main+0x118>)
 80005ce:	2101      	movs	r1, #1
 80005d0:	201e      	movs	r0, #30
 80005d2:	f003 fd38 	bl	8004046 <osMessageQueueNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a2c      	ldr	r2, [pc, #176]	@ (800068c <main+0x11c>)
 80005da:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000690 <main+0x120>)
 80005de:	2100      	movs	r1, #0
 80005e0:	482c      	ldr	r0, [pc, #176]	@ (8000694 <main+0x124>)
 80005e2:	f003 fb17 	bl	8003c14 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000698 <main+0x128>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of LecturaPin */
  LecturaPinHandle = osThreadNew(LecturaPines, NULL, &LecturaPin_attributes);
 80005ec:	4a2b      	ldr	r2, [pc, #172]	@ (800069c <main+0x12c>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	482b      	ldr	r0, [pc, #172]	@ (80006a0 <main+0x130>)
 80005f2:	f003 fb0f 	bl	8003c14 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a2a      	ldr	r2, [pc, #168]	@ (80006a4 <main+0x134>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of ultrasound */
  ultrasoundHandle = osThreadNew(Ultrasound, NULL, &ultrasound_attributes);
 80005fc:	4a2a      	ldr	r2, [pc, #168]	@ (80006a8 <main+0x138>)
 80005fe:	2100      	movs	r1, #0
 8000600:	482a      	ldr	r0, [pc, #168]	@ (80006ac <main+0x13c>)
 8000602:	f003 fb07 	bl	8003c14 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a29      	ldr	r2, [pc, #164]	@ (80006b0 <main+0x140>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of Buzzer */
  BuzzerHandle = osThreadNew(BuzzerA, NULL, &Buzzer_attributes);
 800060c:	4a29      	ldr	r2, [pc, #164]	@ (80006b4 <main+0x144>)
 800060e:	2100      	movs	r1, #0
 8000610:	4829      	ldr	r0, [pc, #164]	@ (80006b8 <main+0x148>)
 8000612:	f003 faff 	bl	8003c14 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a28      	ldr	r2, [pc, #160]	@ (80006bc <main+0x14c>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of RecibirUART */
  RecibirUARTHandle = osThreadNew(Recibir_UART, NULL, &RecibirUART_attributes);
 800061c:	4a28      	ldr	r2, [pc, #160]	@ (80006c0 <main+0x150>)
 800061e:	2100      	movs	r1, #0
 8000620:	4828      	ldr	r0, [pc, #160]	@ (80006c4 <main+0x154>)
 8000622:	f003 faf7 	bl	8003c14 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a27      	ldr	r2, [pc, #156]	@ (80006c8 <main+0x158>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of MandarUART */
  MandarUARTHandle = osThreadNew(Mandar_UART, NULL, &MandarUART_attributes);
 800062c:	4a27      	ldr	r2, [pc, #156]	@ (80006cc <main+0x15c>)
 800062e:	2100      	movs	r1, #0
 8000630:	4827      	ldr	r0, [pc, #156]	@ (80006d0 <main+0x160>)
 8000632:	f003 faef 	bl	8003c14 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a26      	ldr	r2, [pc, #152]	@ (80006d4 <main+0x164>)
 800063a:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of PinPolling */
  PinPollingHandle = osEventFlagsNew(&PinPolling_attributes);
 800063c:	4826      	ldr	r0, [pc, #152]	@ (80006d8 <main+0x168>)
 800063e:	f003 fb96 	bl	8003d6e <osEventFlagsNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a25      	ldr	r2, [pc, #148]	@ (80006dc <main+0x16c>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of UARTsend */
  UARTsendHandle = osEventFlagsNew(&UARTsend_attributes);
 8000648:	4825      	ldr	r0, [pc, #148]	@ (80006e0 <main+0x170>)
 800064a:	f003 fb90 	bl	8003d6e <osEventFlagsNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a24      	ldr	r2, [pc, #144]	@ (80006e4 <main+0x174>)
 8000652:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  osEventFlagsSet(PinPollingHandle,0x0002U);
 8000654:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <main+0x16c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fbc6 	bl	8003dec <osEventFlagsSet>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000660:	f003 fab2 	bl	8003bc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <main+0xf4>
 8000668:	0800806c 	.word	0x0800806c
 800066c:	20000180 	.word	0x20000180
 8000670:	0800800c 	.word	0x0800800c
 8000674:	20000170 	.word	0x20000170
 8000678:	08008024 	.word	0x08008024
 800067c:	20000174 	.word	0x20000174
 8000680:	0800803c 	.word	0x0800803c
 8000684:	20000178 	.word	0x20000178
 8000688:	08008054 	.word	0x08008054
 800068c:	2000017c 	.word	0x2000017c
 8000690:	08007f34 	.word	0x08007f34
 8000694:	08000d19 	.word	0x08000d19
 8000698:	20000158 	.word	0x20000158
 800069c:	08007f58 	.word	0x08007f58
 80006a0:	08000d29 	.word	0x08000d29
 80006a4:	2000015c 	.word	0x2000015c
 80006a8:	08007f7c 	.word	0x08007f7c
 80006ac:	08000db1 	.word	0x08000db1
 80006b0:	20000160 	.word	0x20000160
 80006b4:	08007fa0 	.word	0x08007fa0
 80006b8:	08000e01 	.word	0x08000e01
 80006bc:	20000164 	.word	0x20000164
 80006c0:	08007fc4 	.word	0x08007fc4
 80006c4:	08000eb1 	.word	0x08000eb1
 80006c8:	20000168 	.word	0x20000168
 80006cc:	08007fe8 	.word	0x08007fe8
 80006d0:	08000ed5 	.word	0x08000ed5
 80006d4:	2000016c 	.word	0x2000016c
 80006d8:	0800807c 	.word	0x0800807c
 80006dc:	20000184 	.word	0x20000184
 80006e0:	0800808c 	.word	0x0800808c
 80006e4:	20000188 	.word	0x20000188

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	@ 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	@ 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f006 fede 	bl	80074b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	4a27      	ldr	r2, [pc, #156]	@ (80007b4 <SystemClock_Config+0xcc>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	@ 0x40
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b22      	ldr	r3, [pc, #136]	@ (80007b8 <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a21      	ldr	r2, [pc, #132]	@ (80007b8 <SystemClock_Config+0xd0>)
 8000732:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000758:	2310      	movs	r3, #16
 800075a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800075c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000760:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000762:	2304      	movs	r3, #4
 8000764:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000766:	2304      	movs	r3, #4
 8000768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	4618      	mov	r0, r3
 8000770:	f001 f932 	bl	80019d8 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800077a:	f000 fbc7 	bl	8000f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2302      	movs	r3, #2
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2102      	movs	r1, #2
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fb94 	bl	8001ec8 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a6:	f000 fbb1 	bl	8000f0c <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	@ 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <MX_TIM1_Init+0x98>)
 80007da:	4a1f      	ldr	r2, [pc, #124]	@ (8000858 <MX_TIM1_Init+0x9c>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_TIM1_Init+0x98>)
 80007e0:	2254      	movs	r2, #84	@ 0x54
 80007e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <MX_TIM1_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_TIM1_Init+0x98>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_TIM1_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <MX_TIM1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <MX_TIM1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000802:	4814      	ldr	r0, [pc, #80]	@ (8000854 <MX_TIM1_Init+0x98>)
 8000804:	f001 fd80 	bl	8002308 <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800080e:	f000 fb7d 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000816:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	@ (8000854 <MX_TIM1_Init+0x98>)
 8000820:	f001 ff43 	bl	80026aa <HAL_TIM_ConfigClockSource>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800082a:	f000 fb6f 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	4806      	ldr	r0, [pc, #24]	@ (8000854 <MX_TIM1_Init+0x98>)
 800083c:	f002 f94a 	bl	8002ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000846:	f000 fb61 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000080 	.word	0x20000080
 8000858:	40010000 	.word	0x40010000

0800085c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000878:	4b1d      	ldr	r3, [pc, #116]	@ (80008f0 <MX_TIM3_Init+0x94>)
 800087a:	4a1e      	ldr	r2, [pc, #120]	@ (80008f4 <MX_TIM3_Init+0x98>)
 800087c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_TIM3_Init+0x94>)
 8000880:	2229      	movs	r2, #41	@ 0x29
 8000882:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <MX_TIM3_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800088a:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <MX_TIM3_Init+0x94>)
 800088c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000890:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <MX_TIM3_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <MX_TIM3_Init+0x94>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800089e:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <MX_TIM3_Init+0x94>)
 80008a0:	f001 fd32 	bl	8002308 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 fb2f 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <MX_TIM3_Init+0x94>)
 80008bc:	f001 fef5 	bl	80026aa <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 fb21 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <MX_TIM3_Init+0x94>)
 80008d8:	f002 f8fc 	bl	8002ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008e2:	f000 fb13 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000c8 	.word	0x200000c8
 80008f4:	40000400 	.word	0x40000400

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <MX_USART2_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_USART2_UART_Init+0x4c>)
 8000930:	f002 f952 	bl	8002bd8 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 fae7 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000110 	.word	0x20000110
 8000948:	40004400 	.word	0x40004400

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <MX_GPIO_Init+0x110>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a3c      	ldr	r2, [pc, #240]	@ (8000a5c <MX_GPIO_Init+0x110>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b3a      	ldr	r3, [pc, #232]	@ (8000a5c <MX_GPIO_Init+0x110>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b36      	ldr	r3, [pc, #216]	@ (8000a5c <MX_GPIO_Init+0x110>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a35      	ldr	r2, [pc, #212]	@ (8000a5c <MX_GPIO_Init+0x110>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b33      	ldr	r3, [pc, #204]	@ (8000a5c <MX_GPIO_Init+0x110>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <MX_GPIO_Init+0x110>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a2e      	ldr	r2, [pc, #184]	@ (8000a5c <MX_GPIO_Init+0x110>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <MX_GPIO_Init+0x110>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b28      	ldr	r3, [pc, #160]	@ (8000a5c <MX_GPIO_Init+0x110>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a27      	ldr	r2, [pc, #156]	@ (8000a5c <MX_GPIO_Init+0x110>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <MX_GPIO_Init+0x110>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	21a0      	movs	r1, #160	@ 0xa0
 80009d6:	4822      	ldr	r0, [pc, #136]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009d8:	f000 ffca 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_ultrasonido_GPIO_Port, Trigger_ultrasonido_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2110      	movs	r1, #16
 80009e0:	4820      	ldr	r0, [pc, #128]	@ (8000a64 <MX_GPIO_Init+0x118>)
 80009e2:	f000 ffc5 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	481a      	ldr	r0, [pc, #104]	@ (8000a68 <MX_GPIO_Init+0x11c>)
 80009fe:	f000 fe1b 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8000a02:	23a0      	movs	r3, #160	@ 0xa0
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4811      	ldr	r0, [pc, #68]	@ (8000a60 <MX_GPIO_Init+0x114>)
 8000a1a:	f000 fe0d 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_ultrasonido_Pin */
  GPIO_InitStruct.Pin = Echo_ultrasonido_Pin;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_ultrasonido_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <MX_GPIO_Init+0x118>)
 8000a32:	f000 fe01 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_ultrasonido_Pin */
  GPIO_InitStruct.Pin = Trigger_ultrasonido_Pin;
 8000a36:	2310      	movs	r3, #16
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_ultrasonido_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_GPIO_Init+0x118>)
 8000a4e:	f000 fdf3 	bl	8001638 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40020800 	.word	0x40020800

08000a6c <TiempoaFrecuencia>:
uint8_t EntradaBuzzer = 1;         // Controla la entrada del buzzer
uint16_t FrecuenciaMandar;  // Frecuencia(Hz)


//Funcion de generacion de frecuencias para el buzzer
uint32_t TiempoaFrecuencia(uint32_t us) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    // Limitar el tiempo a los valores mínimos y máximos
    if (us < TIME_MIN_US) us = TIME_MIN_US;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b41      	cmp	r3, #65	@ 0x41
 8000a78:	d801      	bhi.n	8000a7e <TiempoaFrecuencia+0x12>
 8000a7a:	2342      	movs	r3, #66	@ 0x42
 8000a7c:	607b      	str	r3, [r7, #4]
    if (us > TIME_MAX_US) us = TIME_MAX_US;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2bc8      	cmp	r3, #200	@ 0xc8
 8000a82:	d901      	bls.n	8000a88 <TiempoaFrecuencia+0x1c>
 8000a84:	23c8      	movs	r3, #200	@ 0xc8
 8000a86:	607b      	str	r3, [r7, #4]

    // Aplicar la fórmula de interpolación lineal
    uint32_t frecuencia = FREQ_MIN_HZ + (us - TIME_MIN_US) * (FREQ_MAX_HZ - FREQ_MIN_HZ) / (TIME_MAX_US - TIME_MIN_US);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000a8e:	fb02 f303 	mul.w	r3, r2, r3
 8000a92:	f5a3 3341 	sub.w	r3, r3, #197632	@ 0x30400
 8000a96:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8000a9a:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <TiempoaFrecuencia+0x4c>)
 8000a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000aa6:	60fb      	str	r3, [r7, #12]

    return frecuencia;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	07a44c6b 	.word	0x07a44c6b

08000abc <delay_us>:


void delay_us(uint16_t us)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim1);
 8000ac6:	480b      	ldr	r0, [pc, #44]	@ (8000af4 <delay_us+0x38>)
 8000ac8:	f001 fc6e 	bl	80023a8 <HAL_TIM_Base_Start_IT>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <delay_us+0x38>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	@ 0x24
    while(timcounter<us);
 8000ad4:	bf00      	nop
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <delay_us+0x3c>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	88fa      	ldrh	r2, [r7, #6]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d8fa      	bhi.n	8000ad6 <delay_us+0x1a>

    HAL_TIM_Base_Stop_IT(&htim1);
 8000ae0:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <delay_us+0x38>)
 8000ae2:	f001 fcc3 	bl	800246c <HAL_TIM_Base_Stop_IT>
    timcounter = 0;
 8000ae6:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <delay_us+0x3c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	801a      	strh	r2, [r3, #0]
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000080 	.word	0x20000080
 8000af8:	2000018c 	.word	0x2000018c

08000afc <HAL_TIM_PeriodElapsedCallback>:

/*Callback TIM*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0x20>
	timcounter++;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b18:	801a      	strh	r2, [r3, #0]
	}

	else {
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
	}
}
 8000b1a:	e003      	b.n	8000b24 <HAL_TIM_PeriodElapsedCallback+0x28>
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 8000b1c:	2180      	movs	r1, #128	@ 0x80
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b20:	f000 ff3f 	bl	80019a2 <HAL_GPIO_TogglePin>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40010000 	.word	0x40010000
 8000b30:	2000018c 	.word	0x2000018c
 8000b34:	40020000 	.word	0x40020000

08000b38 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <HAL_UART_RxCpltCallback>:

//Callback USART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1a      	ldr	r2, [pc, #104]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x78>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12e      	bne.n	8000bbc <HAL_UART_RxCpltCallback+0x70>
	        char rxChar = rxBuffer[0];
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x7c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	73fb      	strb	r3, [r7, #15]

	        if (rxChar == '\r') {
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	2b0d      	cmp	r3, #13
 8000b68:	d111      	bne.n	8000b8e <HAL_UART_RxCpltCallback+0x42>
	            //Añade el fin de string
	            Buffer[cmdIndice] = '\0';
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <HAL_UART_RxCpltCallback+0x80>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x84>)
 8000b72:	2100      	movs	r1, #0
 8000b74:	5499      	strb	r1, [r3, r2]

	            // Procesa el comando
	            UARTCommand(Buffer);
 8000b76:	4816      	ldr	r0, [pc, #88]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x84>)
 8000b78:	f000 f82e 	bl	8000bd8 <UARTCommand>

	            // Reinicia el indice
	            cmdIndice = 0;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <HAL_UART_RxCpltCallback+0x80>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	801a      	strh	r2, [r3, #0]
	            memset(Buffer, 0, sizeof(Buffer));
 8000b82:	2214      	movs	r2, #20
 8000b84:	2100      	movs	r1, #0
 8000b86:	4812      	ldr	r0, [pc, #72]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x84>)
 8000b88:	f006 fc96 	bl	80074b8 <memset>
 8000b8c:	e011      	b.n	8000bb2 <HAL_UART_RxCpltCallback+0x66>
	        } else if (cmdIndice < sizeof(Buffer) - 1) {
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_UART_RxCpltCallback+0x80>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	2b12      	cmp	r3, #18
 8000b94:	d80a      	bhi.n	8000bac <HAL_UART_RxCpltCallback+0x60>
	            // Añade el char al siguiente espacio
	            Buffer[cmdIndice++] = rxChar;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <HAL_UART_RxCpltCallback+0x80>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	b291      	uxth	r1, r2
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000bcc <HAL_UART_RxCpltCallback+0x80>)
 8000ba0:	8011      	strh	r1, [r2, #0]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x84>)
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	5453      	strb	r3, [r2, r1]
 8000baa:	e002      	b.n	8000bb2 <HAL_UART_RxCpltCallback+0x66>
	        } else {
	            // Buffer lleno
	            cmdIndice = 0;  // Reset the buffer
 8000bac:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <HAL_UART_RxCpltCallback+0x80>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
	        }

	        // Reinicia la conexion
	        HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4904      	ldr	r1, [pc, #16]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x7c>)
 8000bb6:	4807      	ldr	r0, [pc, #28]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x88>)
 8000bb8:	f002 f894 	bl	8002ce4 <HAL_UART_Receive_IT>
	    }
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	200001b0 	.word	0x200001b0
 8000bcc:	200001c8 	.word	0x200001c8
 8000bd0:	200001b4 	.word	0x200001b4
 8000bd4:	20000110 	.word	0x20000110

08000bd8 <UARTCommand>:

void UARTCommand(char *comando)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	uint16_t frecuencia;
	 if (strncmp(comando, "SRC", 3) == 0) {
 8000be0:	2203      	movs	r2, #3
 8000be2:	493f      	ldr	r1, [pc, #252]	@ (8000ce0 <UARTCommand+0x108>)
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f006 fc6f 	bl	80074c8 <strncmp>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d115      	bne.n	8000c1c <UARTCommand+0x44>
		 //Comando recibido: SRC
		 EntradaBuzzer = atoi(comando + 4);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f006 fbb7 	bl	8007368 <atoi>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b39      	ldr	r3, [pc, #228]	@ (8000ce4 <UARTCommand+0x10c>)
 8000c00:	701a      	strb	r2, [r3, #0]
		 memset(txbuffer,0,sizeof(txbuffer));
 8000c02:	221e      	movs	r2, #30
 8000c04:	2100      	movs	r1, #0
 8000c06:	4838      	ldr	r0, [pc, #224]	@ (8000ce8 <UARTCommand+0x110>)
 8000c08:	f006 fc56 	bl	80074b8 <memset>
		 sprintf(txbuffer,"#Entrada cambiada: %d#",EntradaBuzzer);
 8000c0c:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <UARTCommand+0x10c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4936      	ldr	r1, [pc, #216]	@ (8000cec <UARTCommand+0x114>)
 8000c14:	4834      	ldr	r0, [pc, #208]	@ (8000ce8 <UARTCommand+0x110>)
 8000c16:	f006 fc2f 	bl	8007478 <siprintf>
 8000c1a:	e057      	b.n	8000ccc <UARTCommand+0xf4>

	 } else if (strncmp(comando, "FREQ", 4) == 0) {
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	4934      	ldr	r1, [pc, #208]	@ (8000cf0 <UARTCommand+0x118>)
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f006 fc51 	bl	80074c8 <strncmp>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d131      	bne.n	8000c90 <UARTCommand+0xb8>
		 frecuencia = atoi(comando + 5);  // Extrae la frecuencia
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3305      	adds	r3, #5
 8000c30:	4618      	mov	r0, r3
 8000c32:	f006 fb99 	bl	8007368 <atoi>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	81fb      	strh	r3, [r7, #14]
		 if((frecuencia>=2000) && (frecuencia<=5000)){
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000c42:	d31b      	bcc.n	8000c7c <UARTCommand+0xa4>
 8000c44:	89fb      	ldrh	r3, [r7, #14]
 8000c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d816      	bhi.n	8000c7c <UARTCommand+0xa4>
			 FrecuenciaBuzzer = frecuencia;
 8000c4e:	89fa      	ldrh	r2, [r7, #14]
 8000c50:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <UARTCommand+0x11c>)
 8000c52:	801a      	strh	r2, [r3, #0]
			 memset(txbuffer,0,sizeof(txbuffer));
 8000c54:	221e      	movs	r2, #30
 8000c56:	2100      	movs	r1, #0
 8000c58:	4823      	ldr	r0, [pc, #140]	@ (8000ce8 <UARTCommand+0x110>)
 8000c5a:	f006 fc2d 	bl	80074b8 <memset>
             sprintf(txbuffer,"#Frecuencia: %d#", frecuencia);
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4925      	ldr	r1, [pc, #148]	@ (8000cf8 <UARTCommand+0x120>)
 8000c64:	4820      	ldr	r0, [pc, #128]	@ (8000ce8 <UARTCommand+0x110>)
 8000c66:	f006 fc07 	bl	8007478 <siprintf>
			 osMessageQueuePut(frecuenciaConstanteHandle,&frecuencia,0U,0U);
 8000c6a:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <UARTCommand+0x124>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	f107 010e 	add.w	r1, r7, #14
 8000c72:	2300      	movs	r3, #0
 8000c74:	2200      	movs	r2, #0
 8000c76:	f003 fa59 	bl	800412c <osMessageQueuePut>
 8000c7a:	e027      	b.n	8000ccc <UARTCommand+0xf4>
		 } else {
			 memset(txbuffer,0,sizeof(txbuffer));
 8000c7c:	221e      	movs	r2, #30
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4819      	ldr	r0, [pc, #100]	@ (8000ce8 <UARTCommand+0x110>)
 8000c82:	f006 fc19 	bl	80074b8 <memset>
			 sprintf(txbuffer,"#Frecuencia no valida#");
 8000c86:	491e      	ldr	r1, [pc, #120]	@ (8000d00 <UARTCommand+0x128>)
 8000c88:	4817      	ldr	r0, [pc, #92]	@ (8000ce8 <UARTCommand+0x110>)
 8000c8a:	f006 fbf5 	bl	8007478 <siprintf>
 8000c8e:	e01d      	b.n	8000ccc <UARTCommand+0xf4>
		 }
	 } else if (strncmp(comando, "frecuencia", 10) == 0) {
 8000c90:	220a      	movs	r2, #10
 8000c92:	491c      	ldr	r1, [pc, #112]	@ (8000d04 <UARTCommand+0x12c>)
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f006 fc17 	bl	80074c8 <strncmp>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10c      	bne.n	8000cba <UARTCommand+0xe2>
			 memset(txbuffer,0,sizeof(txbuffer));
 8000ca0:	221e      	movs	r2, #30
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4810      	ldr	r0, [pc, #64]	@ (8000ce8 <UARTCommand+0x110>)
 8000ca6:	f006 fc07 	bl	80074b8 <memset>
			 sprintf(txbuffer,"#%d#", FrecuenciaMandar);
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <UARTCommand+0x130>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4916      	ldr	r1, [pc, #88]	@ (8000d0c <UARTCommand+0x134>)
 8000cb2:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <UARTCommand+0x110>)
 8000cb4:	f006 fbe0 	bl	8007478 <siprintf>
 8000cb8:	e008      	b.n	8000ccc <UARTCommand+0xf4>
	 } else {
		 memset(txbuffer,0,sizeof(txbuffer));
 8000cba:	221e      	movs	r2, #30
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	480a      	ldr	r0, [pc, #40]	@ (8000ce8 <UARTCommand+0x110>)
 8000cc0:	f006 fbfa 	bl	80074b8 <memset>
		 sprintf(txbuffer,"#Comando no valido#");
 8000cc4:	4912      	ldr	r1, [pc, #72]	@ (8000d10 <UARTCommand+0x138>)
 8000cc6:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <UARTCommand+0x110>)
 8000cc8:	f006 fbd6 	bl	8007478 <siprintf>
	 }
	 osEventFlagsSet(UARTsendHandle,0x0001U);
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <UARTCommand+0x13c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 f88a 	bl	8003dec <osEventFlagsSet>
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	08007ea4 	.word	0x08007ea4
 8000ce4:	20000002 	.word	0x20000002
 8000ce8:	20000190 	.word	0x20000190
 8000cec:	08007ea8 	.word	0x08007ea8
 8000cf0:	08007ec0 	.word	0x08007ec0
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	08007ec8 	.word	0x08007ec8
 8000cfc:	20000174 	.word	0x20000174
 8000d00:	08007edc 	.word	0x08007edc
 8000d04:	08007ef4 	.word	0x08007ef4
 8000d08:	200001ca 	.word	0x200001ca
 8000d0c:	08007f00 	.word	0x08007f00
 8000d10:	08007f08 	.word	0x08007f08
 8000d14:	20000188 	.word	0x20000188

08000d18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f003 f809 	bl	8003d38 <osDelay>
 8000d26:	e7fb      	b.n	8000d20 <StartDefaultTask+0x8>

08000d28 <LecturaPines>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LecturaPines */
void LecturaPines(void *argument)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LecturaPines */
	uint8_t pulso;
	uint8_t PinEstado = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	PinEstado = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 8000d34:	2108      	movs	r1, #8
 8000d36:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <LecturaPines+0x74>)
 8000d38:	f000 fe02 	bl	8001940 <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73bb      	strb	r3, [r7, #14]
	  if(PinEstado == 1){
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d107      	bne.n	8000d56 <LecturaPines+0x2e>
		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d46:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <LecturaPines+0x78>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_TIM_Base_Start_IT(&htim1);
 8000d4e:	4814      	ldr	r0, [pc, #80]	@ (8000da0 <LecturaPines+0x78>)
 8000d50:	f001 fb2a 	bl	80023a8 <HAL_TIM_Base_Start_IT>
 8000d54:	e00b      	b.n	8000d6e <LecturaPines+0x46>
	  }else{
	  	  HAL_TIM_Base_Stop_IT(&htim1);
 8000d56:	4812      	ldr	r0, [pc, #72]	@ (8000da0 <LecturaPines+0x78>)
 8000d58:	f001 fb88 	bl	800246c <HAL_TIM_Base_Stop_IT>
	  	  pulso = timcounter;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <LecturaPines+0x7c>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	73fb      	strb	r3, [r7, #15]
	  	  osEventFlagsSet(PinPollingHandle,0x0002U);
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <LecturaPines+0x80>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2102      	movs	r1, #2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 f83f 	bl	8003dec <osEventFlagsSet>
	  }
	  if(pulso != 0){
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00e      	beq.n	8000d92 <LecturaPines+0x6a>
		  uint16_t frecuencia = TiempoaFrecuencia(pulso);
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fe78 	bl	8000a6c <TiempoaFrecuencia>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	81bb      	strh	r3, [r7, #12]
		  osMessageQueuePut(frecuenciaUltrasonidoHandle,&frecuencia,0,0);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <LecturaPines+0x84>)
 8000d84:	6818      	ldr	r0, [r3, #0]
 8000d86:	f107 010c 	add.w	r1, r7, #12
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f003 f9cd 	bl	800412c <osMessageQueuePut>
	  }
	  osDelay(1);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f002 ffd0 	bl	8003d38 <osDelay>
	PinEstado = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 8000d98:	e7cc      	b.n	8000d34 <LecturaPines+0xc>
 8000d9a:	bf00      	nop
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	20000080 	.word	0x20000080
 8000da4:	2000018c 	.word	0x2000018c
 8000da8:	20000184 	.word	0x20000184
 8000dac:	20000170 	.word	0x20000170

08000db0 <Ultrasound>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ultrasound */
void Ultrasound(void *argument)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ultrasound */
	/* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(PinPollingHandle,0x0002U,0,osWaitForever);
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <Ultrasound+0x44>)
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	f003 f854 	bl	8003e70 <osEventFlagsWait>
	  /*Reconfigura el pin como output */
	  timcounter = 0;
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <Ultrasound+0x48>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	480a      	ldr	r0, [pc, #40]	@ (8000dfc <Ultrasound+0x4c>)
 8000dd4:	f000 fdcc 	bl	8001970 <HAL_GPIO_WritePin>
	  /* funcion de delay de 5us*/
	  delay_us(10);
 8000dd8:	200a      	movs	r0, #10
 8000dda:	f7ff fe6f 	bl	8000abc <delay_us>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2110      	movs	r1, #16
 8000de2:	4806      	ldr	r0, [pc, #24]	@ (8000dfc <Ultrasound+0x4c>)
 8000de4:	f000 fdc4 	bl	8001970 <HAL_GPIO_WritePin>

    osDelay(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f002 ffa5 	bl	8003d38 <osDelay>
	  osEventFlagsWait(PinPollingHandle,0x0002U,0,osWaitForever);
 8000dee:	bf00      	nop
 8000df0:	e7e2      	b.n	8000db8 <Ultrasound+0x8>
 8000df2:	bf00      	nop
 8000df4:	20000184 	.word	0x20000184
 8000df8:	2000018c 	.word	0x2000018c
 8000dfc:	40020400 	.word	0x40020400

08000e00 <BuzzerA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BuzzerA */
void BuzzerA(void *argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BuzzerA */
	uint16_t frecuencia;
  /* Infinite loop */
  for(;;)
  {
	  if(EntradaBuzzer == 1){
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <BuzzerA+0x9c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d108      	bne.n	8000e22 <BuzzerA+0x22>
	  		  osMessageQueueGet(frecuenciaUltrasonidoHandle,&frecuencia,NULL,osWaitForever);
 8000e10:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <BuzzerA+0xa0>)
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	f107 010e 	add.w	r1, r7, #14
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f003 f9e5 	bl	80041ec <osMessageQueueGet>
	  }
	  if(EntradaBuzzer == 2){
 8000e22:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <BuzzerA+0x9c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d108      	bne.n	8000e3c <BuzzerA+0x3c>
	  		  osMessageQueueGet(frecuenciaConstanteHandle,&frecuencia,NULL,osWaitForever);
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <BuzzerA+0xa4>)
 8000e2c:	6818      	ldr	r0, [r3, #0]
 8000e2e:	f107 010e 	add.w	r1, r7, #14
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e36:	2200      	movs	r2, #0
 8000e38:	f003 f9d8 	bl	80041ec <osMessageQueueGet>
	  }
	  FrecuenciaMandar = frecuencia;
 8000e3c:	89fa      	ldrh	r2, [r7, #14]
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <BuzzerA+0xa8>)
 8000e40:	801a      	strh	r2, [r3, #0]

	  HAL_TIM_Base_Stop_IT(&htim3);
 8000e42:	481a      	ldr	r0, [pc, #104]	@ (8000eac <BuzzerA+0xac>)
 8000e44:	f001 fb12 	bl	800246c <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <BuzzerA+0xac>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	@ 0x24

	  uint32_t timerPeripherals = HAL_RCC_GetPCLK1Freq(); // Frecuencia del reloj del temporizador
 8000e50:	f001 fa32 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 8000e54:	61f8      	str	r0, [r7, #28]
	  uint32_t timerClock = timerPeripherals*2;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
	  uint32_t arr = 1000; // Mantén ARR fijo en este caso para un duty cycle del 0-100%
 8000e5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e60:	617b      	str	r3, [r7, #20]
	  uint32_t prescaler = (timerClock / (frecuencia * arr)) - 1; // Ajustar prescaler
 8000e62:	89fb      	ldrh	r3, [r7, #14]
 8000e64:	461a      	mov	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fb02 f303 	mul.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	3b01      	subs	r3, #1
 8000e74:	613b      	str	r3, [r7, #16]


	  __HAL_TIM_SET_PRESCALER(&htim3, prescaler); // Cambia el prescaler
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <BuzzerA+0xac>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28
	  __HAL_TIM_SET_AUTORELOAD(&htim3, arr);     // Cambia el ARR
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <BuzzerA+0xac>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e86:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <BuzzerA+0xac>)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	60d3      	str	r3, [r2, #12]

	      HAL_TIM_Base_Start_IT(&htim3);        // Reinicia el Timer3
 8000e8c:	4807      	ldr	r0, [pc, #28]	@ (8000eac <BuzzerA+0xac>)
 8000e8e:	f001 fa8b 	bl	80023a8 <HAL_TIM_Base_Start_IT>

    osDelay(1);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f002 ff50 	bl	8003d38 <osDelay>
  {
 8000e98:	e7b6      	b.n	8000e08 <BuzzerA+0x8>
 8000e9a:	bf00      	nop
 8000e9c:	20000002 	.word	0x20000002
 8000ea0:	20000170 	.word	0x20000170
 8000ea4:	20000174 	.word	0x20000174
 8000ea8:	200001ca 	.word	0x200001ca
 8000eac:	200000c8 	.word	0x200000c8

08000eb0 <Recibir_UART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Recibir_UART */
void Recibir_UART(void *argument)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Recibir_UART */
  /* Infinite loop */
  for(;;)
  {

	HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, 1);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4904      	ldr	r1, [pc, #16]	@ (8000ecc <Recibir_UART+0x1c>)
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <Recibir_UART+0x20>)
 8000ebe:	f001 ff11 	bl	8002ce4 <HAL_UART_Receive_IT>
    osDelay(1);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f002 ff38 	bl	8003d38 <osDelay>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, 1);
 8000ec8:	bf00      	nop
 8000eca:	e7f5      	b.n	8000eb8 <Recibir_UART+0x8>
 8000ecc:	200001b0 	.word	0x200001b0
 8000ed0:	20000110 	.word	0x20000110

08000ed4 <Mandar_UART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Mandar_UART */
void Mandar_UART(void *argument)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mandar_UART */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(UARTsendHandle,0x0001U,0,osWaitForever);
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <Mandar_UART+0x2c>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	f002 ffc2 	bl	8003e70 <osEventFlagsWait>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)txbuffer,sizeof(txbuffer));
 8000eec:	221e      	movs	r2, #30
 8000eee:	4905      	ldr	r1, [pc, #20]	@ (8000f04 <Mandar_UART+0x30>)
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <Mandar_UART+0x34>)
 8000ef2:	f001 fec1 	bl	8002c78 <HAL_UART_Transmit_IT>
    osDelay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f002 ff1e 	bl	8003d38 <osDelay>
	  osEventFlagsWait(UARTsendHandle,0x0001U,0,osWaitForever);
 8000efc:	bf00      	nop
 8000efe:	e7ed      	b.n	8000edc <Mandar_UART+0x8>
 8000f00:	20000188 	.word	0x20000188
 8000f04:	20000190 	.word	0x20000190
 8000f08:	20000110 	.word	0x20000110

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <Error_Handler+0x8>

08000f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_MspInit+0x54>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	4a11      	ldr	r2, [pc, #68]	@ (8000f6c <HAL_MspInit+0x54>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <HAL_MspInit+0x54>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_MspInit+0x54>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_MspInit+0x54>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_MspInit+0x54>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	210f      	movs	r1, #15
 8000f5a:	f06f 0001 	mvn.w	r0, #1
 8000f5e:	f000 faa2 	bl	80014a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800

08000f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x80>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d116      	bne.n	8000fb0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x84>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x84>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x84>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	2019      	movs	r0, #25
 8000fa4:	f000 fa7f 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fa8:	2019      	movs	r0, #25
 8000faa:	f000 fa98 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fae:	e01a      	b.n	8000fe6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x88>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d115      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x84>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x84>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x84>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2105      	movs	r1, #5
 8000fda:	201d      	movs	r0, #29
 8000fdc:	f000 fa63 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fe0:	201d      	movs	r0, #29
 8000fe2:	f000 fa7c 	bl	80014de <HAL_NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40000400 	.word	0x40000400

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1d      	ldr	r2, [pc, #116]	@ (8001090 <HAL_UART_MspInit+0x94>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d133      	bne.n	8001086 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <HAL_UART_MspInit+0x98>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <HAL_UART_MspInit+0x98>)
 8001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_UART_MspInit+0x98>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <HAL_UART_MspInit+0x98>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <HAL_UART_MspInit+0x98>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_UART_MspInit+0x98>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001056:	230c      	movs	r3, #12
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001066:	2307      	movs	r3, #7
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <HAL_UART_MspInit+0x9c>)
 8001072:	f000 fae1 	bl	8001638 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2105      	movs	r1, #5
 800107a:	2026      	movs	r0, #38	@ 0x26
 800107c:	f000 fa13 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001080:	2026      	movs	r0, #38	@ 0x26
 8001082:	f000 fa2c 	bl	80014de <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	@ 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40004400 	.word	0x40004400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <NMI_Handler+0x4>

080010a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <MemManage_Handler+0x4>

080010b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d6:	f000 f8eb 	bl	80012b0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010da:	f005 f893 	bl	8006204 <xTaskGetSchedulerState>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d001      	beq.n	80010e8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010e4:	f005 fec0 	bl	8006e68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010f2:	f001 f9ea 	bl	80024ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000080 	.word	0x20000080

08001100 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <TIM3_IRQHandler+0x10>)
 8001106:	f001 f9e0 	bl	80024ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200000c8 	.word	0x200000c8

08001114 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <USART2_IRQHandler+0x10>)
 800111a:	f001 fe09 	bl	8002d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000110 	.word	0x20000110

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f006 f9c8 	bl	80074ec <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	@ (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	@ (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20020000 	.word	0x20020000
 8001188:	00000400 	.word	0x00000400
 800118c:	200001cc 	.word	0x200001cc
 8001190:	20004c70 	.word	0x20004c70

08001194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <SystemInit+0x20>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119e:	4a05      	ldr	r2, [pc, #20]	@ (80011b4 <SystemInit+0x20>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011bc:	f7ff ffea 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e6:	f006 f987 	bl	80074f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff f9c1 	bl	8000570 <main>
  bx  lr    
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80011fc:	080081f8 	.word	0x080081f8
  ldr r2, =_sbss
 8001200:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001204:	20004c6c 	.word	0x20004c6c

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <HAL_Init+0x40>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <HAL_Init+0x40>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	@ (800124c <HAL_Init+0x40>)
 800122e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f92b 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	200f      	movs	r0, #15
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fe6a 	bl	8000f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f943 	bl	80014fa <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800128c:	f000 f90b 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	@ (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000004 	.word	0x20000004
 80012a8:	2000000c 	.word	0x2000000c
 80012ac:	20000008 	.word	0x20000008

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	@ (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000000c 	.word	0x2000000c
 80012d4:	200001d0 	.word	0x200001d0

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200001d0 	.word	0x200001d0

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	@ (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	@ (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	@ (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	@ (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff29 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff3e 	bl	8001338 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff8e 	bl	80013e4 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff31 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffa2 	bl	800144c <SysTick_Config>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff feda 	bl	80012d8 <HAL_GetTick>
 8001524:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d008      	beq.n	8001544 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2280      	movs	r2, #128	@ 0x80
 8001536:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e052      	b.n	80015ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0216 	bic.w	r2, r2, #22
 8001552:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001562:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	2b00      	cmp	r3, #0
 800156a:	d103      	bne.n	8001574 <HAL_DMA_Abort+0x62>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001570:	2b00      	cmp	r3, #0
 8001572:	d007      	beq.n	8001584 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0208 	bic.w	r2, r2, #8
 8001582:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001594:	e013      	b.n	80015be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001596:	f7ff fe9f 	bl	80012d8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d90c      	bls.n	80015be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2220      	movs	r2, #32
 80015a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2203      	movs	r2, #3
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e015      	b.n	80015ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e4      	bne.n	8001596 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d0:	223f      	movs	r2, #63	@ 0x3f
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d004      	beq.n	8001610 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e00c      	b.n	800162a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2205      	movs	r2, #5
 8001614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	@ 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	e159      	b.n	8001908 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	f040 8148 	bne.w	8001902 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d005      	beq.n	800168a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001686:	2b02      	cmp	r3, #2
 8001688:	d130      	bne.n	80016ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c0:	2201      	movs	r2, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 0201 	and.w	r2, r3, #1
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d017      	beq.n	8001728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d123      	bne.n	800177c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	08da      	lsrs	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3208      	adds	r2, #8
 8001776:	69b9      	ldr	r1, [r7, #24]
 8001778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0203 	and.w	r2, r3, #3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80a2 	beq.w	8001902 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b57      	ldr	r3, [pc, #348]	@ (8001920 <HAL_GPIO_Init+0x2e8>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	4a56      	ldr	r2, [pc, #344]	@ (8001920 <HAL_GPIO_Init+0x2e8>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ce:	4b54      	ldr	r3, [pc, #336]	@ (8001920 <HAL_GPIO_Init+0x2e8>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017da:	4a52      	ldr	r2, [pc, #328]	@ (8001924 <HAL_GPIO_Init+0x2ec>)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	220f      	movs	r2, #15
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a49      	ldr	r2, [pc, #292]	@ (8001928 <HAL_GPIO_Init+0x2f0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d019      	beq.n	800183a <HAL_GPIO_Init+0x202>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a48      	ldr	r2, [pc, #288]	@ (800192c <HAL_GPIO_Init+0x2f4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0x1fe>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a47      	ldr	r2, [pc, #284]	@ (8001930 <HAL_GPIO_Init+0x2f8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00d      	beq.n	8001832 <HAL_GPIO_Init+0x1fa>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a46      	ldr	r2, [pc, #280]	@ (8001934 <HAL_GPIO_Init+0x2fc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x1f6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a45      	ldr	r2, [pc, #276]	@ (8001938 <HAL_GPIO_Init+0x300>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_GPIO_Init+0x1f2>
 8001826:	2304      	movs	r3, #4
 8001828:	e008      	b.n	800183c <HAL_GPIO_Init+0x204>
 800182a:	2307      	movs	r3, #7
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x204>
 800182e:	2303      	movs	r3, #3
 8001830:	e004      	b.n	800183c <HAL_GPIO_Init+0x204>
 8001832:	2302      	movs	r3, #2
 8001834:	e002      	b.n	800183c <HAL_GPIO_Init+0x204>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x204>
 800183a:	2300      	movs	r3, #0
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	f002 0203 	and.w	r2, r2, #3
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	4093      	lsls	r3, r2
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800184c:	4935      	ldr	r1, [pc, #212]	@ (8001924 <HAL_GPIO_Init+0x2ec>)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185a:	4b38      	ldr	r3, [pc, #224]	@ (800193c <HAL_GPIO_Init+0x304>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187e:	4a2f      	ldr	r2, [pc, #188]	@ (800193c <HAL_GPIO_Init+0x304>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001884:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <HAL_GPIO_Init+0x304>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a8:	4a24      	ldr	r2, [pc, #144]	@ (800193c <HAL_GPIO_Init+0x304>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ae:	4b23      	ldr	r3, [pc, #140]	@ (800193c <HAL_GPIO_Init+0x304>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d2:	4a1a      	ldr	r2, [pc, #104]	@ (800193c <HAL_GPIO_Init+0x304>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d8:	4b18      	ldr	r3, [pc, #96]	@ (800193c <HAL_GPIO_Init+0x304>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018fc:	4a0f      	ldr	r2, [pc, #60]	@ (800193c <HAL_GPIO_Init+0x304>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3301      	adds	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b0f      	cmp	r3, #15
 800190c:	f67f aea2 	bls.w	8001654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40013800 	.word	0x40013800
 8001928:	40020000 	.word	0x40020000
 800192c:	40020400 	.word	0x40020400
 8001930:	40020800 	.word	0x40020800
 8001934:	40020c00 	.word	0x40020c00
 8001938:	40021000 	.word	0x40021000
 800193c:	40013c00 	.word	0x40013c00

08001940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e001      	b.n	8001962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800198c:	e003      	b.n	8001996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	041a      	lsls	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	619a      	str	r2, [r3, #24]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b4:	887a      	ldrh	r2, [r7, #2]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	041a      	lsls	r2, r3, #16
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43d9      	mvns	r1, r3
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	400b      	ands	r3, r1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e267      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d075      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019f6:	4b88      	ldr	r3, [pc, #544]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d00c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a02:	4b85      	ldr	r3, [pc, #532]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d112      	bne.n	8001a34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0e:	4b82      	ldr	r3, [pc, #520]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a1a:	d10b      	bne.n	8001a34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d05b      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x108>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d157      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e242      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a3c:	d106      	bne.n	8001a4c <HAL_RCC_OscConfig+0x74>
 8001a3e:	4b76      	ldr	r3, [pc, #472]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a75      	ldr	r2, [pc, #468]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e01d      	b.n	8001a88 <HAL_RCC_OscConfig+0xb0>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x98>
 8001a56:	4b70      	ldr	r3, [pc, #448]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a6f      	ldr	r2, [pc, #444]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b6d      	ldr	r3, [pc, #436]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6c      	ldr	r2, [pc, #432]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0xb0>
 8001a70:	4b69      	ldr	r3, [pc, #420]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a68      	ldr	r2, [pc, #416]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b66      	ldr	r3, [pc, #408]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a65      	ldr	r2, [pc, #404]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fc22 	bl	80012d8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff fc1e 	bl	80012d8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	@ 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e207      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0xc0>
 8001ab6:	e014      	b.n	8001ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fc0e 	bl	80012d8 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fc0a 	bl	80012d8 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	@ 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e1f3      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	4b51      	ldr	r3, [pc, #324]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xe8>
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d063      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aee:	4b4a      	ldr	r3, [pc, #296]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afa:	4b47      	ldr	r3, [pc, #284]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d11c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b06:	4b44      	ldr	r3, [pc, #272]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d116      	bne.n	8001b40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	4b41      	ldr	r3, [pc, #260]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <HAL_RCC_OscConfig+0x152>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e1c7      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4937      	ldr	r1, [pc, #220]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	e03a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d020      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b48:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <HAL_RCC_OscConfig+0x244>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fbc3 	bl	80012d8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b56:	f7ff fbbf 	bl	80012d8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1a8      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	4b2b      	ldr	r3, [pc, #172]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b74:	4b28      	ldr	r3, [pc, #160]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4925      	ldr	r1, [pc, #148]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8a:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <HAL_RCC_OscConfig+0x244>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff fba2 	bl	80012d8 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b98:	f7ff fb9e 	bl	80012d8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e187      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d036      	beq.n	8001c30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d016      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <HAL_RCC_OscConfig+0x248>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fb82 	bl	80012d8 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fb7e 	bl	80012d8 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e167      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_RCC_OscConfig+0x240>)
 8001bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x200>
 8001bf6:	e01b      	b.n	8001c30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <HAL_RCC_OscConfig+0x248>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fb6b 	bl	80012d8 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c04:	e00e      	b.n	8001c24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c06:	f7ff fb67 	bl	80012d8 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d907      	bls.n	8001c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e150      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	42470000 	.word	0x42470000
 8001c20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b88      	ldr	r3, [pc, #544]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ea      	bne.n	8001c06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8097 	beq.w	8001d6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b81      	ldr	r3, [pc, #516]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10f      	bne.n	8001c6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b7d      	ldr	r3, [pc, #500]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a7c      	ldr	r2, [pc, #496]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6e:	4b77      	ldr	r3, [pc, #476]	@ (8001e4c <HAL_RCC_OscConfig+0x474>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d118      	bne.n	8001cac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7a:	4b74      	ldr	r3, [pc, #464]	@ (8001e4c <HAL_RCC_OscConfig+0x474>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a73      	ldr	r2, [pc, #460]	@ (8001e4c <HAL_RCC_OscConfig+0x474>)
 8001c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c86:	f7ff fb27 	bl	80012d8 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8e:	f7ff fb23 	bl	80012d8 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e10c      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e4c <HAL_RCC_OscConfig+0x474>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x2ea>
 8001cb4:	4b64      	ldr	r3, [pc, #400]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb8:	4a63      	ldr	r2, [pc, #396]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc0:	e01c      	b.n	8001cfc <HAL_RCC_OscConfig+0x324>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x30c>
 8001cca:	4b5f      	ldr	r3, [pc, #380]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cce:	4a5e      	ldr	r2, [pc, #376]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cda:	4a5b      	ldr	r2, [pc, #364]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0x324>
 8001ce4:	4b58      	ldr	r3, [pc, #352]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce8:	4a57      	ldr	r2, [pc, #348]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf0:	4b55      	ldr	r3, [pc, #340]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf4:	4a54      	ldr	r2, [pc, #336]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001cf6:	f023 0304 	bic.w	r3, r3, #4
 8001cfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d015      	beq.n	8001d30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff fae8 	bl	80012d8 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fae4 	bl	80012d8 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e0cb      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d22:	4b49      	ldr	r3, [pc, #292]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0ee      	beq.n	8001d0c <HAL_RCC_OscConfig+0x334>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7ff fad2 	bl	80012d8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7ff face 	bl	80012d8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0b5      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1ee      	bne.n	8001d38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d60:	4b39      	ldr	r3, [pc, #228]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	4a38      	ldr	r2, [pc, #224]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001d66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a1 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d76:	4b34      	ldr	r3, [pc, #208]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d05c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d141      	bne.n	8001e0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <HAL_RCC_OscConfig+0x478>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff faa2 	bl	80012d8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff fa9e 	bl	80012d8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e087      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	019b      	lsls	r3, r3, #6
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	041b      	lsls	r3, r3, #16
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	491b      	ldr	r1, [pc, #108]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <HAL_RCC_OscConfig+0x478>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff fa77 	bl	80012d8 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7ff fa73 	bl	80012d8 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e05c      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x416>
 8001e0c:	e054      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <HAL_RCC_OscConfig+0x478>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff fa60 	bl	80012d8 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff fa5c 	bl	80012d8 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e045      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_RCC_OscConfig+0x470>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x444>
 8001e3a:	e03d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e038      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <HAL_RCC_OscConfig+0x4ec>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d028      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d121      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d11a      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e84:	4013      	ands	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d111      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0cc      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001edc:	4b68      	ldr	r3, [pc, #416]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d90c      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b65      	ldr	r3, [pc, #404]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b63      	ldr	r3, [pc, #396]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0b8      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f1c:	4b59      	ldr	r3, [pc, #356]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a58      	ldr	r2, [pc, #352]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f34:	4b53      	ldr	r3, [pc, #332]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4a52      	ldr	r2, [pc, #328]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b50      	ldr	r3, [pc, #320]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	494d      	ldr	r1, [pc, #308]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d044      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b47      	ldr	r3, [pc, #284]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d119      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e07f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f86:	4b3f      	ldr	r3, [pc, #252]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e06f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b3b      	ldr	r3, [pc, #236]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e067      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b37      	ldr	r3, [pc, #220]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4934      	ldr	r1, [pc, #208]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7ff f98e 	bl	80012d8 <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7ff f98a 	bl	80012d8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e04f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 020c 	and.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d20c      	bcs.n	8002010 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e032      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201c:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4916      	ldr	r1, [pc, #88]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203a:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	490e      	ldr	r1, [pc, #56]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800204e:	f000 f821 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8002052:	4602      	mov	r2, r0
 8002054:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	490a      	ldr	r1, [pc, #40]	@ (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	5ccb      	ldrb	r3, [r1, r3]
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	4a09      	ldr	r2, [pc, #36]	@ (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800206a:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f8ee 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023c00 	.word	0x40023c00
 8002084:	40023800 	.word	0x40023800
 8002088:	0800809c 	.word	0x0800809c
 800208c:	20000004 	.word	0x20000004
 8002090:	20000008 	.word	0x20000008

08002094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002098:	b094      	sub	sp, #80	@ 0x50
 800209a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ac:	4b79      	ldr	r3, [pc, #484]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d00d      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x40>
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	f200 80e1 	bhi.w	8002280 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x34>
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0x3a>
 80020c6:	e0db      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b73      	ldr	r3, [pc, #460]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020cc:	e0db      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ce:	4b73      	ldr	r3, [pc, #460]	@ (800229c <HAL_RCC_GetSysClockFreq+0x208>)
 80020d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020d2:	e0d8      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x200>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020de:	4b6d      	ldr	r3, [pc, #436]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d063      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	099b      	lsrs	r3, r3, #6
 80020f0:	2200      	movs	r2, #0
 80020f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80020f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80020fe:	2300      	movs	r3, #0
 8002100:	637b      	str	r3, [r7, #52]	@ 0x34
 8002102:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002106:	4622      	mov	r2, r4
 8002108:	462b      	mov	r3, r5
 800210a:	f04f 0000 	mov.w	r0, #0
 800210e:	f04f 0100 	mov.w	r1, #0
 8002112:	0159      	lsls	r1, r3, #5
 8002114:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002118:	0150      	lsls	r0, r2, #5
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4621      	mov	r1, r4
 8002120:	1a51      	subs	r1, r2, r1
 8002122:	6139      	str	r1, [r7, #16]
 8002124:	4629      	mov	r1, r5
 8002126:	eb63 0301 	sbc.w	r3, r3, r1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002138:	4659      	mov	r1, fp
 800213a:	018b      	lsls	r3, r1, #6
 800213c:	4651      	mov	r1, sl
 800213e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002142:	4651      	mov	r1, sl
 8002144:	018a      	lsls	r2, r1, #6
 8002146:	4651      	mov	r1, sl
 8002148:	ebb2 0801 	subs.w	r8, r2, r1
 800214c:	4659      	mov	r1, fp
 800214e:	eb63 0901 	sbc.w	r9, r3, r1
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800215e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002166:	4690      	mov	r8, r2
 8002168:	4699      	mov	r9, r3
 800216a:	4623      	mov	r3, r4
 800216c:	eb18 0303 	adds.w	r3, r8, r3
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	462b      	mov	r3, r5
 8002174:	eb49 0303 	adc.w	r3, r9, r3
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002186:	4629      	mov	r1, r5
 8002188:	024b      	lsls	r3, r1, #9
 800218a:	4621      	mov	r1, r4
 800218c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002190:	4621      	mov	r1, r4
 8002192:	024a      	lsls	r2, r1, #9
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800219a:	2200      	movs	r2, #0
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800219e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021a4:	f7fe f86c 	bl	8000280 <__aeabi_uldivmod>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4613      	mov	r3, r2
 80021ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021b0:	e058      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b2:	4b38      	ldr	r3, [pc, #224]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x200>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	2200      	movs	r2, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	4611      	mov	r1, r2
 80021be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021c2:	623b      	str	r3, [r7, #32]
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021cc:	4642      	mov	r2, r8
 80021ce:	464b      	mov	r3, r9
 80021d0:	f04f 0000 	mov.w	r0, #0
 80021d4:	f04f 0100 	mov.w	r1, #0
 80021d8:	0159      	lsls	r1, r3, #5
 80021da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021de:	0150      	lsls	r0, r2, #5
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4641      	mov	r1, r8
 80021e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80021ea:	4649      	mov	r1, r9
 80021ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002200:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002204:	ebb2 040a 	subs.w	r4, r2, sl
 8002208:	eb63 050b 	sbc.w	r5, r3, fp
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	00eb      	lsls	r3, r5, #3
 8002216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800221a:	00e2      	lsls	r2, r4, #3
 800221c:	4614      	mov	r4, r2
 800221e:	461d      	mov	r5, r3
 8002220:	4643      	mov	r3, r8
 8002222:	18e3      	adds	r3, r4, r3
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	464b      	mov	r3, r9
 8002228:	eb45 0303 	adc.w	r3, r5, r3
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9d7 4500 	ldrd	r4, r5, [r7]
 800223a:	4629      	mov	r1, r5
 800223c:	028b      	lsls	r3, r1, #10
 800223e:	4621      	mov	r1, r4
 8002240:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002244:	4621      	mov	r1, r4
 8002246:	028a      	lsls	r2, r1, #10
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224e:	2200      	movs	r2, #0
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	61fa      	str	r2, [r7, #28]
 8002254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002258:	f7fe f812 	bl	8000280 <__aeabi_uldivmod>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4613      	mov	r3, r2
 8002262:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002264:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x200>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	3301      	adds	r3, #1
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002274:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800227e:	e002      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x204>)
 8002282:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002288:	4618      	mov	r0, r3
 800228a:	3750      	adds	r7, #80	@ 0x50
 800228c:	46bd      	mov	sp, r7
 800228e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	00f42400 	.word	0x00f42400
 800229c:	007a1200 	.word	0x007a1200

080022a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022bc:	f7ff fff0 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	0a9b      	lsrs	r3, r3, #10
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	4903      	ldr	r1, [pc, #12]	@ (80022dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40023800 	.word	0x40023800
 80022dc:	080080ac 	.word	0x080080ac

080022e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022e4:	f7ff ffdc 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	0b5b      	lsrs	r3, r3, #13
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	4903      	ldr	r1, [pc, #12]	@ (8002304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f6:	5ccb      	ldrb	r3, [r1, r3]
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40023800 	.word	0x40023800
 8002304:	080080ac 	.word	0x080080ac

08002308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e041      	b.n	800239e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fe1e 	bl	8000f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f000 fa9e 	bl	8002888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d001      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e044      	b.n	800244a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <HAL_TIM_Base_Start_IT+0xb0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d018      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x6c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ea:	d013      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x6c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1a      	ldr	r2, [pc, #104]	@ (800245c <HAL_TIM_Base_Start_IT+0xb4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00e      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x6c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a19      	ldr	r2, [pc, #100]	@ (8002460 <HAL_TIM_Base_Start_IT+0xb8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x6c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a17      	ldr	r2, [pc, #92]	@ (8002464 <HAL_TIM_Base_Start_IT+0xbc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x6c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a16      	ldr	r2, [pc, #88]	@ (8002468 <HAL_TIM_Base_Start_IT+0xc0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d111      	bne.n	8002438 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b06      	cmp	r3, #6
 8002424:	d010      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002436:	e007      	b.n	8002448 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40010000 	.word	0x40010000
 800245c:	40000400 	.word	0x40000400
 8002460:	40000800 	.word	0x40000800
 8002464:	40000c00 	.word	0x40000c00
 8002468:	40014000 	.word	0x40014000

0800246c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6a1a      	ldr	r2, [r3, #32]
 800248a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10f      	bne.n	80024b4 <HAL_TIM_Base_Stop_IT+0x48>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	f240 4344 	movw	r3, #1092	@ 0x444
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_TIM_Base_Stop_IT+0x48>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01b      	beq.n	800252e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f06f 0202 	mvn.w	r2, #2
 80024fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f999 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 800251a:	e005      	b.n	8002528 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f98b 	bl	8002838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f99c 	bl	8002860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d01b      	beq.n	800257a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f06f 0204 	mvn.w	r2, #4
 800254a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f973 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 8002566:	e005      	b.n	8002574 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f965 	bl	8002838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f976 	bl	8002860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01b      	beq.n	80025c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f06f 0208 	mvn.w	r2, #8
 8002596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2204      	movs	r2, #4
 800259c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f94d 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 80025b2:	e005      	b.n	80025c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f93f 	bl	8002838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f950 	bl	8002860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01b      	beq.n	8002612 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f06f 0210 	mvn.w	r2, #16
 80025e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2208      	movs	r2, #8
 80025e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f927 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 80025fe:	e005      	b.n	800260c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f919 	bl	8002838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f92a 	bl	8002860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f06f 0201 	mvn.w	r2, #1
 800262e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7fe fa63 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00c      	beq.n	800265a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fab5 	bl	8002bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00c      	beq.n	800267e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f8fb 	bl	8002874 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f06f 0220 	mvn.w	r2, #32
 800269a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fa87 	bl	8002bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_TIM_ConfigClockSource+0x1c>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e0b4      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x186>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026fe:	d03e      	beq.n	800277e <HAL_TIM_ConfigClockSource+0xd4>
 8002700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002704:	f200 8087 	bhi.w	8002816 <HAL_TIM_ConfigClockSource+0x16c>
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800270c:	f000 8086 	beq.w	800281c <HAL_TIM_ConfigClockSource+0x172>
 8002710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002714:	d87f      	bhi.n	8002816 <HAL_TIM_ConfigClockSource+0x16c>
 8002716:	2b70      	cmp	r3, #112	@ 0x70
 8002718:	d01a      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0xa6>
 800271a:	2b70      	cmp	r3, #112	@ 0x70
 800271c:	d87b      	bhi.n	8002816 <HAL_TIM_ConfigClockSource+0x16c>
 800271e:	2b60      	cmp	r3, #96	@ 0x60
 8002720:	d050      	beq.n	80027c4 <HAL_TIM_ConfigClockSource+0x11a>
 8002722:	2b60      	cmp	r3, #96	@ 0x60
 8002724:	d877      	bhi.n	8002816 <HAL_TIM_ConfigClockSource+0x16c>
 8002726:	2b50      	cmp	r3, #80	@ 0x50
 8002728:	d03c      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0xfa>
 800272a:	2b50      	cmp	r3, #80	@ 0x50
 800272c:	d873      	bhi.n	8002816 <HAL_TIM_ConfigClockSource+0x16c>
 800272e:	2b40      	cmp	r3, #64	@ 0x40
 8002730:	d058      	beq.n	80027e4 <HAL_TIM_ConfigClockSource+0x13a>
 8002732:	2b40      	cmp	r3, #64	@ 0x40
 8002734:	d86f      	bhi.n	8002816 <HAL_TIM_ConfigClockSource+0x16c>
 8002736:	2b30      	cmp	r3, #48	@ 0x30
 8002738:	d064      	beq.n	8002804 <HAL_TIM_ConfigClockSource+0x15a>
 800273a:	2b30      	cmp	r3, #48	@ 0x30
 800273c:	d86b      	bhi.n	8002816 <HAL_TIM_ConfigClockSource+0x16c>
 800273e:	2b20      	cmp	r3, #32
 8002740:	d060      	beq.n	8002804 <HAL_TIM_ConfigClockSource+0x15a>
 8002742:	2b20      	cmp	r3, #32
 8002744:	d867      	bhi.n	8002816 <HAL_TIM_ConfigClockSource+0x16c>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d05c      	beq.n	8002804 <HAL_TIM_ConfigClockSource+0x15a>
 800274a:	2b10      	cmp	r3, #16
 800274c:	d05a      	beq.n	8002804 <HAL_TIM_ConfigClockSource+0x15a>
 800274e:	e062      	b.n	8002816 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002760:	f000 f998 	bl	8002a94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002772:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	609a      	str	r2, [r3, #8]
      break;
 800277c:	e04f      	b.n	800281e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800278e:	f000 f981 	bl	8002a94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027a0:	609a      	str	r2, [r3, #8]
      break;
 80027a2:	e03c      	b.n	800281e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b0:	461a      	mov	r2, r3
 80027b2:	f000 f8f5 	bl	80029a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2150      	movs	r1, #80	@ 0x50
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f94e 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 80027c2:	e02c      	b.n	800281e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027d0:	461a      	mov	r2, r3
 80027d2:	f000 f914 	bl	80029fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2160      	movs	r1, #96	@ 0x60
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f93e 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 80027e2:	e01c      	b.n	800281e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f0:	461a      	mov	r2, r3
 80027f2:	f000 f8d5 	bl	80029a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2140      	movs	r1, #64	@ 0x40
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f92e 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 8002802:	e00c      	b.n	800281e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	4610      	mov	r0, r2
 8002810:	f000 f925 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 8002814:	e003      	b.n	800281e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      break;
 800281a:	e000      	b.n	800281e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800281c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a3a      	ldr	r2, [pc, #232]	@ (8002984 <TIM_Base_SetConfig+0xfc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00f      	beq.n	80028c0 <TIM_Base_SetConfig+0x38>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a6:	d00b      	beq.n	80028c0 <TIM_Base_SetConfig+0x38>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a37      	ldr	r2, [pc, #220]	@ (8002988 <TIM_Base_SetConfig+0x100>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d007      	beq.n	80028c0 <TIM_Base_SetConfig+0x38>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a36      	ldr	r2, [pc, #216]	@ (800298c <TIM_Base_SetConfig+0x104>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d003      	beq.n	80028c0 <TIM_Base_SetConfig+0x38>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a35      	ldr	r2, [pc, #212]	@ (8002990 <TIM_Base_SetConfig+0x108>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d108      	bne.n	80028d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002984 <TIM_Base_SetConfig+0xfc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01b      	beq.n	8002912 <TIM_Base_SetConfig+0x8a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e0:	d017      	beq.n	8002912 <TIM_Base_SetConfig+0x8a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a28      	ldr	r2, [pc, #160]	@ (8002988 <TIM_Base_SetConfig+0x100>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d013      	beq.n	8002912 <TIM_Base_SetConfig+0x8a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a27      	ldr	r2, [pc, #156]	@ (800298c <TIM_Base_SetConfig+0x104>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00f      	beq.n	8002912 <TIM_Base_SetConfig+0x8a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a26      	ldr	r2, [pc, #152]	@ (8002990 <TIM_Base_SetConfig+0x108>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00b      	beq.n	8002912 <TIM_Base_SetConfig+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a25      	ldr	r2, [pc, #148]	@ (8002994 <TIM_Base_SetConfig+0x10c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d007      	beq.n	8002912 <TIM_Base_SetConfig+0x8a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a24      	ldr	r2, [pc, #144]	@ (8002998 <TIM_Base_SetConfig+0x110>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d003      	beq.n	8002912 <TIM_Base_SetConfig+0x8a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a23      	ldr	r2, [pc, #140]	@ (800299c <TIM_Base_SetConfig+0x114>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d108      	bne.n	8002924 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a0e      	ldr	r2, [pc, #56]	@ (8002984 <TIM_Base_SetConfig+0xfc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d103      	bne.n	8002958 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d105      	bne.n	8002976 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f023 0201 	bic.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]
  }
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40000c00 	.word	0x40000c00
 8002994:	40014000 	.word	0x40014000
 8002998:	40014400 	.word	0x40014400
 800299c:	40014800 	.word	0x40014800

080029a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 0201 	bic.w	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 030a 	bic.w	r3, r3, #10
 80029dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f023 0210 	bic.w	r2, r3, #16
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	031b      	lsls	r3, r3, #12
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f043 0307 	orr.w	r3, r3, #7
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	021a      	lsls	r2, r3, #8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e050      	b.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b38:	d013      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a16      	ldr	r2, [pc, #88]	@ (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a15      	ldr	r2, [pc, #84]	@ (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	@ (8002bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10c      	bne.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40014000 	.word	0x40014000

08002bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e042      	b.n	8002c70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe f9fc 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	@ 0x24
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fd07 	bl	8003630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d121      	bne.n	8002cd6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_UART_Transmit_IT+0x26>
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e01a      	b.n	8002cd8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2221      	movs	r2, #33	@ 0x21
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cd0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e000      	b.n	8002cd8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d112      	bne.n	8002d24 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_UART_Receive_IT+0x26>
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00b      	b.n	8002d26 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fab0 	bl	8003280 <UART_Start_Receive_IT>
 8002d20:	4603      	mov	r3, r0
 8002d22:	e000      	b.n	8002d26 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0ba      	sub	sp, #232	@ 0xe8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_UART_IRQHandler+0x66>
 8002d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fb8f 	bl	80034b2 <UART_Receive_IT>
      return;
 8002d94:	e25b      	b.n	800324e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80de 	beq.w	8002f5c <HAL_UART_IRQHandler+0x22c>
 8002da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80d1 	beq.w	8002f5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_UART_IRQHandler+0xae>
 8002dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_UART_IRQHandler+0xd2>
 8002dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f043 0202 	orr.w	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_UART_IRQHandler+0xf6>
 8002e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d011      	beq.n	8002e56 <HAL_UART_IRQHandler+0x126>
 8002e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f043 0208 	orr.w	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 81f2 	beq.w	8003244 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_UART_IRQHandler+0x14e>
 8002e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb1a 	bl	80034b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e88:	2b40      	cmp	r3, #64	@ 0x40
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_UART_IRQHandler+0x17a>
 8002ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d04f      	beq.n	8002f4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa22 	bl	80032f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eba:	2b40      	cmp	r3, #64	@ 0x40
 8002ebc:	d141      	bne.n	8002f42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ed8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3314      	adds	r3, #20
 8002ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002eea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002eee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1d9      	bne.n	8002ebe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d013      	beq.n	8002f3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f16:	4a7e      	ldr	r2, [pc, #504]	@ (8003110 <HAL_UART_IRQHandler+0x3e0>)
 8002f18:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fb67 	bl	80015f2 <HAL_DMA_Abort_IT>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f34:	4610      	mov	r0, r2
 8002f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	e00e      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f98a 	bl	8003254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e00a      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f986 	bl	8003254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	e006      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f982 	bl	8003254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f56:	e175      	b.n	8003244 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	bf00      	nop
    return;
 8002f5a:	e173      	b.n	8003244 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 814f 	bne.w	8003204 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8148 	beq.w	8003204 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8141 	beq.w	8003204 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa2:	2b40      	cmp	r3, #64	@ 0x40
 8002fa4:	f040 80b6 	bne.w	8003114 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8145 	beq.w	8003248 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	f080 813e 	bcs.w	8003248 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fde:	f000 8088 	beq.w	80030f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800300e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003016:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800301a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1d9      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3314      	adds	r3, #20
 8003034:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800303e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003052:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003056:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800305a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003064:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e1      	bne.n	800302e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3314      	adds	r3, #20
 8003070:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800307a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800307c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800308e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003090:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003094:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800309c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e3      	bne.n	800306a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030c2:	f023 0310 	bic.w	r3, r3, #16
 80030c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030dc:	e841 2300 	strex	r3, r2, [r1]
 80030e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e3      	bne.n	80030b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe fa10 	bl	8001512 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003100:	b29b      	uxth	r3, r3
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	b29b      	uxth	r3, r3
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8ad 	bl	8003268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800310e:	e09b      	b.n	8003248 <HAL_UART_IRQHandler+0x518>
 8003110:	080033bb 	.word	0x080033bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800311c:	b29b      	uxth	r3, r3
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 808e 	beq.w	800324c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8089 	beq.w	800324c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	330c      	adds	r3, #12
 8003140:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800314a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003150:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	330c      	adds	r3, #12
 800315a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800315e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003160:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003164:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800316c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e3      	bne.n	800313a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	623b      	str	r3, [r7, #32]
   return(result);
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3314      	adds	r3, #20
 8003192:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003196:	633a      	str	r2, [r7, #48]	@ 0x30
 8003198:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800319c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e3      	bne.n	8003172 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	330c      	adds	r3, #12
 80031be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0310 	bic.w	r3, r3, #16
 80031ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80031dc:	61fa      	str	r2, [r7, #28]
 80031de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	617b      	str	r3, [r7, #20]
   return(result);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e3      	bne.n	80031b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f833 	bl	8003268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003202:	e023      	b.n	800324c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_UART_IRQHandler+0x4f4>
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f8e0 	bl	80033e2 <UART_Transmit_IT>
    return;
 8003222:	e014      	b.n	800324e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <HAL_UART_IRQHandler+0x51e>
 8003230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f920 	bl	8003482 <UART_EndTransmit_IT>
    return;
 8003242:	e004      	b.n	800324e <HAL_UART_IRQHandler+0x51e>
    return;
 8003244:	bf00      	nop
 8003246:	e002      	b.n	800324e <HAL_UART_IRQHandler+0x51e>
      return;
 8003248:	bf00      	nop
 800324a:	e000      	b.n	800324e <HAL_UART_IRQHandler+0x51e>
      return;
 800324c:	bf00      	nop
  }
}
 800324e:	37e8      	adds	r7, #232	@ 0xe8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2222      	movs	r2, #34	@ 0x22
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0220 	orr.w	r2, r2, #32
 80032e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b095      	sub	sp, #84	@ 0x54
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	330c      	adds	r3, #12
 8003302:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003306:	e853 3f00 	ldrex	r3, [r3]
 800330a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800330c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	330c      	adds	r3, #12
 800331a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800331c:	643a      	str	r2, [r7, #64]	@ 0x40
 800331e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003322:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800332a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e5      	bne.n	80032fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3314      	adds	r3, #20
 8003336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3314      	adds	r3, #20
 800334e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003350:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003352:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003358:	e841 2300 	strex	r3, r2, [r1]
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e5      	bne.n	8003330 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	2b01      	cmp	r3, #1
 800336a:	d119      	bne.n	80033a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	60bb      	str	r3, [r7, #8]
   return(result);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f023 0310 	bic.w	r3, r3, #16
 8003382:	647b      	str	r3, [r7, #68]	@ 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	330c      	adds	r3, #12
 800338a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800338c:	61ba      	str	r2, [r7, #24]
 800338e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	6979      	ldr	r1, [r7, #20]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	e841 2300 	strex	r3, r2, [r1]
 8003398:	613b      	str	r3, [r7, #16]
   return(result);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e5      	bne.n	800336c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033ae:	bf00      	nop
 80033b0:	3754      	adds	r7, #84	@ 0x54
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7ff ff3d 	bl	8003254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b21      	cmp	r3, #33	@ 0x21
 80033f4:	d13e      	bne.n	8003474 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033fe:	d114      	bne.n	800342a <UART_Transmit_IT+0x48>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d110      	bne.n	800342a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800341c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	1c9a      	adds	r2, r3, #2
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	621a      	str	r2, [r3, #32]
 8003428:	e008      	b.n	800343c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6211      	str	r1, [r2, #32]
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29b      	uxth	r3, r3
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4619      	mov	r1, r3
 800344a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800345e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800346e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003498:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fb48 	bl	8000b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b08c      	sub	sp, #48	@ 0x30
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b22      	cmp	r3, #34	@ 0x22
 80034c4:	f040 80ae 	bne.w	8003624 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d0:	d117      	bne.n	8003502 <UART_Receive_IT+0x50>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d113      	bne.n	8003502 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fa:	1c9a      	adds	r2, r3, #2
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003500:	e026      	b.n	8003550 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003506:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003514:	d007      	beq.n	8003526 <UART_Receive_IT+0x74>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <UART_Receive_IT+0x82>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	e008      	b.n	8003546 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003540:	b2da      	uxtb	r2, r3
 8003542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003544:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29b      	uxth	r3, r3
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4619      	mov	r1, r3
 800355e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003560:	2b00      	cmp	r3, #0
 8003562:	d15d      	bne.n	8003620 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0220 	bic.w	r2, r2, #32
 8003572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d135      	bne.n	8003616 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	330c      	adds	r3, #12
 80035b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	613b      	str	r3, [r7, #16]
   return(result);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f023 0310 	bic.w	r3, r3, #16
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d0:	623a      	str	r2, [r7, #32]
 80035d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	69f9      	ldr	r1, [r7, #28]
 80035d6:	6a3a      	ldr	r2, [r7, #32]
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e5      	bne.n	80035b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d10a      	bne.n	8003608 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff fe2a 	bl	8003268 <HAL_UARTEx_RxEventCallback>
 8003614:	e002      	b.n	800361c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fa98 	bl	8000b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	e002      	b.n	8003626 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3730      	adds	r7, #48	@ 0x30
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003634:	b0c0      	sub	sp, #256	@ 0x100
 8003636:	af00      	add	r7, sp, #0
 8003638:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364c:	68d9      	ldr	r1, [r3, #12]
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	ea40 0301 	orr.w	r3, r0, r1
 8003658:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800365a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	431a      	orrs	r2, r3
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	431a      	orrs	r2, r3
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003688:	f021 010c 	bic.w	r1, r1, #12
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003696:	430b      	orrs	r3, r1
 8003698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036aa:	6999      	ldr	r1, [r3, #24]
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	ea40 0301 	orr.w	r3, r0, r1
 80036b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b8f      	ldr	r3, [pc, #572]	@ (80038fc <UART_SetConfig+0x2cc>)
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d005      	beq.n	80036d0 <UART_SetConfig+0xa0>
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003900 <UART_SetConfig+0x2d0>)
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d104      	bne.n	80036da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7fe fe06 	bl	80022e0 <HAL_RCC_GetPCLK2Freq>
 80036d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036d8:	e003      	b.n	80036e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036da:	f7fe fded 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 80036de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ec:	f040 810c 	bne.w	8003908 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036f4:	2200      	movs	r2, #0
 80036f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003702:	4622      	mov	r2, r4
 8003704:	462b      	mov	r3, r5
 8003706:	1891      	adds	r1, r2, r2
 8003708:	65b9      	str	r1, [r7, #88]	@ 0x58
 800370a:	415b      	adcs	r3, r3
 800370c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800370e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003712:	4621      	mov	r1, r4
 8003714:	eb12 0801 	adds.w	r8, r2, r1
 8003718:	4629      	mov	r1, r5
 800371a:	eb43 0901 	adc.w	r9, r3, r1
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800372a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800372e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003732:	4690      	mov	r8, r2
 8003734:	4699      	mov	r9, r3
 8003736:	4623      	mov	r3, r4
 8003738:	eb18 0303 	adds.w	r3, r8, r3
 800373c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003740:	462b      	mov	r3, r5
 8003742:	eb49 0303 	adc.w	r3, r9, r3
 8003746:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003756:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800375a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800375e:	460b      	mov	r3, r1
 8003760:	18db      	adds	r3, r3, r3
 8003762:	653b      	str	r3, [r7, #80]	@ 0x50
 8003764:	4613      	mov	r3, r2
 8003766:	eb42 0303 	adc.w	r3, r2, r3
 800376a:	657b      	str	r3, [r7, #84]	@ 0x54
 800376c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003770:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003774:	f7fc fd84 	bl	8000280 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4b61      	ldr	r3, [pc, #388]	@ (8003904 <UART_SetConfig+0x2d4>)
 800377e:	fba3 2302 	umull	r2, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	011c      	lsls	r4, r3, #4
 8003786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003790:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003794:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003798:	4642      	mov	r2, r8
 800379a:	464b      	mov	r3, r9
 800379c:	1891      	adds	r1, r2, r2
 800379e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037a0:	415b      	adcs	r3, r3
 80037a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037a8:	4641      	mov	r1, r8
 80037aa:	eb12 0a01 	adds.w	sl, r2, r1
 80037ae:	4649      	mov	r1, r9
 80037b0:	eb43 0b01 	adc.w	fp, r3, r1
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037c8:	4692      	mov	sl, r2
 80037ca:	469b      	mov	fp, r3
 80037cc:	4643      	mov	r3, r8
 80037ce:	eb1a 0303 	adds.w	r3, sl, r3
 80037d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037d6:	464b      	mov	r3, r9
 80037d8:	eb4b 0303 	adc.w	r3, fp, r3
 80037dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037f4:	460b      	mov	r3, r1
 80037f6:	18db      	adds	r3, r3, r3
 80037f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80037fa:	4613      	mov	r3, r2
 80037fc:	eb42 0303 	adc.w	r3, r2, r3
 8003800:	647b      	str	r3, [r7, #68]	@ 0x44
 8003802:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003806:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800380a:	f7fc fd39 	bl	8000280 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4611      	mov	r1, r2
 8003814:	4b3b      	ldr	r3, [pc, #236]	@ (8003904 <UART_SetConfig+0x2d4>)
 8003816:	fba3 2301 	umull	r2, r3, r3, r1
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2264      	movs	r2, #100	@ 0x64
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	1acb      	subs	r3, r1, r3
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800382a:	4b36      	ldr	r3, [pc, #216]	@ (8003904 <UART_SetConfig+0x2d4>)
 800382c:	fba3 2302 	umull	r2, r3, r3, r2
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003838:	441c      	add	r4, r3
 800383a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800383e:	2200      	movs	r2, #0
 8003840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003844:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003848:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800384c:	4642      	mov	r2, r8
 800384e:	464b      	mov	r3, r9
 8003850:	1891      	adds	r1, r2, r2
 8003852:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003854:	415b      	adcs	r3, r3
 8003856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800385c:	4641      	mov	r1, r8
 800385e:	1851      	adds	r1, r2, r1
 8003860:	6339      	str	r1, [r7, #48]	@ 0x30
 8003862:	4649      	mov	r1, r9
 8003864:	414b      	adcs	r3, r1
 8003866:	637b      	str	r3, [r7, #52]	@ 0x34
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003874:	4659      	mov	r1, fp
 8003876:	00cb      	lsls	r3, r1, #3
 8003878:	4651      	mov	r1, sl
 800387a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387e:	4651      	mov	r1, sl
 8003880:	00ca      	lsls	r2, r1, #3
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	4603      	mov	r3, r0
 8003888:	4642      	mov	r2, r8
 800388a:	189b      	adds	r3, r3, r2
 800388c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003890:	464b      	mov	r3, r9
 8003892:	460a      	mov	r2, r1
 8003894:	eb42 0303 	adc.w	r3, r2, r3
 8003898:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038b0:	460b      	mov	r3, r1
 80038b2:	18db      	adds	r3, r3, r3
 80038b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038b6:	4613      	mov	r3, r2
 80038b8:	eb42 0303 	adc.w	r3, r2, r3
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038c6:	f7fc fcdb 	bl	8000280 <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003904 <UART_SetConfig+0x2d4>)
 80038d0:	fba3 1302 	umull	r1, r3, r3, r2
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	2164      	movs	r1, #100	@ 0x64
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	3332      	adds	r3, #50	@ 0x32
 80038e2:	4a08      	ldr	r2, [pc, #32]	@ (8003904 <UART_SetConfig+0x2d4>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	f003 0207 	and.w	r2, r3, #7
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4422      	add	r2, r4
 80038f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038f8:	e106      	b.n	8003b08 <UART_SetConfig+0x4d8>
 80038fa:	bf00      	nop
 80038fc:	40011000 	.word	0x40011000
 8003900:	40011400 	.word	0x40011400
 8003904:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800390c:	2200      	movs	r2, #0
 800390e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003912:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003916:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800391a:	4642      	mov	r2, r8
 800391c:	464b      	mov	r3, r9
 800391e:	1891      	adds	r1, r2, r2
 8003920:	6239      	str	r1, [r7, #32]
 8003922:	415b      	adcs	r3, r3
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
 8003926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800392a:	4641      	mov	r1, r8
 800392c:	1854      	adds	r4, r2, r1
 800392e:	4649      	mov	r1, r9
 8003930:	eb43 0501 	adc.w	r5, r3, r1
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	00eb      	lsls	r3, r5, #3
 800393e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003942:	00e2      	lsls	r2, r4, #3
 8003944:	4614      	mov	r4, r2
 8003946:	461d      	mov	r5, r3
 8003948:	4643      	mov	r3, r8
 800394a:	18e3      	adds	r3, r4, r3
 800394c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003950:	464b      	mov	r3, r9
 8003952:	eb45 0303 	adc.w	r3, r5, r3
 8003956:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003966:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003976:	4629      	mov	r1, r5
 8003978:	008b      	lsls	r3, r1, #2
 800397a:	4621      	mov	r1, r4
 800397c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003980:	4621      	mov	r1, r4
 8003982:	008a      	lsls	r2, r1, #2
 8003984:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003988:	f7fc fc7a 	bl	8000280 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4b60      	ldr	r3, [pc, #384]	@ (8003b14 <UART_SetConfig+0x4e4>)
 8003992:	fba3 2302 	umull	r2, r3, r3, r2
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	011c      	lsls	r4, r3, #4
 800399a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	61b9      	str	r1, [r7, #24]
 80039b4:	415b      	adcs	r3, r3
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039bc:	4641      	mov	r1, r8
 80039be:	1851      	adds	r1, r2, r1
 80039c0:	6139      	str	r1, [r7, #16]
 80039c2:	4649      	mov	r1, r9
 80039c4:	414b      	adcs	r3, r1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039d4:	4659      	mov	r1, fp
 80039d6:	00cb      	lsls	r3, r1, #3
 80039d8:	4651      	mov	r1, sl
 80039da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039de:	4651      	mov	r1, sl
 80039e0:	00ca      	lsls	r2, r1, #3
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	4642      	mov	r2, r8
 80039ea:	189b      	adds	r3, r3, r2
 80039ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039f0:	464b      	mov	r3, r9
 80039f2:	460a      	mov	r2, r1
 80039f4:	eb42 0303 	adc.w	r3, r2, r3
 80039f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a14:	4649      	mov	r1, r9
 8003a16:	008b      	lsls	r3, r1, #2
 8003a18:	4641      	mov	r1, r8
 8003a1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a1e:	4641      	mov	r1, r8
 8003a20:	008a      	lsls	r2, r1, #2
 8003a22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a26:	f7fc fc2b 	bl	8000280 <__aeabi_uldivmod>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4b38      	ldr	r3, [pc, #224]	@ (8003b14 <UART_SetConfig+0x4e4>)
 8003a32:	fba3 2301 	umull	r2, r3, r3, r1
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	2264      	movs	r2, #100	@ 0x64
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	1acb      	subs	r3, r1, r3
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	3332      	adds	r3, #50	@ 0x32
 8003a44:	4a33      	ldr	r2, [pc, #204]	@ (8003b14 <UART_SetConfig+0x4e4>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a50:	441c      	add	r4, r3
 8003a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a56:	2200      	movs	r2, #0
 8003a58:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a60:	4642      	mov	r2, r8
 8003a62:	464b      	mov	r3, r9
 8003a64:	1891      	adds	r1, r2, r2
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	415b      	adcs	r3, r3
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a70:	4641      	mov	r1, r8
 8003a72:	1851      	adds	r1, r2, r1
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	4649      	mov	r1, r9
 8003a78:	414b      	adcs	r3, r1
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a88:	4659      	mov	r1, fp
 8003a8a:	00cb      	lsls	r3, r1, #3
 8003a8c:	4651      	mov	r1, sl
 8003a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a92:	4651      	mov	r1, sl
 8003a94:	00ca      	lsls	r2, r1, #3
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	189b      	adds	r3, r3, r2
 8003aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	460a      	mov	r2, r1
 8003aa6:	eb42 0303 	adc.w	r3, r2, r3
 8003aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ab6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ac4:	4649      	mov	r1, r9
 8003ac6:	008b      	lsls	r3, r1, #2
 8003ac8:	4641      	mov	r1, r8
 8003aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ace:	4641      	mov	r1, r8
 8003ad0:	008a      	lsls	r2, r1, #2
 8003ad2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ad6:	f7fc fbd3 	bl	8000280 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <UART_SetConfig+0x4e4>)
 8003ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	2164      	movs	r1, #100	@ 0x64
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	3332      	adds	r3, #50	@ 0x32
 8003af2:	4a08      	ldr	r2, [pc, #32]	@ (8003b14 <UART_SetConfig+0x4e4>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	f003 020f 	and.w	r2, r3, #15
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4422      	add	r2, r4
 8003b06:	609a      	str	r2, [r3, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b14:	51eb851f 	.word	0x51eb851f

08003b18 <__NVIC_SetPriority>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	6039      	str	r1, [r7, #0]
 8003b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	db0a      	blt.n	8003b42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	490c      	ldr	r1, [pc, #48]	@ (8003b64 <__NVIC_SetPriority+0x4c>)
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	0112      	lsls	r2, r2, #4
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003b40:	e00a      	b.n	8003b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4908      	ldr	r1, [pc, #32]	@ (8003b68 <__NVIC_SetPriority+0x50>)
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	3b04      	subs	r3, #4
 8003b50:	0112      	lsls	r2, r2, #4
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	440b      	add	r3, r1
 8003b56:	761a      	strb	r2, [r3, #24]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000e100 	.word	0xe000e100
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b70:	2100      	movs	r1, #0
 8003b72:	f06f 0004 	mvn.w	r0, #4
 8003b76:	f7ff ffcf 	bl	8003b18 <__NVIC_SetPriority>
#endif
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b86:	f3ef 8305 	mrs	r3, IPSR
 8003b8a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b92:	f06f 0305 	mvn.w	r3, #5
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	e00c      	b.n	8003bb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <osKernelInitialize+0x44>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ba2:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <osKernelInitialize+0x44>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	e002      	b.n	8003bb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bb4:	687b      	ldr	r3, [r7, #4]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	200001d4 	.word	0x200001d4

08003bc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bce:	f3ef 8305 	mrs	r3, IPSR
 8003bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8003bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bda:	f06f 0305 	mvn.w	r3, #5
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	e010      	b.n	8003c04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003be2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <osKernelStart+0x48>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d109      	bne.n	8003bfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bea:	f7ff ffbf 	bl	8003b6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <osKernelStart+0x48>)
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003bf4:	f001 fe16 	bl	8005824 <vTaskStartScheduler>
      stat = osOK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	e002      	b.n	8003c04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c04:	687b      	ldr	r3, [r7, #4]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	200001d4 	.word	0x200001d4

08003c14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08e      	sub	sp, #56	@ 0x38
 8003c18:	af04      	add	r7, sp, #16
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c24:	f3ef 8305 	mrs	r3, IPSR
 8003c28:	617b      	str	r3, [r7, #20]
  return(result);
 8003c2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d17e      	bne.n	8003d2e <osThreadNew+0x11a>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d07b      	beq.n	8003d2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c36:	2380      	movs	r3, #128	@ 0x80
 8003c38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c3a:	2318      	movs	r3, #24
 8003c3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d045      	beq.n	8003cda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <osThreadNew+0x48>
        name = attr->name;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <osThreadNew+0x6e>
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b38      	cmp	r3, #56	@ 0x38
 8003c74:	d805      	bhi.n	8003c82 <osThreadNew+0x6e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <osThreadNew+0x72>
        return (NULL);
 8003c82:	2300      	movs	r3, #0
 8003c84:	e054      	b.n	8003d30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00e      	beq.n	8003cbc <osThreadNew+0xa8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b5b      	cmp	r3, #91	@ 0x5b
 8003ca4:	d90a      	bls.n	8003cbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <osThreadNew+0xa8>
        mem = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	e010      	b.n	8003cde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10c      	bne.n	8003cde <osThreadNew+0xca>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d108      	bne.n	8003cde <osThreadNew+0xca>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <osThreadNew+0xca>
          mem = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e001      	b.n	8003cde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d110      	bne.n	8003d06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cec:	9202      	str	r2, [sp, #8]
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	6a3a      	ldr	r2, [r7, #32]
 8003cf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f001 fbb6 	bl	800546c <xTaskCreateStatic>
 8003d00:	4603      	mov	r3, r0
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	e013      	b.n	8003d2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d110      	bne.n	8003d2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	f107 0310 	add.w	r3, r7, #16
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f001 fc04 	bl	800552c <xTaskCreate>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <osThreadNew+0x11a>
            hTask = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d2e:	693b      	ldr	r3, [r7, #16]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3728      	adds	r7, #40	@ 0x28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d40:	f3ef 8305 	mrs	r3, IPSR
 8003d44:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <osDelay+0x1c>
    stat = osErrorISR;
 8003d4c:	f06f 0305 	mvn.w	r3, #5
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e007      	b.n	8003d64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f001 fd2a 	bl	80057b8 <vTaskDelay>
    }
  }

  return (stat);
 8003d64:	68fb      	ldr	r3, [r7, #12]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d7a:	f3ef 8305 	mrs	r3, IPSR
 8003d7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d80:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d12d      	bne.n	8003de2 <osEventFlagsNew+0x74>
    mem = -1;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d8a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d015      	beq.n	8003dbe <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <osEventFlagsNew+0x3a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b1f      	cmp	r3, #31
 8003da0:	d902      	bls.n	8003da8 <osEventFlagsNew+0x3a>
        mem = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	e00c      	b.n	8003dc2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d108      	bne.n	8003dc2 <osEventFlagsNew+0x54>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <osEventFlagsNew+0x54>
          mem = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e001      	b.n	8003dc2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d106      	bne.n	8003dd6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fa9f 	bl	8004310 <xEventGroupCreateStatic>
 8003dd2:	6178      	str	r0, [r7, #20]
 8003dd4:	e005      	b.n	8003de2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8003ddc:	f000 fad1 	bl	8004382 <xEventGroupCreate>
 8003de0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003de2:	697b      	ldr	r3, [r7, #20]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <osEventFlagsSet+0x1c>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e06:	d303      	bcc.n	8003e10 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8003e08:	f06f 0303 	mvn.w	r3, #3
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	e028      	b.n	8003e62 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e10:	f3ef 8305 	mrs	r3, IPSR
 8003e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e16:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01d      	beq.n	8003e58 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8003e20:	f107 0308 	add.w	r3, r7, #8
 8003e24:	461a      	mov	r2, r3
 8003e26:	6839      	ldr	r1, [r7, #0]
 8003e28:	6938      	ldr	r0, [r7, #16]
 8003e2a:	f000 fc53 	bl	80046d4 <xEventGroupSetBitsFromISR>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8003e34:	f06f 0302 	mvn.w	r3, #2
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	e012      	b.n	8003e62 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <osEventFlagsSet+0x76>
 8003e46:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <osEventFlagsSet+0x80>)
 8003e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	e004      	b.n	8003e62 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	6938      	ldr	r0, [r7, #16]
 8003e5c:	f000 fb7e 	bl	800455c <xEventGroupSetBits>
 8003e60:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8003e62:	697b      	ldr	r3, [r7, #20]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	@ 0x30
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <osEventFlagsWait+0x20>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e8e:	d303      	bcc.n	8003e98 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8003e90:	f06f 0303 	mvn.w	r3, #3
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	e04b      	b.n	8003f30 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e98:	f3ef 8305 	mrs	r3, IPSR
 8003e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e9e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8003ea4:	f06f 0305 	mvn.w	r3, #5
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e041      	b.n	8003f30 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eba:	e001      	b.n	8003ec0 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	e001      	b.n	8003ed4 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	6a3a      	ldr	r2, [r7, #32]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	69b8      	ldr	r0, [r7, #24]
 8003ee0:	f000 fa6a 	bl	80043b8 <xEventGroupWaitBits>
 8003ee4:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d010      	beq.n	8003f12 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d019      	beq.n	8003f30 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8003f02:	f06f 0301 	mvn.w	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	e012      	b.n	8003f30 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003f0a:	f06f 0302 	mvn.w	r3, #2
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	e00e      	b.n	8003f30 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8003f22:	f06f 0301 	mvn.w	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e002      	b.n	8003f30 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003f2a:	f06f 0302 	mvn.w	r3, #2
 8003f2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8003f30:	69fb      	ldr	r3, [r7, #28]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3728      	adds	r7, #40	@ 0x28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b088      	sub	sp, #32
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f46:	f3ef 8305 	mrs	r3, IPSR
 8003f4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f4c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d174      	bne.n	800403c <osMutexNew+0x102>
    if (attr != NULL) {
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e001      	b.n	8003f64 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <osMutexNew+0x3a>
      rmtx = 1U;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	e001      	b.n	8003f78 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d15c      	bne.n	800403c <osMutexNew+0x102>
      mem = -1;
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f86:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d015      	beq.n	8003fba <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d006      	beq.n	8003fa4 <osMutexNew+0x6a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003f9c:	d902      	bls.n	8003fa4 <osMutexNew+0x6a>
          mem = 1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e00c      	b.n	8003fbe <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d108      	bne.n	8003fbe <osMutexNew+0x84>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d104      	bne.n	8003fbe <osMutexNew+0x84>
            mem = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	e001      	b.n	8003fbe <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d112      	bne.n	8003fea <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	2004      	movs	r0, #4
 8003fd2:	f000 fdbe 	bl	8004b52 <xQueueCreateMutexStatic>
 8003fd6:	61f8      	str	r0, [r7, #28]
 8003fd8:	e016      	b.n	8004008 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	f000 fdb6 	bl	8004b52 <xQueueCreateMutexStatic>
 8003fe6:	61f8      	str	r0, [r7, #28]
 8003fe8:	e00e      	b.n	8004008 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003ff6:	2004      	movs	r0, #4
 8003ff8:	f000 fd93 	bl	8004b22 <xQueueCreateMutex>
 8003ffc:	61f8      	str	r0, [r7, #28]
 8003ffe:	e003      	b.n	8004008 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004000:	2001      	movs	r0, #1
 8004002:	f000 fd8e 	bl	8004b22 <xQueueCreateMutex>
 8004006:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <osMutexNew+0xee>
        if (attr != NULL) {
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <osMutexNew+0xe2>
          name = attr->name;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	e001      	b.n	8004020 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004020:	68f9      	ldr	r1, [r7, #12]
 8004022:	69f8      	ldr	r0, [r7, #28]
 8004024:	f001 f9c4 	bl	80053b0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <osMutexNew+0x102>
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800403c:	69fb      	ldr	r3, [r7, #28]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004046:	b580      	push	{r7, lr}
 8004048:	b08a      	sub	sp, #40	@ 0x28
 800404a:	af02      	add	r7, sp, #8
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004056:	f3ef 8305 	mrs	r3, IPSR
 800405a:	613b      	str	r3, [r7, #16]
  return(result);
 800405c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800405e:	2b00      	cmp	r3, #0
 8004060:	d15f      	bne.n	8004122 <osMessageQueueNew+0xdc>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d05c      	beq.n	8004122 <osMessageQueueNew+0xdc>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d059      	beq.n	8004122 <osMessageQueueNew+0xdc>
    mem = -1;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004072:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d029      	beq.n	80040ce <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d012      	beq.n	80040a8 <osMessageQueueNew+0x62>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b4f      	cmp	r3, #79	@ 0x4f
 8004088:	d90e      	bls.n	80040a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <osMessageQueueNew+0x62>
        mem = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e014      	b.n	80040d2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d110      	bne.n	80040d2 <osMessageQueueNew+0x8c>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10c      	bne.n	80040d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d108      	bne.n	80040d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <osMessageQueueNew+0x8c>
          mem = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e001      	b.n	80040d2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d10b      	bne.n	80040f0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2100      	movs	r1, #0
 80040e2:	9100      	str	r1, [sp, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fc26 	bl	8004938 <xQueueGenericCreateStatic>
 80040ec:	61f8      	str	r0, [r7, #28]
 80040ee:	e008      	b.n	8004102 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80040f6:	2200      	movs	r2, #0
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fc99 	bl	8004a32 <xQueueGenericCreate>
 8004100:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <osMessageQueueNew+0xd0>
        name = attr->name;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	e001      	b.n	800411a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800411a:	6979      	ldr	r1, [r7, #20]
 800411c:	69f8      	ldr	r0, [r7, #28]
 800411e:	f001 f947 	bl	80053b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004122:	69fb      	ldr	r3, [r7, #28]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004144:	f3ef 8305 	mrs	r3, IPSR
 8004148:	617b      	str	r3, [r7, #20]
  return(result);
 800414a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800414c:	2b00      	cmp	r3, #0
 800414e:	d028      	beq.n	80041a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <osMessageQueuePut+0x36>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <osMessageQueuePut+0x36>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004162:	f06f 0303 	mvn.w	r3, #3
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e038      	b.n	80041dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800416e:	f107 0210 	add.w	r2, r7, #16
 8004172:	2300      	movs	r3, #0
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	69b8      	ldr	r0, [r7, #24]
 8004178:	f000 fe08 	bl	8004d8c <xQueueGenericSendFromISR>
 800417c:	4603      	mov	r3, r0
 800417e:	2b01      	cmp	r3, #1
 8004180:	d003      	beq.n	800418a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004182:	f06f 0302 	mvn.w	r3, #2
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	e028      	b.n	80041dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d025      	beq.n	80041dc <osMessageQueuePut+0xb0>
 8004190:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <osMessageQueuePut+0xbc>)
 8004192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	e01c      	b.n	80041dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <osMessageQueuePut+0x82>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80041ae:	f06f 0303 	mvn.w	r3, #3
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	e012      	b.n	80041dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80041b6:	2300      	movs	r3, #0
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	69b8      	ldr	r0, [r7, #24]
 80041be:	f000 fce3 	bl	8004b88 <xQueueGenericSend>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d009      	beq.n	80041dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80041ce:	f06f 0301 	mvn.w	r3, #1
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	e002      	b.n	80041dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80041d6:	f06f 0302 	mvn.w	r3, #2
 80041da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80041dc:	69fb      	ldr	r3, [r7, #28]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004202:	f3ef 8305 	mrs	r3, IPSR
 8004206:	617b      	str	r3, [r7, #20]
  return(result);
 8004208:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800420a:	2b00      	cmp	r3, #0
 800420c:	d028      	beq.n	8004260 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <osMessageQueueGet+0x34>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <osMessageQueueGet+0x34>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004220:	f06f 0303 	mvn.w	r3, #3
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	e037      	b.n	8004298 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800422c:	f107 0310 	add.w	r3, r7, #16
 8004230:	461a      	mov	r2, r3
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	69b8      	ldr	r0, [r7, #24]
 8004236:	f000 ff29 	bl	800508c <xQueueReceiveFromISR>
 800423a:	4603      	mov	r3, r0
 800423c:	2b01      	cmp	r3, #1
 800423e:	d003      	beq.n	8004248 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004240:	f06f 0302 	mvn.w	r3, #2
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	e027      	b.n	8004298 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d024      	beq.n	8004298 <osMessageQueueGet+0xac>
 800424e:	4b15      	ldr	r3, [pc, #84]	@ (80042a4 <osMessageQueueGet+0xb8>)
 8004250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	e01b      	b.n	8004298 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <osMessageQueueGet+0x80>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d103      	bne.n	8004274 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800426c:	f06f 0303 	mvn.w	r3, #3
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	e011      	b.n	8004298 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	69b8      	ldr	r0, [r7, #24]
 800427a:	f000 fe25 	bl	8004ec8 <xQueueReceive>
 800427e:	4603      	mov	r3, r0
 8004280:	2b01      	cmp	r3, #1
 8004282:	d009      	beq.n	8004298 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800428a:	f06f 0301 	mvn.w	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	e002      	b.n	8004298 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004292:	f06f 0302 	mvn.w	r3, #2
 8004296:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004298:	69fb      	ldr	r3, [r7, #28]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	e000ed04 	.word	0xe000ed04

080042a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a07      	ldr	r2, [pc, #28]	@ (80042d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80042b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4a06      	ldr	r2, [pc, #24]	@ (80042d8 <vApplicationGetIdleTaskMemory+0x30>)
 80042be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2280      	movs	r2, #128	@ 0x80
 80042c4:	601a      	str	r2, [r3, #0]
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	200001d8 	.word	0x200001d8
 80042d8:	20000234 	.word	0x20000234

080042dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a07      	ldr	r2, [pc, #28]	@ (8004308 <vApplicationGetTimerTaskMemory+0x2c>)
 80042ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4a06      	ldr	r2, [pc, #24]	@ (800430c <vApplicationGetTimerTaskMemory+0x30>)
 80042f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042fa:	601a      	str	r2, [r3, #0]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	20000434 	.word	0x20000434
 800430c:	20000490 	.word	0x20000490

08004310 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	e7fd      	b.n	8004332 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004336:	2320      	movs	r3, #32
 8004338:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b20      	cmp	r3, #32
 800433e:	d00b      	beq.n	8004358 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	60fb      	str	r3, [r7, #12]
}
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	e7fd      	b.n	8004354 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	3304      	adds	r3, #4
 800436c:	4618      	mov	r0, r3
 800436e:	f000 f9c5 	bl	80046fc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2201      	movs	r2, #1
 8004376:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004378:	697b      	ldr	r3, [r7, #20]
	}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004388:	2020      	movs	r0, #32
 800438a:	f002 fdff 	bl	8006f8c <pvPortMalloc>
 800438e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f9ab 	bl	80046fc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80043ac:	687b      	ldr	r3, [r7, #4]
	}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b090      	sub	sp, #64	@ 0x40
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <xEventGroupWaitBits+0x38>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	623b      	str	r3, [r7, #32]
}
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
 80043ee:	e7fd      	b.n	80043ec <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043f6:	d30b      	bcc.n	8004410 <xEventGroupWaitBits+0x58>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	61fb      	str	r3, [r7, #28]
}
 800440a:	bf00      	nop
 800440c:	bf00      	nop
 800440e:	e7fd      	b.n	800440c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <xEventGroupWaitBits+0x76>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	61bb      	str	r3, [r7, #24]
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	e7fd      	b.n	800442a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800442e:	f001 fee9 	bl	8006204 <xTaskGetSchedulerState>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <xEventGroupWaitBits+0x86>
 8004438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <xEventGroupWaitBits+0x8a>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <xEventGroupWaitBits+0x8c>
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	617b      	str	r3, [r7, #20]
}
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004460:	f001 fa48 	bl	80058f4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004470:	f000 f90d 	bl	800468e <prvTestWaitCondition>
 8004474:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00e      	beq.n	800449a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800447c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004480:	2300      	movs	r3, #0
 8004482:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d028      	beq.n	80044dc <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800448a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	43db      	mvns	r3, r3
 8004492:	401a      	ands	r2, r3
 8004494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e020      	b.n	80044dc <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800449a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80044a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80044a4:	2301      	movs	r3, #1
 80044a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80044a8:	e018      	b.n	80044dc <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80044b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044b6:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80044be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044c4:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80044c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c8:	1d18      	adds	r0, r3, #4
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ce:	4313      	orrs	r3, r2
 80044d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d2:	4619      	mov	r1, r3
 80044d4:	f001 fc08 	bl	8005ce8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80044dc:	f001 fa18 	bl	8005910 <xTaskResumeAll>
 80044e0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80044e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d031      	beq.n	800454c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80044ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004558 <xEventGroupWaitBits+0x1a0>)
 80044f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80044fe:	f001 ff0f 	bl	8006320 <uxTaskResetEventItemValue>
 8004502:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11a      	bne.n	8004544 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800450e:	f002 fc1b 	bl	8006d48 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800451e:	f000 f8b6 	bl	800468e <prvTestWaitCondition>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d009      	beq.n	800453c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800452e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	43db      	mvns	r3, r3
 8004536:	401a      	ands	r2, r3
 8004538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800453c:	2301      	movs	r3, #1
 800453e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8004540:	f002 fc34 	bl	8006dac <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004546:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800454a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800454c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800454e:	4618      	mov	r0, r3
 8004550:	3740      	adds	r7, #64	@ 0x40
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08e      	sub	sp, #56	@ 0x38
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004566:	2300      	movs	r3, #0
 8004568:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800456e:	2300      	movs	r3, #0
 8004570:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <xEventGroupSetBits+0x34>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	613b      	str	r3, [r7, #16]
}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	e7fd      	b.n	800458c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004596:	d30b      	bcc.n	80045b0 <xEventGroupSetBits+0x54>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	60fb      	str	r3, [r7, #12]
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80045b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b2:	3304      	adds	r3, #4
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	3308      	adds	r3, #8
 80045ba:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80045bc:	f001 f99a 	bl	80058f4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80045d2:	e03c      	b.n	800464e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80045d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80045da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80045ea:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045f2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d108      	bne.n	8004610 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800460a:	2301      	movs	r3, #1
 800460c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800460e:	e008      	b.n	8004622 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	429a      	cmp	r2, r3
 800461c:	d101      	bne.n	8004622 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800461e:	2301      	movs	r3, #1
 8004620:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d010      	beq.n	800464a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800463a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004642:	4619      	mov	r1, r3
 8004644:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004646:	f001 fc1d 	bl	8005e84 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800464e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	429a      	cmp	r2, r3
 8004654:	d1be      	bne.n	80045d4 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465c:	43db      	mvns	r3, r3
 800465e:	401a      	ands	r2, r3
 8004660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004662:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004664:	f001 f954 	bl	8005910 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3738      	adds	r7, #56	@ 0x38
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800467e:	6839      	ldr	r1, [r7, #0]
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff6b 	bl	800455c <xEventGroupSetBits>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800468e:	b480      	push	{r7}
 8004690:	b087      	sub	sp, #28
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d107      	bne.n	80046b4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80046ae:	2301      	movs	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e007      	b.n	80046c4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4013      	ands	r3, r2
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d101      	bne.n	80046c4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80046c4:	697b      	ldr	r3, [r7, #20]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	4804      	ldr	r0, [pc, #16]	@ (80046f8 <xEventGroupSetBitsFromISR+0x24>)
 80046e8:	f002 f9e0 	bl	8006aac <xTimerPendFunctionCallFromISR>
 80046ec:	6178      	str	r0, [r7, #20]

		return xReturn;
 80046ee:	697b      	ldr	r3, [r7, #20]
	}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	08004675 	.word	0x08004675

080046fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f103 0208 	add.w	r2, r3, #8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004714:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f103 0208 	add.w	r2, r3, #8
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f103 0208 	add.w	r2, r3, #8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
}
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047b4:	d103      	bne.n	80047be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e00c      	b.n	80047d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3308      	adds	r3, #8
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e002      	b.n	80047cc <vListInsert+0x2e>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d2f6      	bcs.n	80047c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	601a      	str	r2, [r3, #0]
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6892      	ldr	r2, [r2, #8]
 8004826:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6852      	ldr	r2, [r2, #4]
 8004830:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	429a      	cmp	r2, r3
 800483a:	d103      	bne.n	8004844 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	1e5a      	subs	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10b      	bne.n	8004890 <xQueueGenericReset+0x2c>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	60bb      	str	r3, [r7, #8]
}
 800488a:	bf00      	nop
 800488c:	bf00      	nop
 800488e:	e7fd      	b.n	800488c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004890:	f002 fa5a 	bl	8006d48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489c:	68f9      	ldr	r1, [r7, #12]
 800489e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	441a      	add	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c0:	3b01      	subs	r3, #1
 80048c2:	68f9      	ldr	r1, [r7, #12]
 80048c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	441a      	add	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	22ff      	movs	r2, #255	@ 0xff
 80048d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	22ff      	movs	r2, #255	@ 0xff
 80048dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d114      	bne.n	8004910 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01a      	beq.n	8004924 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3310      	adds	r3, #16
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 fa62 	bl	8005dbc <xTaskRemoveFromEventList>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d012      	beq.n	8004924 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004934 <xQueueGenericReset+0xd0>)
 8004900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	e009      	b.n	8004924 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3310      	adds	r3, #16
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fef1 	bl	80046fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3324      	adds	r3, #36	@ 0x24
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff feec 	bl	80046fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004924:	f002 fa42 	bl	8006dac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004928:	2301      	movs	r3, #1
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08e      	sub	sp, #56	@ 0x38
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	e7fd      	b.n	8004960 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	e7fd      	b.n	800497e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <xQueueGenericCreateStatic+0x56>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <xQueueGenericCreateStatic+0x5a>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <xQueueGenericCreateStatic+0x5c>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	623b      	str	r3, [r7, #32]
}
 80049aa:	bf00      	nop
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <xQueueGenericCreateStatic+0x84>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <xQueueGenericCreateStatic+0x88>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <xQueueGenericCreateStatic+0x8a>
 80049c0:	2300      	movs	r3, #0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10b      	bne.n	80049de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	61fb      	str	r3, [r7, #28]
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049de:	2350      	movs	r3, #80	@ 0x50
 80049e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b50      	cmp	r3, #80	@ 0x50
 80049e6:	d00b      	beq.n	8004a00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	61bb      	str	r3, [r7, #24]
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	e7fd      	b.n	80049fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00d      	beq.n	8004a28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f840 	bl	8004aa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3730      	adds	r7, #48	@ 0x30
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b08a      	sub	sp, #40	@ 0x28
 8004a36:	af02      	add	r7, sp, #8
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10b      	bne.n	8004a5e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	613b      	str	r3, [r7, #16]
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	e7fd      	b.n	8004a5a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	3350      	adds	r3, #80	@ 0x50
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f002 fa8d 	bl	8006f8c <pvPortMalloc>
 8004a72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d011      	beq.n	8004a9e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	3350      	adds	r3, #80	@ 0x50
 8004a82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a8c:	79fa      	ldrb	r2, [r7, #7]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	4613      	mov	r3, r2
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f805 	bl	8004aa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
	}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d103      	bne.n	8004ac4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e002      	b.n	8004aca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	69b8      	ldr	r0, [r7, #24]
 8004ada:	f7ff fec3 	bl	8004864 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	78fa      	ldrb	r2, [r7, #3]
 8004ae2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00e      	beq.n	8004b1a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2200      	movs	r2, #0
 8004b12:	2100      	movs	r1, #0
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f837 	bl	8004b88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	4603      	mov	r3, r0
 8004b2a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	461a      	mov	r2, r3
 8004b38:	6939      	ldr	r1, [r7, #16]
 8004b3a:	6978      	ldr	r0, [r7, #20]
 8004b3c:	f7ff ff79 	bl	8004a32 <xQueueGenericCreate>
 8004b40:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff ffd3 	bl	8004aee <prvInitialiseMutex>

		return xNewQueue;
 8004b48:	68fb      	ldr	r3, [r7, #12]
	}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b088      	sub	sp, #32
 8004b56:	af02      	add	r7, sp, #8
 8004b58:	4603      	mov	r3, r0
 8004b5a:	6039      	str	r1, [r7, #0]
 8004b5c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	6939      	ldr	r1, [r7, #16]
 8004b70:	6978      	ldr	r0, [r7, #20]
 8004b72:	f7ff fee1 	bl	8004938 <xQueueGenericCreateStatic>
 8004b76:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff ffb8 	bl	8004aee <prvInitialiseMutex>

		return xNewQueue;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
	}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08e      	sub	sp, #56	@ 0x38
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b96:	2300      	movs	r3, #0
 8004b98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <xQueueGenericSend+0x34>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <xQueueGenericSend+0x42>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <xQueueGenericSend+0x46>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <xQueueGenericSend+0x48>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <xQueueGenericSend+0x64>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d103      	bne.n	8004bfa <xQueueGenericSend+0x72>
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <xQueueGenericSend+0x76>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <xQueueGenericSend+0x78>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <xQueueGenericSend+0x94>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	623b      	str	r3, [r7, #32]
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c1c:	f001 faf2 	bl	8006204 <xTaskGetSchedulerState>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d102      	bne.n	8004c2c <xQueueGenericSend+0xa4>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <xQueueGenericSend+0xa8>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <xQueueGenericSend+0xaa>
 8004c30:	2300      	movs	r3, #0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <xQueueGenericSend+0xc6>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	61fb      	str	r3, [r7, #28]
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c4e:	f002 f87b 	bl	8006d48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <xQueueGenericSend+0xdc>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d129      	bne.n	8004cb8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c6a:	f000 fa91 	bl	8005190 <prvCopyDataToQueue>
 8004c6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d010      	beq.n	8004c9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7a:	3324      	adds	r3, #36	@ 0x24
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 f89d 	bl	8005dbc <xTaskRemoveFromEventList>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d013      	beq.n	8004cb0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c88:	4b3f      	ldr	r3, [pc, #252]	@ (8004d88 <xQueueGenericSend+0x200>)
 8004c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	e00a      	b.n	8004cb0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ca0:	4b39      	ldr	r3, [pc, #228]	@ (8004d88 <xQueueGenericSend+0x200>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cb0:	f002 f87c 	bl	8006dac <vPortExitCritical>
				return pdPASS;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e063      	b.n	8004d80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cbe:	f002 f875 	bl	8006dac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e05c      	b.n	8004d80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f001 f93b 	bl	8005f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cda:	f002 f867 	bl	8006dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cde:	f000 fe09 	bl	80058f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ce2:	f002 f831 	bl	8006d48 <vPortEnterCritical>
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cec:	b25b      	sxtb	r3, r3
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cf2:	d103      	bne.n	8004cfc <xQueueGenericSend+0x174>
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d02:	b25b      	sxtb	r3, r3
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d08:	d103      	bne.n	8004d12 <xQueueGenericSend+0x18a>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d12:	f002 f84b 	bl	8006dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d16:	1d3a      	adds	r2, r7, #4
 8004d18:	f107 0314 	add.w	r3, r7, #20
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f001 f92a 	bl	8005f78 <xTaskCheckForTimeOut>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d124      	bne.n	8004d74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d2c:	f000 fb28 	bl	8005380 <prvIsQueueFull>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d018      	beq.n	8004d68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	3310      	adds	r3, #16
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 ffac 	bl	8005c9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d46:	f000 fab3 	bl	80052b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d4a:	f000 fde1 	bl	8005910 <xTaskResumeAll>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f47f af7c 	bne.w	8004c4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d56:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <xQueueGenericSend+0x200>)
 8004d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	e772      	b.n	8004c4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d6a:	f000 faa1 	bl	80052b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d6e:	f000 fdcf 	bl	8005910 <xTaskResumeAll>
 8004d72:	e76c      	b.n	8004c4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d76:	f000 fa9b 	bl	80052b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d7a:	f000 fdc9 	bl	8005910 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3738      	adds	r7, #56	@ 0x38
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b090      	sub	sp, #64	@ 0x40
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10b      	bne.n	8004dbc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <xQueueGenericSendFromISR+0x3e>
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <xQueueGenericSendFromISR+0x42>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <xQueueGenericSendFromISR+0x44>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d103      	bne.n	8004dfa <xQueueGenericSendFromISR+0x6e>
 8004df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <xQueueGenericSendFromISR+0x72>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <xQueueGenericSendFromISR+0x74>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	623b      	str	r3, [r7, #32]
}
 8004e16:	bf00      	nop
 8004e18:	bf00      	nop
 8004e1a:	e7fd      	b.n	8004e18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e1c:	f002 f874 	bl	8006f08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e20:	f3ef 8211 	mrs	r2, BASEPRI
 8004e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	61fa      	str	r2, [r7, #28]
 8004e36:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d302      	bcc.n	8004e4e <xQueueGenericSendFromISR+0xc2>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d12f      	bne.n	8004eae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e64:	f000 f994 	bl	8005190 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e70:	d112      	bne.n	8004e98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	3324      	adds	r3, #36	@ 0x24
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 ff9c 	bl	8005dbc <xTaskRemoveFromEventList>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00e      	beq.n	8004ea8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e007      	b.n	8004ea8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	b25a      	sxtb	r2, r3
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004eac:	e001      	b.n	8004eb2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ebc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3740      	adds	r7, #64	@ 0x40
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08c      	sub	sp, #48	@ 0x30
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <xQueueReceive+0x32>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	623b      	str	r3, [r7, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	e7fd      	b.n	8004ef6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <xQueueReceive+0x40>
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <xQueueReceive+0x44>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <xQueueReceive+0x46>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10b      	bne.n	8004f2a <xQueueReceive+0x62>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	61fb      	str	r3, [r7, #28]
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	e7fd      	b.n	8004f26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f2a:	f001 f96b 	bl	8006204 <xTaskGetSchedulerState>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <xQueueReceive+0x72>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <xQueueReceive+0x76>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <xQueueReceive+0x78>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <xQueueReceive+0x94>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	61bb      	str	r3, [r7, #24]
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f5c:	f001 fef4 	bl	8006d48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01f      	beq.n	8004fac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f70:	f000 f978 	bl	8005264 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	1e5a      	subs	r2, r3, #1
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00f      	beq.n	8004fa4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	3310      	adds	r3, #16
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 ff17 	bl	8005dbc <xTaskRemoveFromEventList>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f94:	4b3c      	ldr	r3, [pc, #240]	@ (8005088 <xQueueReceive+0x1c0>)
 8004f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fa4:	f001 ff02 	bl	8006dac <vPortExitCritical>
				return pdPASS;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e069      	b.n	8005080 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fb2:	f001 fefb 	bl	8006dac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e062      	b.n	8005080 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fc0:	f107 0310 	add.w	r3, r7, #16
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 ffc1 	bl	8005f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fce:	f001 feed 	bl	8006dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fd2:	f000 fc8f 	bl	80058f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fd6:	f001 feb7 	bl	8006d48 <vPortEnterCritical>
 8004fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fe0:	b25b      	sxtb	r3, r3
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe6:	d103      	bne.n	8004ff0 <xQueueReceive+0x128>
 8004fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ff6:	b25b      	sxtb	r3, r3
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ffc:	d103      	bne.n	8005006 <xQueueReceive+0x13e>
 8004ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005006:	f001 fed1 	bl	8006dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800500a:	1d3a      	adds	r2, r7, #4
 800500c:	f107 0310 	add.w	r3, r7, #16
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f000 ffb0 	bl	8005f78 <xTaskCheckForTimeOut>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d123      	bne.n	8005066 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800501e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005020:	f000 f998 	bl	8005354 <prvIsQueueEmpty>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d017      	beq.n	800505a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800502a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502c:	3324      	adds	r3, #36	@ 0x24
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4611      	mov	r1, r2
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fe32 	bl	8005c9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800503a:	f000 f939 	bl	80052b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800503e:	f000 fc67 	bl	8005910 <xTaskResumeAll>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d189      	bne.n	8004f5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005048:	4b0f      	ldr	r3, [pc, #60]	@ (8005088 <xQueueReceive+0x1c0>)
 800504a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	e780      	b.n	8004f5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800505a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800505c:	f000 f928 	bl	80052b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005060:	f000 fc56 	bl	8005910 <xTaskResumeAll>
 8005064:	e77a      	b.n	8004f5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005068:	f000 f922 	bl	80052b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800506c:	f000 fc50 	bl	8005910 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005070:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005072:	f000 f96f 	bl	8005354 <prvIsQueueEmpty>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	f43f af6f 	beq.w	8004f5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800507e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005080:	4618      	mov	r0, r3
 8005082:	3730      	adds	r7, #48	@ 0x30
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08e      	sub	sp, #56	@ 0x38
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	623b      	str	r3, [r7, #32]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <xQueueReceiveFromISR+0x3c>
 80050c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <xQueueReceiveFromISR+0x40>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <xQueueReceiveFromISR+0x42>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	61fb      	str	r3, [r7, #28]
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	e7fd      	b.n	80050e6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050ea:	f001 ff0d 	bl	8006f08 <vPortValidateInterruptPriority>
	__asm volatile
 80050ee:	f3ef 8211 	mrs	r2, BASEPRI
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	61ba      	str	r2, [r7, #24]
 8005104:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005106:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005108:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02f      	beq.n	8005176 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800511c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005124:	f000 f89e 	bl	8005264 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	1e5a      	subs	r2, r3, #1
 800512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005130:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005138:	d112      	bne.n	8005160 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d016      	beq.n	8005170 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	3310      	adds	r3, #16
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fe38 	bl	8005dbc <xTaskRemoveFromEventList>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00e      	beq.n	8005170 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00b      	beq.n	8005170 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e007      	b.n	8005170 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005164:	3301      	adds	r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	b25a      	sxtb	r2, r3
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005170:	2301      	movs	r3, #1
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
 8005174:	e001      	b.n	800517a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005176:	2300      	movs	r3, #0
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
 800517a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f383 8811 	msr	BASEPRI, r3
}
 8005184:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005188:	4618      	mov	r0, r3
 800518a:	3738      	adds	r7, #56	@ 0x38
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d14d      	bne.n	8005252 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f001 f840 	bl	8006240 <xTaskPriorityDisinherit>
 80051c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	609a      	str	r2, [r3, #8]
 80051c8:	e043      	b.n	8005252 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d119      	bne.n	8005204 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6858      	ldr	r0, [r3, #4]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	461a      	mov	r2, r3
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	f002 f9b2 	bl	8007544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	441a      	add	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d32b      	bcc.n	8005252 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	e026      	b.n	8005252 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68d8      	ldr	r0, [r3, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	461a      	mov	r2, r3
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	f002 f998 	bl	8007544 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	425b      	negs	r3, r3
 800521e:	441a      	add	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d207      	bcs.n	8005240 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005238:	425b      	negs	r3, r3
 800523a:	441a      	add	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d105      	bne.n	8005252 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	3b01      	subs	r3, #1
 8005250:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800525a:	697b      	ldr	r3, [r7, #20]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d018      	beq.n	80052a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	441a      	add	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	d303      	bcc.n	8005298 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68d9      	ldr	r1, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a0:	461a      	mov	r2, r3
 80052a2:	6838      	ldr	r0, [r7, #0]
 80052a4:	f002 f94e 	bl	8007544 <memcpy>
	}
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052b8:	f001 fd46 	bl	8006d48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052c4:	e011      	b.n	80052ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d012      	beq.n	80052f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3324      	adds	r3, #36	@ 0x24
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fd72 	bl	8005dbc <xTaskRemoveFromEventList>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052de:	f000 feaf 	bl	8006040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	dce9      	bgt.n	80052c6 <prvUnlockQueue+0x16>
 80052f2:	e000      	b.n	80052f6 <prvUnlockQueue+0x46>
					break;
 80052f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	22ff      	movs	r2, #255	@ 0xff
 80052fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80052fe:	f001 fd55 	bl	8006dac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005302:	f001 fd21 	bl	8006d48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800530c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800530e:	e011      	b.n	8005334 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3310      	adds	r3, #16
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fd4d 	bl	8005dbc <xTaskRemoveFromEventList>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005328:	f000 fe8a 	bl	8006040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800532c:	7bbb      	ldrb	r3, [r7, #14]
 800532e:	3b01      	subs	r3, #1
 8005330:	b2db      	uxtb	r3, r3
 8005332:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005338:	2b00      	cmp	r3, #0
 800533a:	dce9      	bgt.n	8005310 <prvUnlockQueue+0x60>
 800533c:	e000      	b.n	8005340 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800533e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	22ff      	movs	r2, #255	@ 0xff
 8005344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005348:	f001 fd30 	bl	8006dac <vPortExitCritical>
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800535c:	f001 fcf4 	bl	8006d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005368:	2301      	movs	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e001      	b.n	8005372 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005372:	f001 fd1b 	bl	8006dac <vPortExitCritical>

	return xReturn;
 8005376:	68fb      	ldr	r3, [r7, #12]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005388:	f001 fcde 	bl	8006d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005394:	429a      	cmp	r2, r3
 8005396:	d102      	bne.n	800539e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005398:	2301      	movs	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e001      	b.n	80053a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053a2:	f001 fd03 	bl	8006dac <vPortExitCritical>

	return xReturn;
 80053a6:	68fb      	ldr	r3, [r7, #12]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e014      	b.n	80053ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053c0:	4a0f      	ldr	r2, [pc, #60]	@ (8005400 <vQueueAddToRegistry+0x50>)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053cc:	490c      	ldr	r1, [pc, #48]	@ (8005400 <vQueueAddToRegistry+0x50>)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005400 <vQueueAddToRegistry+0x50>)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053e2:	e006      	b.n	80053f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3301      	adds	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b07      	cmp	r3, #7
 80053ee:	d9e7      	bls.n	80053c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	20000890 	.word	0x20000890

08005404 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005414:	f001 fc98 	bl	8006d48 <vPortEnterCritical>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800541e:	b25b      	sxtb	r3, r3
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005424:	d103      	bne.n	800542e <vQueueWaitForMessageRestricted+0x2a>
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005434:	b25b      	sxtb	r3, r3
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800543a:	d103      	bne.n	8005444 <vQueueWaitForMessageRestricted+0x40>
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005444:	f001 fcb2 	bl	8006dac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3324      	adds	r3, #36	@ 0x24
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fc83 	bl	8005d64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800545e:	6978      	ldr	r0, [r7, #20]
 8005460:	f7ff ff26 	bl	80052b0 <prvUnlockQueue>
	}
 8005464:	bf00      	nop
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08e      	sub	sp, #56	@ 0x38
 8005470:	af04      	add	r7, sp, #16
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800547a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10b      	bne.n	8005498 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	623b      	str	r3, [r7, #32]
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	e7fd      	b.n	8005494 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	61fb      	str	r3, [r7, #28]
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054b6:	235c      	movs	r3, #92	@ 0x5c
 80054b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80054be:	d00b      	beq.n	80054d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	61bb      	str	r3, [r7, #24]
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01e      	beq.n	800551e <xTaskCreateStatic+0xb2>
 80054e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01b      	beq.n	800551e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054f8:	2300      	movs	r3, #0
 80054fa:	9303      	str	r3, [sp, #12]
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	9302      	str	r3, [sp, #8]
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f850 	bl	80055b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005516:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005518:	f000 f8de 	bl	80056d8 <prvAddNewTaskToReadyList>
 800551c:	e001      	b.n	8005522 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005522:	697b      	ldr	r3, [r7, #20]
	}
 8005524:	4618      	mov	r0, r3
 8005526:	3728      	adds	r7, #40	@ 0x28
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	@ 0x30
 8005530:	af04      	add	r7, sp, #16
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4618      	mov	r0, r3
 8005542:	f001 fd23 	bl	8006f8c <pvPortMalloc>
 8005546:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00e      	beq.n	800556c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800554e:	205c      	movs	r0, #92	@ 0x5c
 8005550:	f001 fd1c 	bl	8006f8c <pvPortMalloc>
 8005554:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	631a      	str	r2, [r3, #48]	@ 0x30
 8005562:	e005      	b.n	8005570 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005564:	6978      	ldr	r0, [r7, #20]
 8005566:	f001 fddf 	bl	8007128 <vPortFree>
 800556a:	e001      	b.n	8005570 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800556c:	2300      	movs	r3, #0
 800556e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d017      	beq.n	80055a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800557e:	88fa      	ldrh	r2, [r7, #6]
 8005580:	2300      	movs	r3, #0
 8005582:	9303      	str	r3, [sp, #12]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	9302      	str	r3, [sp, #8]
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f80e 	bl	80055b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800559a:	69f8      	ldr	r0, [r7, #28]
 800559c:	f000 f89c 	bl	80056d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055a0:	2301      	movs	r3, #1
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	e002      	b.n	80055ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055ac:	69bb      	ldr	r3, [r7, #24]
	}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b088      	sub	sp, #32
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	461a      	mov	r2, r3
 80055ce:	21a5      	movs	r1, #165	@ 0xa5
 80055d0:	f001 ff72 	bl	80074b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055de:	3b01      	subs	r3, #1
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f023 0307 	bic.w	r3, r3, #7
 80055ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	617b      	str	r3, [r7, #20]
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01f      	beq.n	8005656 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	e012      	b.n	8005642 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	7819      	ldrb	r1, [r3, #0]
 8005624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	3334      	adds	r3, #52	@ 0x34
 800562c:	460a      	mov	r2, r1
 800562e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d006      	beq.n	800564a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	3301      	adds	r3, #1
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2b0f      	cmp	r3, #15
 8005646:	d9e9      	bls.n	800561c <prvInitialiseNewTask+0x66>
 8005648:	e000      	b.n	800564c <prvInitialiseNewTask+0x96>
			{
				break;
 800564a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005654:	e003      	b.n	800565e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005660:	2b37      	cmp	r3, #55	@ 0x37
 8005662:	d901      	bls.n	8005668 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005664:	2337      	movs	r3, #55	@ 0x37
 8005666:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800566c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005672:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	2200      	movs	r2, #0
 8005678:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	3304      	adds	r3, #4
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff f85c 	bl	800473c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	3318      	adds	r3, #24
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff f857 	bl	800473c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005692:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005696:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	2200      	movs	r2, #0
 80056a8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	68f9      	ldr	r1, [r7, #12]
 80056b6:	69b8      	ldr	r0, [r7, #24]
 80056b8:	f001 fa18 	bl	8006aec <pxPortInitialiseStack>
 80056bc:	4602      	mov	r2, r0
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ce:	bf00      	nop
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056e0:	f001 fb32 	bl	8006d48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056e4:	4b2d      	ldr	r3, [pc, #180]	@ (800579c <prvAddNewTaskToReadyList+0xc4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3301      	adds	r3, #1
 80056ea:	4a2c      	ldr	r2, [pc, #176]	@ (800579c <prvAddNewTaskToReadyList+0xc4>)
 80056ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056ee:	4b2c      	ldr	r3, [pc, #176]	@ (80057a0 <prvAddNewTaskToReadyList+0xc8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056f6:	4a2a      	ldr	r2, [pc, #168]	@ (80057a0 <prvAddNewTaskToReadyList+0xc8>)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056fc:	4b27      	ldr	r3, [pc, #156]	@ (800579c <prvAddNewTaskToReadyList+0xc4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d110      	bne.n	8005726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005704:	f000 fcc0 	bl	8006088 <prvInitialiseTaskLists>
 8005708:	e00d      	b.n	8005726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800570a:	4b26      	ldr	r3, [pc, #152]	@ (80057a4 <prvAddNewTaskToReadyList+0xcc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d109      	bne.n	8005726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005712:	4b23      	ldr	r3, [pc, #140]	@ (80057a0 <prvAddNewTaskToReadyList+0xc8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	429a      	cmp	r2, r3
 800571e:	d802      	bhi.n	8005726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005720:	4a1f      	ldr	r2, [pc, #124]	@ (80057a0 <prvAddNewTaskToReadyList+0xc8>)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005726:	4b20      	ldr	r3, [pc, #128]	@ (80057a8 <prvAddNewTaskToReadyList+0xd0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3301      	adds	r3, #1
 800572c:	4a1e      	ldr	r2, [pc, #120]	@ (80057a8 <prvAddNewTaskToReadyList+0xd0>)
 800572e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005730:	4b1d      	ldr	r3, [pc, #116]	@ (80057a8 <prvAddNewTaskToReadyList+0xd0>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573c:	4b1b      	ldr	r3, [pc, #108]	@ (80057ac <prvAddNewTaskToReadyList+0xd4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d903      	bls.n	800574c <prvAddNewTaskToReadyList+0x74>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005748:	4a18      	ldr	r2, [pc, #96]	@ (80057ac <prvAddNewTaskToReadyList+0xd4>)
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4a15      	ldr	r2, [pc, #84]	@ (80057b0 <prvAddNewTaskToReadyList+0xd8>)
 800575a:	441a      	add	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f7fe fff7 	bl	8004756 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005768:	f001 fb20 	bl	8006dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800576c:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <prvAddNewTaskToReadyList+0xcc>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005774:	4b0a      	ldr	r3, [pc, #40]	@ (80057a0 <prvAddNewTaskToReadyList+0xc8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	429a      	cmp	r2, r3
 8005780:	d207      	bcs.n	8005792 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005782:	4b0c      	ldr	r3, [pc, #48]	@ (80057b4 <prvAddNewTaskToReadyList+0xdc>)
 8005784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000da4 	.word	0x20000da4
 80057a0:	200008d0 	.word	0x200008d0
 80057a4:	20000db0 	.word	0x20000db0
 80057a8:	20000dc0 	.word	0x20000dc0
 80057ac:	20000dac 	.word	0x20000dac
 80057b0:	200008d4 	.word	0x200008d4
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d018      	beq.n	80057fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057ca:	4b14      	ldr	r3, [pc, #80]	@ (800581c <vTaskDelay+0x64>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <vTaskDelay+0x32>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	60bb      	str	r3, [r7, #8]
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	e7fd      	b.n	80057e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057ea:	f000 f883 	bl	80058f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057ee:	2100      	movs	r1, #0
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fdad 	bl	8006350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057f6:	f000 f88b 	bl	8005910 <xTaskResumeAll>
 80057fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d107      	bne.n	8005812 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005802:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <vTaskDelay+0x68>)
 8005804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000dcc 	.word	0x20000dcc
 8005820:	e000ed04 	.word	0xe000ed04

08005824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	@ 0x28
 8005828:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005832:	463a      	mov	r2, r7
 8005834:	1d39      	adds	r1, r7, #4
 8005836:	f107 0308 	add.w	r3, r7, #8
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe fd34 	bl	80042a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	9202      	str	r2, [sp, #8]
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	2300      	movs	r3, #0
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	2300      	movs	r3, #0
 8005850:	460a      	mov	r2, r1
 8005852:	4922      	ldr	r1, [pc, #136]	@ (80058dc <vTaskStartScheduler+0xb8>)
 8005854:	4822      	ldr	r0, [pc, #136]	@ (80058e0 <vTaskStartScheduler+0xbc>)
 8005856:	f7ff fe09 	bl	800546c <xTaskCreateStatic>
 800585a:	4603      	mov	r3, r0
 800585c:	4a21      	ldr	r2, [pc, #132]	@ (80058e4 <vTaskStartScheduler+0xc0>)
 800585e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005860:	4b20      	ldr	r3, [pc, #128]	@ (80058e4 <vTaskStartScheduler+0xc0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005868:	2301      	movs	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e001      	b.n	8005872 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d102      	bne.n	800587e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005878:	f000 fdbe 	bl	80063f8 <xTimerCreateTimerTask>
 800587c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d116      	bne.n	80058b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	613b      	str	r3, [r7, #16]
}
 8005896:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005898:	4b13      	ldr	r3, [pc, #76]	@ (80058e8 <vTaskStartScheduler+0xc4>)
 800589a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800589e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058a0:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <vTaskStartScheduler+0xc8>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058a6:	4b12      	ldr	r3, [pc, #72]	@ (80058f0 <vTaskStartScheduler+0xcc>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058ac:	f001 f9a8 	bl	8006c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058b0:	e00f      	b.n	80058d2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058b8:	d10b      	bne.n	80058d2 <vTaskStartScheduler+0xae>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	60fb      	str	r3, [r7, #12]
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	e7fd      	b.n	80058ce <vTaskStartScheduler+0xaa>
}
 80058d2:	bf00      	nop
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	08007f1c 	.word	0x08007f1c
 80058e0:	08006059 	.word	0x08006059
 80058e4:	20000dc8 	.word	0x20000dc8
 80058e8:	20000dc4 	.word	0x20000dc4
 80058ec:	20000db0 	.word	0x20000db0
 80058f0:	20000da8 	.word	0x20000da8

080058f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058f8:	4b04      	ldr	r3, [pc, #16]	@ (800590c <vTaskSuspendAll+0x18>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	4a03      	ldr	r2, [pc, #12]	@ (800590c <vTaskSuspendAll+0x18>)
 8005900:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005902:	bf00      	nop
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	20000dcc 	.word	0x20000dcc

08005910 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800591e:	4b42      	ldr	r3, [pc, #264]	@ (8005a28 <xTaskResumeAll+0x118>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <xTaskResumeAll+0x2e>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	603b      	str	r3, [r7, #0]
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	e7fd      	b.n	800593a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800593e:	f001 fa03 	bl	8006d48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005942:	4b39      	ldr	r3, [pc, #228]	@ (8005a28 <xTaskResumeAll+0x118>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3b01      	subs	r3, #1
 8005948:	4a37      	ldr	r2, [pc, #220]	@ (8005a28 <xTaskResumeAll+0x118>)
 800594a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800594c:	4b36      	ldr	r3, [pc, #216]	@ (8005a28 <xTaskResumeAll+0x118>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d162      	bne.n	8005a1a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005954:	4b35      	ldr	r3, [pc, #212]	@ (8005a2c <xTaskResumeAll+0x11c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d05e      	beq.n	8005a1a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800595c:	e02f      	b.n	80059be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800595e:	4b34      	ldr	r3, [pc, #208]	@ (8005a30 <xTaskResumeAll+0x120>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3318      	adds	r3, #24
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe ff50 	bl	8004810 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3304      	adds	r3, #4
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe ff4b 	bl	8004810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597e:	4b2d      	ldr	r3, [pc, #180]	@ (8005a34 <xTaskResumeAll+0x124>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d903      	bls.n	800598e <xTaskResumeAll+0x7e>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	4a2a      	ldr	r2, [pc, #168]	@ (8005a34 <xTaskResumeAll+0x124>)
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4a27      	ldr	r2, [pc, #156]	@ (8005a38 <xTaskResumeAll+0x128>)
 800599c:	441a      	add	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3304      	adds	r3, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f7fe fed6 	bl	8004756 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ae:	4b23      	ldr	r3, [pc, #140]	@ (8005a3c <xTaskResumeAll+0x12c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d302      	bcc.n	80059be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80059b8:	4b21      	ldr	r3, [pc, #132]	@ (8005a40 <xTaskResumeAll+0x130>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059be:	4b1c      	ldr	r3, [pc, #112]	@ (8005a30 <xTaskResumeAll+0x120>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1cb      	bne.n	800595e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059cc:	f000 fbfa 	bl	80061c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a44 <xTaskResumeAll+0x134>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d010      	beq.n	80059fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059dc:	f000 f846 	bl	8005a6c <xTaskIncrementTick>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80059e6:	4b16      	ldr	r3, [pc, #88]	@ (8005a40 <xTaskResumeAll+0x130>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f1      	bne.n	80059dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80059f8:	4b12      	ldr	r3, [pc, #72]	@ (8005a44 <xTaskResumeAll+0x134>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059fe:	4b10      	ldr	r3, [pc, #64]	@ (8005a40 <xTaskResumeAll+0x130>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a06:	2301      	movs	r3, #1
 8005a08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a48 <xTaskResumeAll+0x138>)
 8005a0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a1a:	f001 f9c7 	bl	8006dac <vPortExitCritical>

	return xAlreadyYielded;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000dcc 	.word	0x20000dcc
 8005a2c:	20000da4 	.word	0x20000da4
 8005a30:	20000d64 	.word	0x20000d64
 8005a34:	20000dac 	.word	0x20000dac
 8005a38:	200008d4 	.word	0x200008d4
 8005a3c:	200008d0 	.word	0x200008d0
 8005a40:	20000db8 	.word	0x20000db8
 8005a44:	20000db4 	.word	0x20000db4
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a52:	4b05      	ldr	r3, [pc, #20]	@ (8005a68 <xTaskGetTickCount+0x1c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a58:	687b      	ldr	r3, [r7, #4]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	20000da8 	.word	0x20000da8

08005a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a76:	4b4f      	ldr	r3, [pc, #316]	@ (8005bb4 <xTaskIncrementTick+0x148>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 8090 	bne.w	8005ba0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a80:	4b4d      	ldr	r3, [pc, #308]	@ (8005bb8 <xTaskIncrementTick+0x14c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a88:	4a4b      	ldr	r2, [pc, #300]	@ (8005bb8 <xTaskIncrementTick+0x14c>)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d121      	bne.n	8005ad8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a94:	4b49      	ldr	r3, [pc, #292]	@ (8005bbc <xTaskIncrementTick+0x150>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00b      	beq.n	8005ab6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	603b      	str	r3, [r7, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <xTaskIncrementTick+0x46>
 8005ab6:	4b41      	ldr	r3, [pc, #260]	@ (8005bbc <xTaskIncrementTick+0x150>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	4b40      	ldr	r3, [pc, #256]	@ (8005bc0 <xTaskIncrementTick+0x154>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a3e      	ldr	r2, [pc, #248]	@ (8005bbc <xTaskIncrementTick+0x150>)
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8005bc0 <xTaskIncrementTick+0x154>)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	4b3e      	ldr	r3, [pc, #248]	@ (8005bc4 <xTaskIncrementTick+0x158>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	4a3c      	ldr	r2, [pc, #240]	@ (8005bc4 <xTaskIncrementTick+0x158>)
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	f000 fb76 	bl	80061c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8005bc8 <xTaskIncrementTick+0x15c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d349      	bcc.n	8005b76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae2:	4b36      	ldr	r3, [pc, #216]	@ (8005bbc <xTaskIncrementTick+0x150>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aec:	4b36      	ldr	r3, [pc, #216]	@ (8005bc8 <xTaskIncrementTick+0x15c>)
 8005aee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005af2:	601a      	str	r2, [r3, #0]
					break;
 8005af4:	e03f      	b.n	8005b76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af6:	4b31      	ldr	r3, [pc, #196]	@ (8005bbc <xTaskIncrementTick+0x150>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d203      	bcs.n	8005b16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b0e:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc8 <xTaskIncrementTick+0x15c>)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b14:	e02f      	b.n	8005b76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe fe78 	bl	8004810 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	3318      	adds	r3, #24
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe fe6f 	bl	8004810 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b36:	4b25      	ldr	r3, [pc, #148]	@ (8005bcc <xTaskIncrementTick+0x160>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d903      	bls.n	8005b46 <xTaskIncrementTick+0xda>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b42:	4a22      	ldr	r2, [pc, #136]	@ (8005bcc <xTaskIncrementTick+0x160>)
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd0 <xTaskIncrementTick+0x164>)
 8005b54:	441a      	add	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f7fe fdfa 	bl	8004756 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b66:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd4 <xTaskIncrementTick+0x168>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d3b8      	bcc.n	8005ae2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b70:	2301      	movs	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b74:	e7b5      	b.n	8005ae2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b76:	4b17      	ldr	r3, [pc, #92]	@ (8005bd4 <xTaskIncrementTick+0x168>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b7c:	4914      	ldr	r1, [pc, #80]	@ (8005bd0 <xTaskIncrementTick+0x164>)
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d901      	bls.n	8005b92 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b92:	4b11      	ldr	r3, [pc, #68]	@ (8005bd8 <xTaskIncrementTick+0x16c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	e004      	b.n	8005baa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8005bdc <xTaskIncrementTick+0x170>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8005bdc <xTaskIncrementTick+0x170>)
 8005ba8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005baa:	697b      	ldr	r3, [r7, #20]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20000dcc 	.word	0x20000dcc
 8005bb8:	20000da8 	.word	0x20000da8
 8005bbc:	20000d5c 	.word	0x20000d5c
 8005bc0:	20000d60 	.word	0x20000d60
 8005bc4:	20000dbc 	.word	0x20000dbc
 8005bc8:	20000dc4 	.word	0x20000dc4
 8005bcc:	20000dac 	.word	0x20000dac
 8005bd0:	200008d4 	.word	0x200008d4
 8005bd4:	200008d0 	.word	0x200008d0
 8005bd8:	20000db8 	.word	0x20000db8
 8005bdc:	20000db4 	.word	0x20000db4

08005be0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005be6:	4b28      	ldr	r3, [pc, #160]	@ (8005c88 <vTaskSwitchContext+0xa8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bee:	4b27      	ldr	r3, [pc, #156]	@ (8005c8c <vTaskSwitchContext+0xac>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bf4:	e042      	b.n	8005c7c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005bf6:	4b25      	ldr	r3, [pc, #148]	@ (8005c8c <vTaskSwitchContext+0xac>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfc:	4b24      	ldr	r3, [pc, #144]	@ (8005c90 <vTaskSwitchContext+0xb0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e011      	b.n	8005c28 <vTaskSwitchContext+0x48>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <vTaskSwitchContext+0x42>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	607b      	str	r3, [r7, #4]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <vTaskSwitchContext+0x3e>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	491a      	ldr	r1, [pc, #104]	@ (8005c94 <vTaskSwitchContext+0xb4>)
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0e3      	beq.n	8005c04 <vTaskSwitchContext+0x24>
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4a13      	ldr	r2, [pc, #76]	@ (8005c94 <vTaskSwitchContext+0xb4>)
 8005c48:	4413      	add	r3, r2
 8005c4a:	60bb      	str	r3, [r7, #8]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	605a      	str	r2, [r3, #4]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d104      	bne.n	8005c6c <vTaskSwitchContext+0x8c>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	605a      	str	r2, [r3, #4]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	4a09      	ldr	r2, [pc, #36]	@ (8005c98 <vTaskSwitchContext+0xb8>)
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	4a06      	ldr	r2, [pc, #24]	@ (8005c90 <vTaskSwitchContext+0xb0>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6013      	str	r3, [r2, #0]
}
 8005c7c:	bf00      	nop
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	20000dcc 	.word	0x20000dcc
 8005c8c:	20000db8 	.word	0x20000db8
 8005c90:	20000dac 	.word	0x20000dac
 8005c94:	200008d4 	.word	0x200008d4
 8005c98:	200008d0 	.word	0x200008d0

08005c9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	60fb      	str	r3, [r7, #12]
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	e7fd      	b.n	8005cc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cc4:	4b07      	ldr	r3, [pc, #28]	@ (8005ce4 <vTaskPlaceOnEventList+0x48>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3318      	adds	r3, #24
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fe fd66 	bl	800479e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	6838      	ldr	r0, [r7, #0]
 8005cd6:	f000 fb3b 	bl	8006350 <prvAddCurrentTaskToDelayedList>
}
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200008d0 	.word	0x200008d0

08005ce8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	617b      	str	r3, [r7, #20]
}
 8005d0c:	bf00      	nop
 8005d0e:	bf00      	nop
 8005d10:	e7fd      	b.n	8005d0e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005d12:	4b12      	ldr	r3, [pc, #72]	@ (8005d5c <vTaskPlaceOnUnorderedEventList+0x74>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10b      	bne.n	8005d32 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	613b      	str	r3, [r7, #16]
}
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	e7fd      	b.n	8005d2e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005d32:	4b0b      	ldr	r3, [pc, #44]	@ (8005d60 <vTaskPlaceOnUnorderedEventList+0x78>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005d3c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d3e:	4b08      	ldr	r3, [pc, #32]	@ (8005d60 <vTaskPlaceOnUnorderedEventList+0x78>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3318      	adds	r3, #24
 8005d44:	4619      	mov	r1, r3
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7fe fd05 	bl	8004756 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fafe 	bl	8006350 <prvAddCurrentTaskToDelayedList>
}
 8005d54:	bf00      	nop
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000dcc 	.word	0x20000dcc
 8005d60:	200008d0 	.word	0x200008d0

08005d64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10b      	bne.n	8005d8e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	617b      	str	r3, [r7, #20]
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	e7fd      	b.n	8005d8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005db8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3318      	adds	r3, #24
 8005d94:	4619      	mov	r1, r3
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7fe fcdd 	bl	8004756 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005da2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005da6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	68b8      	ldr	r0, [r7, #8]
 8005dac:	f000 fad0 	bl	8006350 <prvAddCurrentTaskToDelayedList>
	}
 8005db0:	bf00      	nop
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	200008d0 	.word	0x200008d0

08005dbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10b      	bne.n	8005dea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	60fb      	str	r3, [r7, #12]
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop
 8005de8:	e7fd      	b.n	8005de6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	3318      	adds	r3, #24
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe fd0e 	bl	8004810 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005df4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e6c <xTaskRemoveFromEventList+0xb0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d11d      	bne.n	8005e38 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fd05 	bl	8004810 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0a:	4b19      	ldr	r3, [pc, #100]	@ (8005e70 <xTaskRemoveFromEventList+0xb4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d903      	bls.n	8005e1a <xTaskRemoveFromEventList+0x5e>
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e16:	4a16      	ldr	r2, [pc, #88]	@ (8005e70 <xTaskRemoveFromEventList+0xb4>)
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4a13      	ldr	r2, [pc, #76]	@ (8005e74 <xTaskRemoveFromEventList+0xb8>)
 8005e28:	441a      	add	r2, r3
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f7fe fc90 	bl	8004756 <vListInsertEnd>
 8005e36:	e005      	b.n	8005e44 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3318      	adds	r3, #24
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	480e      	ldr	r0, [pc, #56]	@ (8005e78 <xTaskRemoveFromEventList+0xbc>)
 8005e40:	f7fe fc89 	bl	8004756 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e48:	4b0c      	ldr	r3, [pc, #48]	@ (8005e7c <xTaskRemoveFromEventList+0xc0>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d905      	bls.n	8005e5e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e52:	2301      	movs	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e56:	4b0a      	ldr	r3, [pc, #40]	@ (8005e80 <xTaskRemoveFromEventList+0xc4>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	e001      	b.n	8005e62 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e62:	697b      	ldr	r3, [r7, #20]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000dcc 	.word	0x20000dcc
 8005e70:	20000dac 	.word	0x20000dac
 8005e74:	200008d4 	.word	0x200008d4
 8005e78:	20000d64 	.word	0x20000d64
 8005e7c:	200008d0 	.word	0x200008d0
 8005e80:	20000db8 	.word	0x20000db8

08005e84 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8005f38 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10b      	bne.n	8005eae <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	613b      	str	r3, [r7, #16]
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	e7fd      	b.n	8005eaa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10b      	bne.n	8005edc <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	60fb      	str	r3, [r7, #12]
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fe fc97 	bl	8004810 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe fc92 	bl	8004810 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef0:	4b12      	ldr	r3, [pc, #72]	@ (8005f3c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d903      	bls.n	8005f00 <vTaskRemoveFromUnorderedEventList+0x7c>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efc:	4a0f      	ldr	r2, [pc, #60]	@ (8005f3c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8005f40 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005f0e:	441a      	add	r2, r3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fe fc1d 	bl	8004756 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f20:	4b08      	ldr	r3, [pc, #32]	@ (8005f44 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d902      	bls.n	8005f30 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005f2a:	4b07      	ldr	r3, [pc, #28]	@ (8005f48 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
	}
}
 8005f30:	bf00      	nop
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000dcc 	.word	0x20000dcc
 8005f3c:	20000dac 	.word	0x20000dac
 8005f40:	200008d4 	.word	0x200008d4
 8005f44:	200008d0 	.word	0x200008d0
 8005f48:	20000db8 	.word	0x20000db8

08005f4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f54:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <vTaskInternalSetTimeOutState+0x24>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f5c:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <vTaskInternalSetTimeOutState+0x28>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	605a      	str	r2, [r3, #4]
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	20000dbc 	.word	0x20000dbc
 8005f74:	20000da8 	.word	0x20000da8

08005f78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	613b      	str	r3, [r7, #16]
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	60fb      	str	r3, [r7, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	e7fd      	b.n	8005fba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005fbe:	f000 fec3 	bl	8006d48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006038 <xTaskCheckForTimeOut+0xc0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fda:	d102      	bne.n	8005fe2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e023      	b.n	800602a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b15      	ldr	r3, [pc, #84]	@ (800603c <xTaskCheckForTimeOut+0xc4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d007      	beq.n	8005ffe <xTaskCheckForTimeOut+0x86>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d302      	bcc.n	8005ffe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	e015      	b.n	800602a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	429a      	cmp	r2, r3
 8006006:	d20b      	bcs.n	8006020 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff ff99 	bl	8005f4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800601a:	2300      	movs	r3, #0
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	e004      	b.n	800602a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006026:	2301      	movs	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800602a:	f000 febf 	bl	8006dac <vPortExitCritical>

	return xReturn;
 800602e:	69fb      	ldr	r3, [r7, #28]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20000da8 	.word	0x20000da8
 800603c:	20000dbc 	.word	0x20000dbc

08006040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006044:	4b03      	ldr	r3, [pc, #12]	@ (8006054 <vTaskMissedYield+0x14>)
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	bf00      	nop
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	20000db8 	.word	0x20000db8

08006058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006060:	f000 f852 	bl	8006108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006064:	4b06      	ldr	r3, [pc, #24]	@ (8006080 <prvIdleTask+0x28>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d9f9      	bls.n	8006060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800606c:	4b05      	ldr	r3, [pc, #20]	@ (8006084 <prvIdleTask+0x2c>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800607c:	e7f0      	b.n	8006060 <prvIdleTask+0x8>
 800607e:	bf00      	nop
 8006080:	200008d4 	.word	0x200008d4
 8006084:	e000ed04 	.word	0xe000ed04

08006088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800608e:	2300      	movs	r3, #0
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	e00c      	b.n	80060ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4a12      	ldr	r2, [pc, #72]	@ (80060e8 <prvInitialiseTaskLists+0x60>)
 80060a0:	4413      	add	r3, r2
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fb2a 	bl	80046fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3301      	adds	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b37      	cmp	r3, #55	@ 0x37
 80060b2:	d9ef      	bls.n	8006094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060b4:	480d      	ldr	r0, [pc, #52]	@ (80060ec <prvInitialiseTaskLists+0x64>)
 80060b6:	f7fe fb21 	bl	80046fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060ba:	480d      	ldr	r0, [pc, #52]	@ (80060f0 <prvInitialiseTaskLists+0x68>)
 80060bc:	f7fe fb1e 	bl	80046fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060c0:	480c      	ldr	r0, [pc, #48]	@ (80060f4 <prvInitialiseTaskLists+0x6c>)
 80060c2:	f7fe fb1b 	bl	80046fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060c6:	480c      	ldr	r0, [pc, #48]	@ (80060f8 <prvInitialiseTaskLists+0x70>)
 80060c8:	f7fe fb18 	bl	80046fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060cc:	480b      	ldr	r0, [pc, #44]	@ (80060fc <prvInitialiseTaskLists+0x74>)
 80060ce:	f7fe fb15 	bl	80046fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <prvInitialiseTaskLists+0x78>)
 80060d4:	4a05      	ldr	r2, [pc, #20]	@ (80060ec <prvInitialiseTaskLists+0x64>)
 80060d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <prvInitialiseTaskLists+0x7c>)
 80060da:	4a05      	ldr	r2, [pc, #20]	@ (80060f0 <prvInitialiseTaskLists+0x68>)
 80060dc:	601a      	str	r2, [r3, #0]
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200008d4 	.word	0x200008d4
 80060ec:	20000d34 	.word	0x20000d34
 80060f0:	20000d48 	.word	0x20000d48
 80060f4:	20000d64 	.word	0x20000d64
 80060f8:	20000d78 	.word	0x20000d78
 80060fc:	20000d90 	.word	0x20000d90
 8006100:	20000d5c 	.word	0x20000d5c
 8006104:	20000d60 	.word	0x20000d60

08006108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800610e:	e019      	b.n	8006144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006110:	f000 fe1a 	bl	8006d48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006114:	4b10      	ldr	r3, [pc, #64]	@ (8006158 <prvCheckTasksWaitingTermination+0x50>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3304      	adds	r3, #4
 8006120:	4618      	mov	r0, r3
 8006122:	f7fe fb75 	bl	8004810 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006126:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <prvCheckTasksWaitingTermination+0x54>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3b01      	subs	r3, #1
 800612c:	4a0b      	ldr	r2, [pc, #44]	@ (800615c <prvCheckTasksWaitingTermination+0x54>)
 800612e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006130:	4b0b      	ldr	r3, [pc, #44]	@ (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3b01      	subs	r3, #1
 8006136:	4a0a      	ldr	r2, [pc, #40]	@ (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800613a:	f000 fe37 	bl	8006dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f810 	bl	8006164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006144:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e1      	bne.n	8006110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000d78 	.word	0x20000d78
 800615c:	20000da4 	.word	0x20000da4
 8006160:	20000d8c 	.word	0x20000d8c

08006164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617a:	4618      	mov	r0, r3
 800617c:	f000 ffd4 	bl	8007128 <vPortFree>
				vPortFree( pxTCB );
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 ffd1 	bl	8007128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006186:	e019      	b.n	80061bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800618e:	2b01      	cmp	r3, #1
 8006190:	d103      	bne.n	800619a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 ffc8 	bl	8007128 <vPortFree>
	}
 8006198:	e010      	b.n	80061bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d00b      	beq.n	80061bc <prvDeleteTCB+0x58>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	60fb      	str	r3, [r7, #12]
}
 80061b6:	bf00      	nop
 80061b8:	bf00      	nop
 80061ba:	e7fd      	b.n	80061b8 <prvDeleteTCB+0x54>
	}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ca:	4b0c      	ldr	r3, [pc, #48]	@ (80061fc <prvResetNextTaskUnblockTime+0x38>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006200 <prvResetNextTaskUnblockTime+0x3c>)
 80061d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061dc:	e008      	b.n	80061f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061de:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <prvResetNextTaskUnblockTime+0x38>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4a04      	ldr	r2, [pc, #16]	@ (8006200 <prvResetNextTaskUnblockTime+0x3c>)
 80061ee:	6013      	str	r3, [r2, #0]
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	20000d5c 	.word	0x20000d5c
 8006200:	20000dc4 	.word	0x20000dc4

08006204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800620a:	4b0b      	ldr	r3, [pc, #44]	@ (8006238 <xTaskGetSchedulerState+0x34>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006212:	2301      	movs	r3, #1
 8006214:	607b      	str	r3, [r7, #4]
 8006216:	e008      	b.n	800622a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006218:	4b08      	ldr	r3, [pc, #32]	@ (800623c <xTaskGetSchedulerState+0x38>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006220:	2302      	movs	r3, #2
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	e001      	b.n	800622a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006226:	2300      	movs	r3, #0
 8006228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800622a:	687b      	ldr	r3, [r7, #4]
	}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	20000db0 	.word	0x20000db0
 800623c:	20000dcc 	.word	0x20000dcc

08006240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d058      	beq.n	8006308 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006256:	4b2f      	ldr	r3, [pc, #188]	@ (8006314 <xTaskPriorityDisinherit+0xd4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	429a      	cmp	r2, r3
 800625e:	d00b      	beq.n	8006278 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	60fb      	str	r3, [r7, #12]
}
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	e7fd      	b.n	8006274 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60bb      	str	r3, [r7, #8]
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	e7fd      	b.n	8006294 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800629c:	1e5a      	subs	r2, r3, #1
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d02c      	beq.n	8006308 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d128      	bne.n	8006308 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe faa8 	bl	8004810 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006318 <xTaskPriorityDisinherit+0xd8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d903      	bls.n	80062e8 <xTaskPriorityDisinherit+0xa8>
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006318 <xTaskPriorityDisinherit+0xd8>)
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4a09      	ldr	r2, [pc, #36]	@ (800631c <xTaskPriorityDisinherit+0xdc>)
 80062f6:	441a      	add	r2, r3
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7fe fa29 	bl	8004756 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006304:	2301      	movs	r3, #1
 8006306:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006308:	697b      	ldr	r3, [r7, #20]
	}
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	200008d0 	.word	0x200008d0
 8006318:	20000dac 	.word	0x20000dac
 800631c:	200008d4 	.word	0x200008d4

08006320 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006326:	4b09      	ldr	r3, [pc, #36]	@ (800634c <uxTaskResetEventItemValue+0x2c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800632e:	4b07      	ldr	r3, [pc, #28]	@ (800634c <uxTaskResetEventItemValue+0x2c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006334:	4b05      	ldr	r3, [pc, #20]	@ (800634c <uxTaskResetEventItemValue+0x2c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800633c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800633e:	687b      	ldr	r3, [r7, #4]
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	200008d0 	.word	0x200008d0

08006350 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800635a:	4b21      	ldr	r3, [pc, #132]	@ (80063e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006360:	4b20      	ldr	r3, [pc, #128]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3304      	adds	r3, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fa52 	bl	8004810 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006372:	d10a      	bne.n	800638a <prvAddCurrentTaskToDelayedList+0x3a>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800637a:	4b1a      	ldr	r3, [pc, #104]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3304      	adds	r3, #4
 8006380:	4619      	mov	r1, r3
 8006382:	4819      	ldr	r0, [pc, #100]	@ (80063e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006384:	f7fe f9e7 	bl	8004756 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006388:	e026      	b.n	80063d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4413      	add	r3, r2
 8006390:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006392:	4b14      	ldr	r3, [pc, #80]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d209      	bcs.n	80063b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063a2:	4b12      	ldr	r3, [pc, #72]	@ (80063ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b0f      	ldr	r3, [pc, #60]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f7fe f9f5 	bl	800479e <vListInsert>
}
 80063b4:	e010      	b.n	80063d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063b6:	4b0e      	ldr	r3, [pc, #56]	@ (80063f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b0a      	ldr	r3, [pc, #40]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3304      	adds	r3, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f7fe f9eb 	bl	800479e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063c8:	4b0a      	ldr	r3, [pc, #40]	@ (80063f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d202      	bcs.n	80063d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063d2:	4a08      	ldr	r2, [pc, #32]	@ (80063f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	6013      	str	r3, [r2, #0]
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000da8 	.word	0x20000da8
 80063e4:	200008d0 	.word	0x200008d0
 80063e8:	20000d90 	.word	0x20000d90
 80063ec:	20000d60 	.word	0x20000d60
 80063f0:	20000d5c 	.word	0x20000d5c
 80063f4:	20000dc4 	.word	0x20000dc4

080063f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	@ 0x28
 80063fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006402:	f000 fb13 	bl	8006a2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006406:	4b1d      	ldr	r3, [pc, #116]	@ (800647c <xTimerCreateTimerTask+0x84>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d021      	beq.n	8006452 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006416:	1d3a      	adds	r2, r7, #4
 8006418:	f107 0108 	add.w	r1, r7, #8
 800641c:	f107 030c 	add.w	r3, r7, #12
 8006420:	4618      	mov	r0, r3
 8006422:	f7fd ff5b 	bl	80042dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	9202      	str	r2, [sp, #8]
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	2302      	movs	r3, #2
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	2300      	movs	r3, #0
 8006436:	460a      	mov	r2, r1
 8006438:	4911      	ldr	r1, [pc, #68]	@ (8006480 <xTimerCreateTimerTask+0x88>)
 800643a:	4812      	ldr	r0, [pc, #72]	@ (8006484 <xTimerCreateTimerTask+0x8c>)
 800643c:	f7ff f816 	bl	800546c <xTaskCreateStatic>
 8006440:	4603      	mov	r3, r0
 8006442:	4a11      	ldr	r2, [pc, #68]	@ (8006488 <xTimerCreateTimerTask+0x90>)
 8006444:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006446:	4b10      	ldr	r3, [pc, #64]	@ (8006488 <xTimerCreateTimerTask+0x90>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800644e:	2301      	movs	r3, #1
 8006450:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10b      	bne.n	8006470 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	613b      	str	r3, [r7, #16]
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	e7fd      	b.n	800646c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006470:	697b      	ldr	r3, [r7, #20]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000e00 	.word	0x20000e00
 8006480:	08007f24 	.word	0x08007f24
 8006484:	080065c5 	.word	0x080065c5
 8006488:	20000e04 	.word	0x20000e04

0800648c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	@ 0x28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800649a:	2300      	movs	r3, #0
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10b      	bne.n	80064bc <xTimerGenericCommand+0x30>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	623b      	str	r3, [r7, #32]
}
 80064b6:	bf00      	nop
 80064b8:	bf00      	nop
 80064ba:	e7fd      	b.n	80064b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064bc:	4b19      	ldr	r3, [pc, #100]	@ (8006524 <xTimerGenericCommand+0x98>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d02a      	beq.n	800651a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b05      	cmp	r3, #5
 80064d4:	dc18      	bgt.n	8006508 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80064d6:	f7ff fe95 	bl	8006204 <xTaskGetSchedulerState>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d109      	bne.n	80064f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80064e0:	4b10      	ldr	r3, [pc, #64]	@ (8006524 <xTimerGenericCommand+0x98>)
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	f107 0110 	add.w	r1, r7, #16
 80064e8:	2300      	movs	r3, #0
 80064ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064ec:	f7fe fb4c 	bl	8004b88 <xQueueGenericSend>
 80064f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80064f2:	e012      	b.n	800651a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80064f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006524 <xTimerGenericCommand+0x98>)
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	f107 0110 	add.w	r1, r7, #16
 80064fc:	2300      	movs	r3, #0
 80064fe:	2200      	movs	r2, #0
 8006500:	f7fe fb42 	bl	8004b88 <xQueueGenericSend>
 8006504:	6278      	str	r0, [r7, #36]	@ 0x24
 8006506:	e008      	b.n	800651a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006508:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <xTimerGenericCommand+0x98>)
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	f107 0110 	add.w	r1, r7, #16
 8006510:	2300      	movs	r3, #0
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	f7fe fc3a 	bl	8004d8c <xQueueGenericSendFromISR>
 8006518:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800651c:	4618      	mov	r0, r3
 800651e:	3728      	adds	r7, #40	@ 0x28
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000e00 	.word	0x20000e00

08006528 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af02      	add	r7, sp, #8
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006532:	4b23      	ldr	r3, [pc, #140]	@ (80065c0 <prvProcessExpiredTimer+0x98>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	3304      	adds	r3, #4
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe f965 	bl	8004810 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d023      	beq.n	800659c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	699a      	ldr	r2, [r3, #24]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	18d1      	adds	r1, r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	6978      	ldr	r0, [r7, #20]
 8006562:	f000 f8d5 	bl	8006710 <prvInsertTimerInActiveList>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d020      	beq.n	80065ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800656c:	2300      	movs	r3, #0
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	2100      	movs	r1, #0
 8006576:	6978      	ldr	r0, [r7, #20]
 8006578:	f7ff ff88 	bl	800648c <xTimerGenericCommand>
 800657c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d114      	bne.n	80065ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	60fb      	str	r3, [r7, #12]
}
 8006596:	bf00      	nop
 8006598:	bf00      	nop
 800659a:	e7fd      	b.n	8006598 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	6978      	ldr	r0, [r7, #20]
 80065b4:	4798      	blx	r3
}
 80065b6:	bf00      	nop
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000df8 	.word	0x20000df8

080065c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065cc:	f107 0308 	add.w	r3, r7, #8
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 f859 	bl	8006688 <prvGetNextExpireTime>
 80065d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4619      	mov	r1, r3
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f805 	bl	80065ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80065e2:	f000 f8d7 	bl	8006794 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065e6:	bf00      	nop
 80065e8:	e7f0      	b.n	80065cc <prvTimerTask+0x8>
	...

080065ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80065f6:	f7ff f97d 	bl	80058f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065fa:	f107 0308 	add.w	r3, r7, #8
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 f866 	bl	80066d0 <prvSampleTimeNow>
 8006604:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d130      	bne.n	800666e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10a      	bne.n	8006628 <prvProcessTimerOrBlockTask+0x3c>
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	429a      	cmp	r2, r3
 8006618:	d806      	bhi.n	8006628 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800661a:	f7ff f979 	bl	8005910 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ff81 	bl	8006528 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006626:	e024      	b.n	8006672 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d008      	beq.n	8006640 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800662e:	4b13      	ldr	r3, [pc, #76]	@ (800667c <prvProcessTimerOrBlockTask+0x90>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <prvProcessTimerOrBlockTask+0x50>
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <prvProcessTimerOrBlockTask+0x52>
 800663c:	2300      	movs	r3, #0
 800663e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006640:	4b0f      	ldr	r3, [pc, #60]	@ (8006680 <prvProcessTimerOrBlockTask+0x94>)
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	4619      	mov	r1, r3
 800664e:	f7fe fed9 	bl	8005404 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006652:	f7ff f95d 	bl	8005910 <xTaskResumeAll>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800665c:	4b09      	ldr	r3, [pc, #36]	@ (8006684 <prvProcessTimerOrBlockTask+0x98>)
 800665e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	f3bf 8f6f 	isb	sy
}
 800666c:	e001      	b.n	8006672 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800666e:	f7ff f94f 	bl	8005910 <xTaskResumeAll>
}
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000dfc 	.word	0x20000dfc
 8006680:	20000e00 	.word	0x20000e00
 8006684:	e000ed04 	.word	0xe000ed04

08006688 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006690:	4b0e      	ldr	r3, [pc, #56]	@ (80066cc <prvGetNextExpireTime+0x44>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <prvGetNextExpireTime+0x16>
 800669a:	2201      	movs	r2, #1
 800669c:	e000      	b.n	80066a0 <prvGetNextExpireTime+0x18>
 800669e:	2200      	movs	r2, #0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066ac:	4b07      	ldr	r3, [pc, #28]	@ (80066cc <prvGetNextExpireTime+0x44>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	e001      	b.n	80066bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066bc:	68fb      	ldr	r3, [r7, #12]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000df8 	.word	0x20000df8

080066d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80066d8:	f7ff f9b8 	bl	8005a4c <xTaskGetTickCount>
 80066dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80066de:	4b0b      	ldr	r3, [pc, #44]	@ (800670c <prvSampleTimeNow+0x3c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d205      	bcs.n	80066f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80066e8:	f000 f93a 	bl	8006960 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e002      	b.n	80066fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80066fa:	4a04      	ldr	r2, [pc, #16]	@ (800670c <prvSampleTimeNow+0x3c>)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006700:	68fb      	ldr	r3, [r7, #12]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000e08 	.word	0x20000e08

08006710 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	429a      	cmp	r2, r3
 8006734:	d812      	bhi.n	800675c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	1ad2      	subs	r2, r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	429a      	cmp	r2, r3
 8006742:	d302      	bcc.n	800674a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006744:	2301      	movs	r3, #1
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	e01b      	b.n	8006782 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800674a:	4b10      	ldr	r3, [pc, #64]	@ (800678c <prvInsertTimerInActiveList+0x7c>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3304      	adds	r3, #4
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f7fe f822 	bl	800479e <vListInsert>
 800675a:	e012      	b.n	8006782 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d206      	bcs.n	8006772 <prvInsertTimerInActiveList+0x62>
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d302      	bcc.n	8006772 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800676c:	2301      	movs	r3, #1
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	e007      	b.n	8006782 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006772:	4b07      	ldr	r3, [pc, #28]	@ (8006790 <prvInsertTimerInActiveList+0x80>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3304      	adds	r3, #4
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f7fe f80e 	bl	800479e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006782:	697b      	ldr	r3, [r7, #20]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	20000dfc 	.word	0x20000dfc
 8006790:	20000df8 	.word	0x20000df8

08006794 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08e      	sub	sp, #56	@ 0x38
 8006798:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800679a:	e0ce      	b.n	800693a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	da19      	bge.n	80067d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067a2:	1d3b      	adds	r3, r7, #4
 80067a4:	3304      	adds	r3, #4
 80067a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10b      	bne.n	80067c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	61fb      	str	r3, [r7, #28]
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	e7fd      	b.n	80067c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067cc:	6850      	ldr	r0, [r2, #4]
 80067ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067d0:	6892      	ldr	r2, [r2, #8]
 80067d2:	4611      	mov	r1, r2
 80067d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f2c0 80ae 	blt.w	800693a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d004      	beq.n	80067f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	3304      	adds	r3, #4
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe f80e 	bl	8004810 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067f4:	463b      	mov	r3, r7
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff ff6a 	bl	80066d0 <prvSampleTimeNow>
 80067fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b09      	cmp	r3, #9
 8006802:	f200 8097 	bhi.w	8006934 <prvProcessReceivedCommands+0x1a0>
 8006806:	a201      	add	r2, pc, #4	@ (adr r2, 800680c <prvProcessReceivedCommands+0x78>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006835 	.word	0x08006835
 8006810:	08006835 	.word	0x08006835
 8006814:	08006835 	.word	0x08006835
 8006818:	080068ab 	.word	0x080068ab
 800681c:	080068bf 	.word	0x080068bf
 8006820:	0800690b 	.word	0x0800690b
 8006824:	08006835 	.word	0x08006835
 8006828:	08006835 	.word	0x08006835
 800682c:	080068ab 	.word	0x080068ab
 8006830:	080068bf 	.word	0x080068bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	b2da      	uxtb	r2, r3
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	18d1      	adds	r1, r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006854:	f7ff ff5c 	bl	8006710 <prvInsertTimerInActiveList>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d06c      	beq.n	8006938 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006864:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d061      	beq.n	8006938 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	441a      	add	r2, r3
 800687c:	2300      	movs	r3, #0
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	2300      	movs	r3, #0
 8006882:	2100      	movs	r1, #0
 8006884:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006886:	f7ff fe01 	bl	800648c <xTimerGenericCommand>
 800688a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d152      	bne.n	8006938 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	61bb      	str	r3, [r7, #24]
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	e7fd      	b.n	80068a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80068bc:	e03d      	b.n	800693a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80068d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	617b      	str	r3, [r7, #20]
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	e7fd      	b.n	80068f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	18d1      	adds	r1, r2, r3
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006904:	f7ff ff04 	bl	8006710 <prvInsertTimerInActiveList>
					break;
 8006908:	e017      	b.n	800693a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d103      	bne.n	8006920 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800691a:	f000 fc05 	bl	8007128 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800691e:	e00c      	b.n	800693a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006922:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006926:	f023 0301 	bic.w	r3, r3, #1
 800692a:	b2da      	uxtb	r2, r3
 800692c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006932:	e002      	b.n	800693a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006934:	bf00      	nop
 8006936:	e000      	b.n	800693a <prvProcessReceivedCommands+0x1a6>
					break;
 8006938:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800693a:	4b08      	ldr	r3, [pc, #32]	@ (800695c <prvProcessReceivedCommands+0x1c8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	1d39      	adds	r1, r7, #4
 8006940:	2200      	movs	r2, #0
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fac0 	bl	8004ec8 <xQueueReceive>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	f47f af26 	bne.w	800679c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	3730      	adds	r7, #48	@ 0x30
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000e00 	.word	0x20000e00

08006960 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006966:	e049      	b.n	80069fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006968:	4b2e      	ldr	r3, [pc, #184]	@ (8006a24 <prvSwitchTimerLists+0xc4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006972:	4b2c      	ldr	r3, [pc, #176]	@ (8006a24 <prvSwitchTimerLists+0xc4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3304      	adds	r3, #4
 8006980:	4618      	mov	r0, r3
 8006982:	f7fd ff45 	bl	8004810 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d02f      	beq.n	80069fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d90e      	bls.n	80069cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006a24 <prvSwitchTimerLists+0xc4>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4619      	mov	r1, r3
 80069c4:	4610      	mov	r0, r2
 80069c6:	f7fd feea 	bl	800479e <vListInsert>
 80069ca:	e017      	b.n	80069fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069cc:	2300      	movs	r3, #0
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	2300      	movs	r3, #0
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	2100      	movs	r1, #0
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff fd58 	bl	800648c <xTimerGenericCommand>
 80069dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10b      	bne.n	80069fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	603b      	str	r3, [r7, #0]
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	e7fd      	b.n	80069f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069fc:	4b09      	ldr	r3, [pc, #36]	@ (8006a24 <prvSwitchTimerLists+0xc4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1b0      	bne.n	8006968 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a06:	4b07      	ldr	r3, [pc, #28]	@ (8006a24 <prvSwitchTimerLists+0xc4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a0c:	4b06      	ldr	r3, [pc, #24]	@ (8006a28 <prvSwitchTimerLists+0xc8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a04      	ldr	r2, [pc, #16]	@ (8006a24 <prvSwitchTimerLists+0xc4>)
 8006a12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a14:	4a04      	ldr	r2, [pc, #16]	@ (8006a28 <prvSwitchTimerLists+0xc8>)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	6013      	str	r3, [r2, #0]
}
 8006a1a:	bf00      	nop
 8006a1c:	3718      	adds	r7, #24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000df8 	.word	0x20000df8
 8006a28:	20000dfc 	.word	0x20000dfc

08006a2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a32:	f000 f989 	bl	8006d48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a36:	4b15      	ldr	r3, [pc, #84]	@ (8006a8c <prvCheckForValidListAndQueue+0x60>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d120      	bne.n	8006a80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a3e:	4814      	ldr	r0, [pc, #80]	@ (8006a90 <prvCheckForValidListAndQueue+0x64>)
 8006a40:	f7fd fe5c 	bl	80046fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a44:	4813      	ldr	r0, [pc, #76]	@ (8006a94 <prvCheckForValidListAndQueue+0x68>)
 8006a46:	f7fd fe59 	bl	80046fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a4a:	4b13      	ldr	r3, [pc, #76]	@ (8006a98 <prvCheckForValidListAndQueue+0x6c>)
 8006a4c:	4a10      	ldr	r2, [pc, #64]	@ (8006a90 <prvCheckForValidListAndQueue+0x64>)
 8006a4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a50:	4b12      	ldr	r3, [pc, #72]	@ (8006a9c <prvCheckForValidListAndQueue+0x70>)
 8006a52:	4a10      	ldr	r2, [pc, #64]	@ (8006a94 <prvCheckForValidListAndQueue+0x68>)
 8006a54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a56:	2300      	movs	r3, #0
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <prvCheckForValidListAndQueue+0x74>)
 8006a5c:	4a11      	ldr	r2, [pc, #68]	@ (8006aa4 <prvCheckForValidListAndQueue+0x78>)
 8006a5e:	2110      	movs	r1, #16
 8006a60:	200a      	movs	r0, #10
 8006a62:	f7fd ff69 	bl	8004938 <xQueueGenericCreateStatic>
 8006a66:	4603      	mov	r3, r0
 8006a68:	4a08      	ldr	r2, [pc, #32]	@ (8006a8c <prvCheckForValidListAndQueue+0x60>)
 8006a6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a6c:	4b07      	ldr	r3, [pc, #28]	@ (8006a8c <prvCheckForValidListAndQueue+0x60>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a74:	4b05      	ldr	r3, [pc, #20]	@ (8006a8c <prvCheckForValidListAndQueue+0x60>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	490b      	ldr	r1, [pc, #44]	@ (8006aa8 <prvCheckForValidListAndQueue+0x7c>)
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fc98 	bl	80053b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a80:	f000 f994 	bl	8006dac <vPortExitCritical>
}
 8006a84:	bf00      	nop
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000e00 	.word	0x20000e00
 8006a90:	20000dd0 	.word	0x20000dd0
 8006a94:	20000de4 	.word	0x20000de4
 8006a98:	20000df8 	.word	0x20000df8
 8006a9c:	20000dfc 	.word	0x20000dfc
 8006aa0:	20000eac 	.word	0x20000eac
 8006aa4:	20000e0c 	.word	0x20000e0c
 8006aa8:	08007f2c 	.word	0x08007f2c

08006aac <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08a      	sub	sp, #40	@ 0x28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006aba:	f06f 0301 	mvn.w	r3, #1
 8006abe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006acc:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <xTimerPendFunctionCallFromISR+0x3c>)
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	f107 0114 	add.w	r1, r7, #20
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	f7fe f958 	bl	8004d8c <xQueueGenericSendFromISR>
 8006adc:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3728      	adds	r7, #40	@ 0x28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	20000e00 	.word	0x20000e00

08006aec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3b04      	subs	r3, #4
 8006afc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3b04      	subs	r3, #4
 8006b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f023 0201 	bic.w	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3b04      	subs	r3, #4
 8006b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006b50 <pxPortInitialiseStack+0x64>)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3b14      	subs	r3, #20
 8006b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3b04      	subs	r3, #4
 8006b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f06f 0202 	mvn.w	r2, #2
 8006b3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3b20      	subs	r3, #32
 8006b40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b42:	68fb      	ldr	r3, [r7, #12]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	08006b55 	.word	0x08006b55

08006b54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b5e:	4b13      	ldr	r3, [pc, #76]	@ (8006bac <prvTaskExitError+0x58>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b66:	d00b      	beq.n	8006b80 <prvTaskExitError+0x2c>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	60fb      	str	r3, [r7, #12]
}
 8006b7a:	bf00      	nop
 8006b7c:	bf00      	nop
 8006b7e:	e7fd      	b.n	8006b7c <prvTaskExitError+0x28>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	60bb      	str	r3, [r7, #8]
}
 8006b92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b94:	bf00      	nop
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0fc      	beq.n	8006b96 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	20000010 	.word	0x20000010

08006bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bb0:	4b07      	ldr	r3, [pc, #28]	@ (8006bd0 <pxCurrentTCBConst2>)
 8006bb2:	6819      	ldr	r1, [r3, #0]
 8006bb4:	6808      	ldr	r0, [r1, #0]
 8006bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bba:	f380 8809 	msr	PSP, r0
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f04f 0000 	mov.w	r0, #0
 8006bc6:	f380 8811 	msr	BASEPRI, r0
 8006bca:	4770      	bx	lr
 8006bcc:	f3af 8000 	nop.w

08006bd0 <pxCurrentTCBConst2>:
 8006bd0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop

08006bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bd8:	4808      	ldr	r0, [pc, #32]	@ (8006bfc <prvPortStartFirstTask+0x24>)
 8006bda:	6800      	ldr	r0, [r0, #0]
 8006bdc:	6800      	ldr	r0, [r0, #0]
 8006bde:	f380 8808 	msr	MSP, r0
 8006be2:	f04f 0000 	mov.w	r0, #0
 8006be6:	f380 8814 	msr	CONTROL, r0
 8006bea:	b662      	cpsie	i
 8006bec:	b661      	cpsie	f
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	df00      	svc	0
 8006bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bfa:	bf00      	nop
 8006bfc:	e000ed08 	.word	0xe000ed08

08006c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c06:	4b47      	ldr	r3, [pc, #284]	@ (8006d24 <xPortStartScheduler+0x124>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a47      	ldr	r2, [pc, #284]	@ (8006d28 <xPortStartScheduler+0x128>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d10b      	bne.n	8006c28 <xPortStartScheduler+0x28>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	613b      	str	r3, [r7, #16]
}
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	e7fd      	b.n	8006c24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c28:	4b3e      	ldr	r3, [pc, #248]	@ (8006d24 <xPortStartScheduler+0x124>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d2c <xPortStartScheduler+0x12c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d10b      	bne.n	8006c4a <xPortStartScheduler+0x4a>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	60fb      	str	r3, [r7, #12]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c4a:	4b39      	ldr	r3, [pc, #228]	@ (8006d30 <xPortStartScheduler+0x130>)
 8006c4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	22ff      	movs	r2, #255	@ 0xff
 8006c5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	4b31      	ldr	r3, [pc, #196]	@ (8006d34 <xPortStartScheduler+0x134>)
 8006c70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c72:	4b31      	ldr	r3, [pc, #196]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006c74:	2207      	movs	r2, #7
 8006c76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c78:	e009      	b.n	8006c8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	4a2d      	ldr	r2, [pc, #180]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006c82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c96:	2b80      	cmp	r3, #128	@ 0x80
 8006c98:	d0ef      	beq.n	8006c7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c9a:	4b27      	ldr	r3, [pc, #156]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f1c3 0307 	rsb	r3, r3, #7
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d00b      	beq.n	8006cbe <xPortStartScheduler+0xbe>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	60bb      	str	r3, [r7, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	e7fd      	b.n	8006cba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006cc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cd0:	4a19      	ldr	r2, [pc, #100]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006cd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cdc:	4b17      	ldr	r3, [pc, #92]	@ (8006d3c <xPortStartScheduler+0x13c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a16      	ldr	r2, [pc, #88]	@ (8006d3c <xPortStartScheduler+0x13c>)
 8006ce2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ce6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ce8:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <xPortStartScheduler+0x13c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a13      	ldr	r2, [pc, #76]	@ (8006d3c <xPortStartScheduler+0x13c>)
 8006cee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006cf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cf4:	f000 f8da 	bl	8006eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cf8:	4b11      	ldr	r3, [pc, #68]	@ (8006d40 <xPortStartScheduler+0x140>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cfe:	f000 f8f9 	bl	8006ef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d02:	4b10      	ldr	r3, [pc, #64]	@ (8006d44 <xPortStartScheduler+0x144>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a0f      	ldr	r2, [pc, #60]	@ (8006d44 <xPortStartScheduler+0x144>)
 8006d08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006d0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d0e:	f7ff ff63 	bl	8006bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d12:	f7fe ff65 	bl	8005be0 <vTaskSwitchContext>
	prvTaskExitError();
 8006d16:	f7ff ff1d 	bl	8006b54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	e000ed00 	.word	0xe000ed00
 8006d28:	410fc271 	.word	0x410fc271
 8006d2c:	410fc270 	.word	0x410fc270
 8006d30:	e000e400 	.word	0xe000e400
 8006d34:	20000efc 	.word	0x20000efc
 8006d38:	20000f00 	.word	0x20000f00
 8006d3c:	e000ed20 	.word	0xe000ed20
 8006d40:	20000010 	.word	0x20000010
 8006d44:	e000ef34 	.word	0xe000ef34

08006d48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	607b      	str	r3, [r7, #4]
}
 8006d60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d62:	4b10      	ldr	r3, [pc, #64]	@ (8006da4 <vPortEnterCritical+0x5c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3301      	adds	r3, #1
 8006d68:	4a0e      	ldr	r2, [pc, #56]	@ (8006da4 <vPortEnterCritical+0x5c>)
 8006d6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <vPortEnterCritical+0x5c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d110      	bne.n	8006d96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d74:	4b0c      	ldr	r3, [pc, #48]	@ (8006da8 <vPortEnterCritical+0x60>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <vPortEnterCritical+0x4e>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	603b      	str	r3, [r7, #0]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <vPortEnterCritical+0x4a>
	}
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	20000010 	.word	0x20000010
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006db2:	4b12      	ldr	r3, [pc, #72]	@ (8006dfc <vPortExitCritical+0x50>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10b      	bne.n	8006dd2 <vPortExitCritical+0x26>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	607b      	str	r3, [r7, #4]
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	e7fd      	b.n	8006dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <vPortExitCritical+0x50>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	4a08      	ldr	r2, [pc, #32]	@ (8006dfc <vPortExitCritical+0x50>)
 8006dda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ddc:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <vPortExitCritical+0x50>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d105      	bne.n	8006df0 <vPortExitCritical+0x44>
 8006de4:	2300      	movs	r3, #0
 8006de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	f383 8811 	msr	BASEPRI, r3
}
 8006dee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	20000010 	.word	0x20000010

08006e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e00:	f3ef 8009 	mrs	r0, PSP
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	4b15      	ldr	r3, [pc, #84]	@ (8006e60 <pxCurrentTCBConst>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	f01e 0f10 	tst.w	lr, #16
 8006e10:	bf08      	it	eq
 8006e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1a:	6010      	str	r0, [r2, #0]
 8006e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e24:	f380 8811 	msr	BASEPRI, r0
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f7fe fed6 	bl	8005be0 <vTaskSwitchContext>
 8006e34:	f04f 0000 	mov.w	r0, #0
 8006e38:	f380 8811 	msr	BASEPRI, r0
 8006e3c:	bc09      	pop	{r0, r3}
 8006e3e:	6819      	ldr	r1, [r3, #0]
 8006e40:	6808      	ldr	r0, [r1, #0]
 8006e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e46:	f01e 0f10 	tst.w	lr, #16
 8006e4a:	bf08      	it	eq
 8006e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e50:	f380 8809 	msr	PSP, r0
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	f3af 8000 	nop.w

08006e60 <pxCurrentTCBConst>:
 8006e60:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop

08006e68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	607b      	str	r3, [r7, #4]
}
 8006e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e82:	f7fe fdf3 	bl	8005a6c <xTaskIncrementTick>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ea8 <xPortSysTickHandler+0x40>)
 8006e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	2300      	movs	r3, #0
 8006e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	f383 8811 	msr	BASEPRI, r3
}
 8006e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <vPortSetupTimerInterrupt+0x34>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee4 <vPortSetupTimerInterrupt+0x38>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee8 <vPortSetupTimerInterrupt+0x3c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8006eec <vPortSetupTimerInterrupt+0x40>)
 8006ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec6:	099b      	lsrs	r3, r3, #6
 8006ec8:	4a09      	ldr	r2, [pc, #36]	@ (8006ef0 <vPortSetupTimerInterrupt+0x44>)
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ece:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <vPortSetupTimerInterrupt+0x34>)
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	601a      	str	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	e000e010 	.word	0xe000e010
 8006ee4:	e000e018 	.word	0xe000e018
 8006ee8:	20000004 	.word	0x20000004
 8006eec:	10624dd3 	.word	0x10624dd3
 8006ef0:	e000e014 	.word	0xe000e014

08006ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006f04 <vPortEnableVFP+0x10>
 8006ef8:	6801      	ldr	r1, [r0, #0]
 8006efa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006efe:	6001      	str	r1, [r0, #0]
 8006f00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f02:	bf00      	nop
 8006f04:	e000ed88 	.word	0xe000ed88

08006f08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f0e:	f3ef 8305 	mrs	r3, IPSR
 8006f12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b0f      	cmp	r3, #15
 8006f18:	d915      	bls.n	8006f46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f1a:	4a18      	ldr	r2, [pc, #96]	@ (8006f7c <vPortValidateInterruptPriority+0x74>)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f24:	4b16      	ldr	r3, [pc, #88]	@ (8006f80 <vPortValidateInterruptPriority+0x78>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	7afa      	ldrb	r2, [r7, #11]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d20b      	bcs.n	8006f46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	607b      	str	r3, [r7, #4]
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	e7fd      	b.n	8006f42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f46:	4b0f      	ldr	r3, [pc, #60]	@ (8006f84 <vPortValidateInterruptPriority+0x7c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f88 <vPortValidateInterruptPriority+0x80>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d90b      	bls.n	8006f6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	603b      	str	r3, [r7, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <vPortValidateInterruptPriority+0x62>
	}
 8006f6e:	bf00      	nop
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	e000e3f0 	.word	0xe000e3f0
 8006f80:	20000efc 	.word	0x20000efc
 8006f84:	e000ed0c 	.word	0xe000ed0c
 8006f88:	20000f00 	.word	0x20000f00

08006f8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08a      	sub	sp, #40	@ 0x28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f98:	f7fe fcac 	bl	80058f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8007110 <pvPortMalloc+0x184>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fa4:	f000 f924 	bl	80071f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8007114 <pvPortMalloc+0x188>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f040 8095 	bne.w	80070e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01e      	beq.n	8006ffa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d015      	beq.n	8006ffa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f023 0307 	bic.w	r3, r3, #7
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00b      	beq.n	8006ffa <pvPortMalloc+0x6e>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	617b      	str	r3, [r7, #20]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d06f      	beq.n	80070e0 <pvPortMalloc+0x154>
 8007000:	4b45      	ldr	r3, [pc, #276]	@ (8007118 <pvPortMalloc+0x18c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	429a      	cmp	r2, r3
 8007008:	d86a      	bhi.n	80070e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800700a:	4b44      	ldr	r3, [pc, #272]	@ (800711c <pvPortMalloc+0x190>)
 800700c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800700e:	4b43      	ldr	r3, [pc, #268]	@ (800711c <pvPortMalloc+0x190>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007014:	e004      	b.n	8007020 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	429a      	cmp	r2, r3
 8007028:	d903      	bls.n	8007032 <pvPortMalloc+0xa6>
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f1      	bne.n	8007016 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007032:	4b37      	ldr	r3, [pc, #220]	@ (8007110 <pvPortMalloc+0x184>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007038:	429a      	cmp	r2, r3
 800703a:	d051      	beq.n	80070e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2208      	movs	r2, #8
 8007042:	4413      	add	r3, r2
 8007044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	1ad2      	subs	r2, r2, r3
 8007056:	2308      	movs	r3, #8
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	429a      	cmp	r2, r3
 800705c:	d920      	bls.n	80070a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800705e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4413      	add	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00b      	beq.n	8007088 <pvPortMalloc+0xfc>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	613b      	str	r3, [r7, #16]
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	e7fd      	b.n	8007084 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800709a:	69b8      	ldr	r0, [r7, #24]
 800709c:	f000 f90a 	bl	80072b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007118 <pvPortMalloc+0x18c>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007118 <pvPortMalloc+0x18c>)
 80070ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007118 <pvPortMalloc+0x18c>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007120 <pvPortMalloc+0x194>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d203      	bcs.n	80070c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070ba:	4b17      	ldr	r3, [pc, #92]	@ (8007118 <pvPortMalloc+0x18c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a18      	ldr	r2, [pc, #96]	@ (8007120 <pvPortMalloc+0x194>)
 80070c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4b13      	ldr	r3, [pc, #76]	@ (8007114 <pvPortMalloc+0x188>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80070d6:	4b13      	ldr	r3, [pc, #76]	@ (8007124 <pvPortMalloc+0x198>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	4a11      	ldr	r2, [pc, #68]	@ (8007124 <pvPortMalloc+0x198>)
 80070de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070e0:	f7fe fc16 	bl	8005910 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00b      	beq.n	8007106 <pvPortMalloc+0x17a>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	60fb      	str	r3, [r7, #12]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <pvPortMalloc+0x176>
	return pvReturn;
 8007106:	69fb      	ldr	r3, [r7, #28]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3728      	adds	r7, #40	@ 0x28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20004b0c 	.word	0x20004b0c
 8007114:	20004b20 	.word	0x20004b20
 8007118:	20004b10 	.word	0x20004b10
 800711c:	20004b04 	.word	0x20004b04
 8007120:	20004b14 	.word	0x20004b14
 8007124:	20004b18 	.word	0x20004b18

08007128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d04f      	beq.n	80071da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800713a:	2308      	movs	r3, #8
 800713c:	425b      	negs	r3, r3
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4413      	add	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	4b25      	ldr	r3, [pc, #148]	@ (80071e4 <vPortFree+0xbc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4013      	ands	r3, r2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10b      	bne.n	800716e <vPortFree+0x46>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60fb      	str	r3, [r7, #12]
}
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	e7fd      	b.n	800716a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <vPortFree+0x66>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	60bb      	str	r3, [r7, #8]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	4b14      	ldr	r3, [pc, #80]	@ (80071e4 <vPortFree+0xbc>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4013      	ands	r3, r2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01e      	beq.n	80071da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d11a      	bne.n	80071da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	4b0e      	ldr	r3, [pc, #56]	@ (80071e4 <vPortFree+0xbc>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	43db      	mvns	r3, r3
 80071ae:	401a      	ands	r2, r3
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071b4:	f7fe fb9e 	bl	80058f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	4b0a      	ldr	r3, [pc, #40]	@ (80071e8 <vPortFree+0xc0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4413      	add	r3, r2
 80071c2:	4a09      	ldr	r2, [pc, #36]	@ (80071e8 <vPortFree+0xc0>)
 80071c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071c6:	6938      	ldr	r0, [r7, #16]
 80071c8:	f000 f874 	bl	80072b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80071cc:	4b07      	ldr	r3, [pc, #28]	@ (80071ec <vPortFree+0xc4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3301      	adds	r3, #1
 80071d2:	4a06      	ldr	r2, [pc, #24]	@ (80071ec <vPortFree+0xc4>)
 80071d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80071d6:	f7fe fb9b 	bl	8005910 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071da:	bf00      	nop
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20004b20 	.word	0x20004b20
 80071e8:	20004b10 	.word	0x20004b10
 80071ec:	20004b1c 	.word	0x20004b1c

080071f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80071fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071fc:	4b27      	ldr	r3, [pc, #156]	@ (800729c <prvHeapInit+0xac>)
 80071fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00c      	beq.n	8007224 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3307      	adds	r3, #7
 800720e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0307 	bic.w	r3, r3, #7
 8007216:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	4a1f      	ldr	r2, [pc, #124]	@ (800729c <prvHeapInit+0xac>)
 8007220:	4413      	add	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007228:	4a1d      	ldr	r2, [pc, #116]	@ (80072a0 <prvHeapInit+0xb0>)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800722e:	4b1c      	ldr	r3, [pc, #112]	@ (80072a0 <prvHeapInit+0xb0>)
 8007230:	2200      	movs	r2, #0
 8007232:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	4413      	add	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800723c:	2208      	movs	r2, #8
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4a15      	ldr	r2, [pc, #84]	@ (80072a4 <prvHeapInit+0xb4>)
 8007250:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007252:	4b14      	ldr	r3, [pc, #80]	@ (80072a4 <prvHeapInit+0xb4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800725a:	4b12      	ldr	r3, [pc, #72]	@ (80072a4 <prvHeapInit+0xb4>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <prvHeapInit+0xb4>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4a0a      	ldr	r2, [pc, #40]	@ (80072a8 <prvHeapInit+0xb8>)
 800727e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	4a09      	ldr	r2, [pc, #36]	@ (80072ac <prvHeapInit+0xbc>)
 8007286:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007288:	4b09      	ldr	r3, [pc, #36]	@ (80072b0 <prvHeapInit+0xc0>)
 800728a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800728e:	601a      	str	r2, [r3, #0]
}
 8007290:	bf00      	nop
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	20000f04 	.word	0x20000f04
 80072a0:	20004b04 	.word	0x20004b04
 80072a4:	20004b0c 	.word	0x20004b0c
 80072a8:	20004b14 	.word	0x20004b14
 80072ac:	20004b10 	.word	0x20004b10
 80072b0:	20004b20 	.word	0x20004b20

080072b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072bc:	4b28      	ldr	r3, [pc, #160]	@ (8007360 <prvInsertBlockIntoFreeList+0xac>)
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e002      	b.n	80072c8 <prvInsertBlockIntoFreeList+0x14>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d8f7      	bhi.n	80072c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	4413      	add	r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d108      	bne.n	80072f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	441a      	add	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	441a      	add	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d118      	bne.n	800733c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4b15      	ldr	r3, [pc, #84]	@ (8007364 <prvInsertBlockIntoFreeList+0xb0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d00d      	beq.n	8007332 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	441a      	add	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	e008      	b.n	8007344 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007332:	4b0c      	ldr	r3, [pc, #48]	@ (8007364 <prvInsertBlockIntoFreeList+0xb0>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	e003      	b.n	8007344 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d002      	beq.n	8007352 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20004b04 	.word	0x20004b04
 8007364:	20004b0c 	.word	0x20004b0c

08007368 <atoi>:
 8007368:	220a      	movs	r2, #10
 800736a:	2100      	movs	r1, #0
 800736c:	f000 b87a 	b.w	8007464 <strtol>

08007370 <_strtol_l.constprop.0>:
 8007370:	2b24      	cmp	r3, #36	@ 0x24
 8007372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007376:	4686      	mov	lr, r0
 8007378:	4690      	mov	r8, r2
 800737a:	d801      	bhi.n	8007380 <_strtol_l.constprop.0+0x10>
 800737c:	2b01      	cmp	r3, #1
 800737e:	d106      	bne.n	800738e <_strtol_l.constprop.0+0x1e>
 8007380:	f000 f8b4 	bl	80074ec <__errno>
 8007384:	2316      	movs	r3, #22
 8007386:	6003      	str	r3, [r0, #0]
 8007388:	2000      	movs	r0, #0
 800738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738e:	4834      	ldr	r0, [pc, #208]	@ (8007460 <_strtol_l.constprop.0+0xf0>)
 8007390:	460d      	mov	r5, r1
 8007392:	462a      	mov	r2, r5
 8007394:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007398:	5d06      	ldrb	r6, [r0, r4]
 800739a:	f016 0608 	ands.w	r6, r6, #8
 800739e:	d1f8      	bne.n	8007392 <_strtol_l.constprop.0+0x22>
 80073a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80073a2:	d12d      	bne.n	8007400 <_strtol_l.constprop.0+0x90>
 80073a4:	782c      	ldrb	r4, [r5, #0]
 80073a6:	2601      	movs	r6, #1
 80073a8:	1c95      	adds	r5, r2, #2
 80073aa:	f033 0210 	bics.w	r2, r3, #16
 80073ae:	d109      	bne.n	80073c4 <_strtol_l.constprop.0+0x54>
 80073b0:	2c30      	cmp	r4, #48	@ 0x30
 80073b2:	d12a      	bne.n	800740a <_strtol_l.constprop.0+0x9a>
 80073b4:	782a      	ldrb	r2, [r5, #0]
 80073b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80073ba:	2a58      	cmp	r2, #88	@ 0x58
 80073bc:	d125      	bne.n	800740a <_strtol_l.constprop.0+0x9a>
 80073be:	786c      	ldrb	r4, [r5, #1]
 80073c0:	2310      	movs	r3, #16
 80073c2:	3502      	adds	r5, #2
 80073c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80073c8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80073cc:	2200      	movs	r2, #0
 80073ce:	fbbc f9f3 	udiv	r9, ip, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	fb03 ca19 	mls	sl, r3, r9, ip
 80073d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80073dc:	2f09      	cmp	r7, #9
 80073de:	d81b      	bhi.n	8007418 <_strtol_l.constprop.0+0xa8>
 80073e0:	463c      	mov	r4, r7
 80073e2:	42a3      	cmp	r3, r4
 80073e4:	dd27      	ble.n	8007436 <_strtol_l.constprop.0+0xc6>
 80073e6:	1c57      	adds	r7, r2, #1
 80073e8:	d007      	beq.n	80073fa <_strtol_l.constprop.0+0x8a>
 80073ea:	4581      	cmp	r9, r0
 80073ec:	d320      	bcc.n	8007430 <_strtol_l.constprop.0+0xc0>
 80073ee:	d101      	bne.n	80073f4 <_strtol_l.constprop.0+0x84>
 80073f0:	45a2      	cmp	sl, r4
 80073f2:	db1d      	blt.n	8007430 <_strtol_l.constprop.0+0xc0>
 80073f4:	fb00 4003 	mla	r0, r0, r3, r4
 80073f8:	2201      	movs	r2, #1
 80073fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073fe:	e7eb      	b.n	80073d8 <_strtol_l.constprop.0+0x68>
 8007400:	2c2b      	cmp	r4, #43	@ 0x2b
 8007402:	bf04      	itt	eq
 8007404:	782c      	ldrbeq	r4, [r5, #0]
 8007406:	1c95      	addeq	r5, r2, #2
 8007408:	e7cf      	b.n	80073aa <_strtol_l.constprop.0+0x3a>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1da      	bne.n	80073c4 <_strtol_l.constprop.0+0x54>
 800740e:	2c30      	cmp	r4, #48	@ 0x30
 8007410:	bf0c      	ite	eq
 8007412:	2308      	moveq	r3, #8
 8007414:	230a      	movne	r3, #10
 8007416:	e7d5      	b.n	80073c4 <_strtol_l.constprop.0+0x54>
 8007418:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800741c:	2f19      	cmp	r7, #25
 800741e:	d801      	bhi.n	8007424 <_strtol_l.constprop.0+0xb4>
 8007420:	3c37      	subs	r4, #55	@ 0x37
 8007422:	e7de      	b.n	80073e2 <_strtol_l.constprop.0+0x72>
 8007424:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007428:	2f19      	cmp	r7, #25
 800742a:	d804      	bhi.n	8007436 <_strtol_l.constprop.0+0xc6>
 800742c:	3c57      	subs	r4, #87	@ 0x57
 800742e:	e7d8      	b.n	80073e2 <_strtol_l.constprop.0+0x72>
 8007430:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007434:	e7e1      	b.n	80073fa <_strtol_l.constprop.0+0x8a>
 8007436:	1c53      	adds	r3, r2, #1
 8007438:	d108      	bne.n	800744c <_strtol_l.constprop.0+0xdc>
 800743a:	2322      	movs	r3, #34	@ 0x22
 800743c:	f8ce 3000 	str.w	r3, [lr]
 8007440:	4660      	mov	r0, ip
 8007442:	f1b8 0f00 	cmp.w	r8, #0
 8007446:	d0a0      	beq.n	800738a <_strtol_l.constprop.0+0x1a>
 8007448:	1e69      	subs	r1, r5, #1
 800744a:	e006      	b.n	800745a <_strtol_l.constprop.0+0xea>
 800744c:	b106      	cbz	r6, 8007450 <_strtol_l.constprop.0+0xe0>
 800744e:	4240      	negs	r0, r0
 8007450:	f1b8 0f00 	cmp.w	r8, #0
 8007454:	d099      	beq.n	800738a <_strtol_l.constprop.0+0x1a>
 8007456:	2a00      	cmp	r2, #0
 8007458:	d1f6      	bne.n	8007448 <_strtol_l.constprop.0+0xd8>
 800745a:	f8c8 1000 	str.w	r1, [r8]
 800745e:	e794      	b.n	800738a <_strtol_l.constprop.0+0x1a>
 8007460:	080080b5 	.word	0x080080b5

08007464 <strtol>:
 8007464:	4613      	mov	r3, r2
 8007466:	460a      	mov	r2, r1
 8007468:	4601      	mov	r1, r0
 800746a:	4802      	ldr	r0, [pc, #8]	@ (8007474 <strtol+0x10>)
 800746c:	6800      	ldr	r0, [r0, #0]
 800746e:	f7ff bf7f 	b.w	8007370 <_strtol_l.constprop.0>
 8007472:	bf00      	nop
 8007474:	20000014 	.word	0x20000014

08007478 <siprintf>:
 8007478:	b40e      	push	{r1, r2, r3}
 800747a:	b500      	push	{lr}
 800747c:	b09c      	sub	sp, #112	@ 0x70
 800747e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007480:	9002      	str	r0, [sp, #8]
 8007482:	9006      	str	r0, [sp, #24]
 8007484:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007488:	4809      	ldr	r0, [pc, #36]	@ (80074b0 <siprintf+0x38>)
 800748a:	9107      	str	r1, [sp, #28]
 800748c:	9104      	str	r1, [sp, #16]
 800748e:	4909      	ldr	r1, [pc, #36]	@ (80074b4 <siprintf+0x3c>)
 8007490:	f853 2b04 	ldr.w	r2, [r3], #4
 8007494:	9105      	str	r1, [sp, #20]
 8007496:	6800      	ldr	r0, [r0, #0]
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	a902      	add	r1, sp, #8
 800749c:	f000 f9b4 	bl	8007808 <_svfiprintf_r>
 80074a0:	9b02      	ldr	r3, [sp, #8]
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	b01c      	add	sp, #112	@ 0x70
 80074a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074ac:	b003      	add	sp, #12
 80074ae:	4770      	bx	lr
 80074b0:	20000014 	.word	0x20000014
 80074b4:	ffff0208 	.word	0xffff0208

080074b8 <memset>:
 80074b8:	4402      	add	r2, r0
 80074ba:	4603      	mov	r3, r0
 80074bc:	4293      	cmp	r3, r2
 80074be:	d100      	bne.n	80074c2 <memset+0xa>
 80074c0:	4770      	bx	lr
 80074c2:	f803 1b01 	strb.w	r1, [r3], #1
 80074c6:	e7f9      	b.n	80074bc <memset+0x4>

080074c8 <strncmp>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	b16a      	cbz	r2, 80074e8 <strncmp+0x20>
 80074cc:	3901      	subs	r1, #1
 80074ce:	1884      	adds	r4, r0, r2
 80074d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80074d8:	429a      	cmp	r2, r3
 80074da:	d103      	bne.n	80074e4 <strncmp+0x1c>
 80074dc:	42a0      	cmp	r0, r4
 80074de:	d001      	beq.n	80074e4 <strncmp+0x1c>
 80074e0:	2a00      	cmp	r2, #0
 80074e2:	d1f5      	bne.n	80074d0 <strncmp+0x8>
 80074e4:	1ad0      	subs	r0, r2, r3
 80074e6:	bd10      	pop	{r4, pc}
 80074e8:	4610      	mov	r0, r2
 80074ea:	e7fc      	b.n	80074e6 <strncmp+0x1e>

080074ec <__errno>:
 80074ec:	4b01      	ldr	r3, [pc, #4]	@ (80074f4 <__errno+0x8>)
 80074ee:	6818      	ldr	r0, [r3, #0]
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20000014 	.word	0x20000014

080074f8 <__libc_init_array>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4d0d      	ldr	r5, [pc, #52]	@ (8007530 <__libc_init_array+0x38>)
 80074fc:	4c0d      	ldr	r4, [pc, #52]	@ (8007534 <__libc_init_array+0x3c>)
 80074fe:	1b64      	subs	r4, r4, r5
 8007500:	10a4      	asrs	r4, r4, #2
 8007502:	2600      	movs	r6, #0
 8007504:	42a6      	cmp	r6, r4
 8007506:	d109      	bne.n	800751c <__libc_init_array+0x24>
 8007508:	4d0b      	ldr	r5, [pc, #44]	@ (8007538 <__libc_init_array+0x40>)
 800750a:	4c0c      	ldr	r4, [pc, #48]	@ (800753c <__libc_init_array+0x44>)
 800750c:	f000 fc66 	bl	8007ddc <_init>
 8007510:	1b64      	subs	r4, r4, r5
 8007512:	10a4      	asrs	r4, r4, #2
 8007514:	2600      	movs	r6, #0
 8007516:	42a6      	cmp	r6, r4
 8007518:	d105      	bne.n	8007526 <__libc_init_array+0x2e>
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007520:	4798      	blx	r3
 8007522:	3601      	adds	r6, #1
 8007524:	e7ee      	b.n	8007504 <__libc_init_array+0xc>
 8007526:	f855 3b04 	ldr.w	r3, [r5], #4
 800752a:	4798      	blx	r3
 800752c:	3601      	adds	r6, #1
 800752e:	e7f2      	b.n	8007516 <__libc_init_array+0x1e>
 8007530:	080081f0 	.word	0x080081f0
 8007534:	080081f0 	.word	0x080081f0
 8007538:	080081f0 	.word	0x080081f0
 800753c:	080081f4 	.word	0x080081f4

08007540 <__retarget_lock_acquire_recursive>:
 8007540:	4770      	bx	lr

08007542 <__retarget_lock_release_recursive>:
 8007542:	4770      	bx	lr

08007544 <memcpy>:
 8007544:	440a      	add	r2, r1
 8007546:	4291      	cmp	r1, r2
 8007548:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800754c:	d100      	bne.n	8007550 <memcpy+0xc>
 800754e:	4770      	bx	lr
 8007550:	b510      	push	{r4, lr}
 8007552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800755a:	4291      	cmp	r1, r2
 800755c:	d1f9      	bne.n	8007552 <memcpy+0xe>
 800755e:	bd10      	pop	{r4, pc}

08007560 <_free_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4605      	mov	r5, r0
 8007564:	2900      	cmp	r1, #0
 8007566:	d041      	beq.n	80075ec <_free_r+0x8c>
 8007568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756c:	1f0c      	subs	r4, r1, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	bfb8      	it	lt
 8007572:	18e4      	addlt	r4, r4, r3
 8007574:	f000 f8e0 	bl	8007738 <__malloc_lock>
 8007578:	4a1d      	ldr	r2, [pc, #116]	@ (80075f0 <_free_r+0x90>)
 800757a:	6813      	ldr	r3, [r2, #0]
 800757c:	b933      	cbnz	r3, 800758c <_free_r+0x2c>
 800757e:	6063      	str	r3, [r4, #4]
 8007580:	6014      	str	r4, [r2, #0]
 8007582:	4628      	mov	r0, r5
 8007584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007588:	f000 b8dc 	b.w	8007744 <__malloc_unlock>
 800758c:	42a3      	cmp	r3, r4
 800758e:	d908      	bls.n	80075a2 <_free_r+0x42>
 8007590:	6820      	ldr	r0, [r4, #0]
 8007592:	1821      	adds	r1, r4, r0
 8007594:	428b      	cmp	r3, r1
 8007596:	bf01      	itttt	eq
 8007598:	6819      	ldreq	r1, [r3, #0]
 800759a:	685b      	ldreq	r3, [r3, #4]
 800759c:	1809      	addeq	r1, r1, r0
 800759e:	6021      	streq	r1, [r4, #0]
 80075a0:	e7ed      	b.n	800757e <_free_r+0x1e>
 80075a2:	461a      	mov	r2, r3
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	b10b      	cbz	r3, 80075ac <_free_r+0x4c>
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	d9fa      	bls.n	80075a2 <_free_r+0x42>
 80075ac:	6811      	ldr	r1, [r2, #0]
 80075ae:	1850      	adds	r0, r2, r1
 80075b0:	42a0      	cmp	r0, r4
 80075b2:	d10b      	bne.n	80075cc <_free_r+0x6c>
 80075b4:	6820      	ldr	r0, [r4, #0]
 80075b6:	4401      	add	r1, r0
 80075b8:	1850      	adds	r0, r2, r1
 80075ba:	4283      	cmp	r3, r0
 80075bc:	6011      	str	r1, [r2, #0]
 80075be:	d1e0      	bne.n	8007582 <_free_r+0x22>
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	6053      	str	r3, [r2, #4]
 80075c6:	4408      	add	r0, r1
 80075c8:	6010      	str	r0, [r2, #0]
 80075ca:	e7da      	b.n	8007582 <_free_r+0x22>
 80075cc:	d902      	bls.n	80075d4 <_free_r+0x74>
 80075ce:	230c      	movs	r3, #12
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	e7d6      	b.n	8007582 <_free_r+0x22>
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	1821      	adds	r1, r4, r0
 80075d8:	428b      	cmp	r3, r1
 80075da:	bf04      	itt	eq
 80075dc:	6819      	ldreq	r1, [r3, #0]
 80075de:	685b      	ldreq	r3, [r3, #4]
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	bf04      	itt	eq
 80075e4:	1809      	addeq	r1, r1, r0
 80075e6:	6021      	streq	r1, [r4, #0]
 80075e8:	6054      	str	r4, [r2, #4]
 80075ea:	e7ca      	b.n	8007582 <_free_r+0x22>
 80075ec:	bd38      	pop	{r3, r4, r5, pc}
 80075ee:	bf00      	nop
 80075f0:	20004c68 	.word	0x20004c68

080075f4 <sbrk_aligned>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	4e0f      	ldr	r6, [pc, #60]	@ (8007634 <sbrk_aligned+0x40>)
 80075f8:	460c      	mov	r4, r1
 80075fa:	6831      	ldr	r1, [r6, #0]
 80075fc:	4605      	mov	r5, r0
 80075fe:	b911      	cbnz	r1, 8007606 <sbrk_aligned+0x12>
 8007600:	f000 fba6 	bl	8007d50 <_sbrk_r>
 8007604:	6030      	str	r0, [r6, #0]
 8007606:	4621      	mov	r1, r4
 8007608:	4628      	mov	r0, r5
 800760a:	f000 fba1 	bl	8007d50 <_sbrk_r>
 800760e:	1c43      	adds	r3, r0, #1
 8007610:	d103      	bne.n	800761a <sbrk_aligned+0x26>
 8007612:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007616:	4620      	mov	r0, r4
 8007618:	bd70      	pop	{r4, r5, r6, pc}
 800761a:	1cc4      	adds	r4, r0, #3
 800761c:	f024 0403 	bic.w	r4, r4, #3
 8007620:	42a0      	cmp	r0, r4
 8007622:	d0f8      	beq.n	8007616 <sbrk_aligned+0x22>
 8007624:	1a21      	subs	r1, r4, r0
 8007626:	4628      	mov	r0, r5
 8007628:	f000 fb92 	bl	8007d50 <_sbrk_r>
 800762c:	3001      	adds	r0, #1
 800762e:	d1f2      	bne.n	8007616 <sbrk_aligned+0x22>
 8007630:	e7ef      	b.n	8007612 <sbrk_aligned+0x1e>
 8007632:	bf00      	nop
 8007634:	20004c64 	.word	0x20004c64

08007638 <_malloc_r>:
 8007638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800763c:	1ccd      	adds	r5, r1, #3
 800763e:	f025 0503 	bic.w	r5, r5, #3
 8007642:	3508      	adds	r5, #8
 8007644:	2d0c      	cmp	r5, #12
 8007646:	bf38      	it	cc
 8007648:	250c      	movcc	r5, #12
 800764a:	2d00      	cmp	r5, #0
 800764c:	4606      	mov	r6, r0
 800764e:	db01      	blt.n	8007654 <_malloc_r+0x1c>
 8007650:	42a9      	cmp	r1, r5
 8007652:	d904      	bls.n	800765e <_malloc_r+0x26>
 8007654:	230c      	movs	r3, #12
 8007656:	6033      	str	r3, [r6, #0]
 8007658:	2000      	movs	r0, #0
 800765a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800765e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007734 <_malloc_r+0xfc>
 8007662:	f000 f869 	bl	8007738 <__malloc_lock>
 8007666:	f8d8 3000 	ldr.w	r3, [r8]
 800766a:	461c      	mov	r4, r3
 800766c:	bb44      	cbnz	r4, 80076c0 <_malloc_r+0x88>
 800766e:	4629      	mov	r1, r5
 8007670:	4630      	mov	r0, r6
 8007672:	f7ff ffbf 	bl	80075f4 <sbrk_aligned>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	4604      	mov	r4, r0
 800767a:	d158      	bne.n	800772e <_malloc_r+0xf6>
 800767c:	f8d8 4000 	ldr.w	r4, [r8]
 8007680:	4627      	mov	r7, r4
 8007682:	2f00      	cmp	r7, #0
 8007684:	d143      	bne.n	800770e <_malloc_r+0xd6>
 8007686:	2c00      	cmp	r4, #0
 8007688:	d04b      	beq.n	8007722 <_malloc_r+0xea>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	4639      	mov	r1, r7
 800768e:	4630      	mov	r0, r6
 8007690:	eb04 0903 	add.w	r9, r4, r3
 8007694:	f000 fb5c 	bl	8007d50 <_sbrk_r>
 8007698:	4581      	cmp	r9, r0
 800769a:	d142      	bne.n	8007722 <_malloc_r+0xea>
 800769c:	6821      	ldr	r1, [r4, #0]
 800769e:	1a6d      	subs	r5, r5, r1
 80076a0:	4629      	mov	r1, r5
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ffa6 	bl	80075f4 <sbrk_aligned>
 80076a8:	3001      	adds	r0, #1
 80076aa:	d03a      	beq.n	8007722 <_malloc_r+0xea>
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	442b      	add	r3, r5
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	f8d8 3000 	ldr.w	r3, [r8]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	bb62      	cbnz	r2, 8007714 <_malloc_r+0xdc>
 80076ba:	f8c8 7000 	str.w	r7, [r8]
 80076be:	e00f      	b.n	80076e0 <_malloc_r+0xa8>
 80076c0:	6822      	ldr	r2, [r4, #0]
 80076c2:	1b52      	subs	r2, r2, r5
 80076c4:	d420      	bmi.n	8007708 <_malloc_r+0xd0>
 80076c6:	2a0b      	cmp	r2, #11
 80076c8:	d917      	bls.n	80076fa <_malloc_r+0xc2>
 80076ca:	1961      	adds	r1, r4, r5
 80076cc:	42a3      	cmp	r3, r4
 80076ce:	6025      	str	r5, [r4, #0]
 80076d0:	bf18      	it	ne
 80076d2:	6059      	strne	r1, [r3, #4]
 80076d4:	6863      	ldr	r3, [r4, #4]
 80076d6:	bf08      	it	eq
 80076d8:	f8c8 1000 	streq.w	r1, [r8]
 80076dc:	5162      	str	r2, [r4, r5]
 80076de:	604b      	str	r3, [r1, #4]
 80076e0:	4630      	mov	r0, r6
 80076e2:	f000 f82f 	bl	8007744 <__malloc_unlock>
 80076e6:	f104 000b 	add.w	r0, r4, #11
 80076ea:	1d23      	adds	r3, r4, #4
 80076ec:	f020 0007 	bic.w	r0, r0, #7
 80076f0:	1ac2      	subs	r2, r0, r3
 80076f2:	bf1c      	itt	ne
 80076f4:	1a1b      	subne	r3, r3, r0
 80076f6:	50a3      	strne	r3, [r4, r2]
 80076f8:	e7af      	b.n	800765a <_malloc_r+0x22>
 80076fa:	6862      	ldr	r2, [r4, #4]
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	bf0c      	ite	eq
 8007700:	f8c8 2000 	streq.w	r2, [r8]
 8007704:	605a      	strne	r2, [r3, #4]
 8007706:	e7eb      	b.n	80076e0 <_malloc_r+0xa8>
 8007708:	4623      	mov	r3, r4
 800770a:	6864      	ldr	r4, [r4, #4]
 800770c:	e7ae      	b.n	800766c <_malloc_r+0x34>
 800770e:	463c      	mov	r4, r7
 8007710:	687f      	ldr	r7, [r7, #4]
 8007712:	e7b6      	b.n	8007682 <_malloc_r+0x4a>
 8007714:	461a      	mov	r2, r3
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	42a3      	cmp	r3, r4
 800771a:	d1fb      	bne.n	8007714 <_malloc_r+0xdc>
 800771c:	2300      	movs	r3, #0
 800771e:	6053      	str	r3, [r2, #4]
 8007720:	e7de      	b.n	80076e0 <_malloc_r+0xa8>
 8007722:	230c      	movs	r3, #12
 8007724:	6033      	str	r3, [r6, #0]
 8007726:	4630      	mov	r0, r6
 8007728:	f000 f80c 	bl	8007744 <__malloc_unlock>
 800772c:	e794      	b.n	8007658 <_malloc_r+0x20>
 800772e:	6005      	str	r5, [r0, #0]
 8007730:	e7d6      	b.n	80076e0 <_malloc_r+0xa8>
 8007732:	bf00      	nop
 8007734:	20004c68 	.word	0x20004c68

08007738 <__malloc_lock>:
 8007738:	4801      	ldr	r0, [pc, #4]	@ (8007740 <__malloc_lock+0x8>)
 800773a:	f7ff bf01 	b.w	8007540 <__retarget_lock_acquire_recursive>
 800773e:	bf00      	nop
 8007740:	20004c60 	.word	0x20004c60

08007744 <__malloc_unlock>:
 8007744:	4801      	ldr	r0, [pc, #4]	@ (800774c <__malloc_unlock+0x8>)
 8007746:	f7ff befc 	b.w	8007542 <__retarget_lock_release_recursive>
 800774a:	bf00      	nop
 800774c:	20004c60 	.word	0x20004c60

08007750 <__ssputs_r>:
 8007750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007754:	688e      	ldr	r6, [r1, #8]
 8007756:	461f      	mov	r7, r3
 8007758:	42be      	cmp	r6, r7
 800775a:	680b      	ldr	r3, [r1, #0]
 800775c:	4682      	mov	sl, r0
 800775e:	460c      	mov	r4, r1
 8007760:	4690      	mov	r8, r2
 8007762:	d82d      	bhi.n	80077c0 <__ssputs_r+0x70>
 8007764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007768:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800776c:	d026      	beq.n	80077bc <__ssputs_r+0x6c>
 800776e:	6965      	ldr	r5, [r4, #20]
 8007770:	6909      	ldr	r1, [r1, #16]
 8007772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007776:	eba3 0901 	sub.w	r9, r3, r1
 800777a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800777e:	1c7b      	adds	r3, r7, #1
 8007780:	444b      	add	r3, r9
 8007782:	106d      	asrs	r5, r5, #1
 8007784:	429d      	cmp	r5, r3
 8007786:	bf38      	it	cc
 8007788:	461d      	movcc	r5, r3
 800778a:	0553      	lsls	r3, r2, #21
 800778c:	d527      	bpl.n	80077de <__ssputs_r+0x8e>
 800778e:	4629      	mov	r1, r5
 8007790:	f7ff ff52 	bl	8007638 <_malloc_r>
 8007794:	4606      	mov	r6, r0
 8007796:	b360      	cbz	r0, 80077f2 <__ssputs_r+0xa2>
 8007798:	6921      	ldr	r1, [r4, #16]
 800779a:	464a      	mov	r2, r9
 800779c:	f7ff fed2 	bl	8007544 <memcpy>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	6126      	str	r6, [r4, #16]
 80077ae:	6165      	str	r5, [r4, #20]
 80077b0:	444e      	add	r6, r9
 80077b2:	eba5 0509 	sub.w	r5, r5, r9
 80077b6:	6026      	str	r6, [r4, #0]
 80077b8:	60a5      	str	r5, [r4, #8]
 80077ba:	463e      	mov	r6, r7
 80077bc:	42be      	cmp	r6, r7
 80077be:	d900      	bls.n	80077c2 <__ssputs_r+0x72>
 80077c0:	463e      	mov	r6, r7
 80077c2:	6820      	ldr	r0, [r4, #0]
 80077c4:	4632      	mov	r2, r6
 80077c6:	4641      	mov	r1, r8
 80077c8:	f000 faa8 	bl	8007d1c <memmove>
 80077cc:	68a3      	ldr	r3, [r4, #8]
 80077ce:	1b9b      	subs	r3, r3, r6
 80077d0:	60a3      	str	r3, [r4, #8]
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	4433      	add	r3, r6
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	2000      	movs	r0, #0
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	462a      	mov	r2, r5
 80077e0:	f000 fac6 	bl	8007d70 <_realloc_r>
 80077e4:	4606      	mov	r6, r0
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d1e0      	bne.n	80077ac <__ssputs_r+0x5c>
 80077ea:	6921      	ldr	r1, [r4, #16]
 80077ec:	4650      	mov	r0, sl
 80077ee:	f7ff feb7 	bl	8007560 <_free_r>
 80077f2:	230c      	movs	r3, #12
 80077f4:	f8ca 3000 	str.w	r3, [sl]
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007804:	e7e9      	b.n	80077da <__ssputs_r+0x8a>
	...

08007808 <_svfiprintf_r>:
 8007808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	4698      	mov	r8, r3
 800780e:	898b      	ldrh	r3, [r1, #12]
 8007810:	061b      	lsls	r3, r3, #24
 8007812:	b09d      	sub	sp, #116	@ 0x74
 8007814:	4607      	mov	r7, r0
 8007816:	460d      	mov	r5, r1
 8007818:	4614      	mov	r4, r2
 800781a:	d510      	bpl.n	800783e <_svfiprintf_r+0x36>
 800781c:	690b      	ldr	r3, [r1, #16]
 800781e:	b973      	cbnz	r3, 800783e <_svfiprintf_r+0x36>
 8007820:	2140      	movs	r1, #64	@ 0x40
 8007822:	f7ff ff09 	bl	8007638 <_malloc_r>
 8007826:	6028      	str	r0, [r5, #0]
 8007828:	6128      	str	r0, [r5, #16]
 800782a:	b930      	cbnz	r0, 800783a <_svfiprintf_r+0x32>
 800782c:	230c      	movs	r3, #12
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007834:	b01d      	add	sp, #116	@ 0x74
 8007836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783a:	2340      	movs	r3, #64	@ 0x40
 800783c:	616b      	str	r3, [r5, #20]
 800783e:	2300      	movs	r3, #0
 8007840:	9309      	str	r3, [sp, #36]	@ 0x24
 8007842:	2320      	movs	r3, #32
 8007844:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007848:	f8cd 800c 	str.w	r8, [sp, #12]
 800784c:	2330      	movs	r3, #48	@ 0x30
 800784e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80079ec <_svfiprintf_r+0x1e4>
 8007852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007856:	f04f 0901 	mov.w	r9, #1
 800785a:	4623      	mov	r3, r4
 800785c:	469a      	mov	sl, r3
 800785e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007862:	b10a      	cbz	r2, 8007868 <_svfiprintf_r+0x60>
 8007864:	2a25      	cmp	r2, #37	@ 0x25
 8007866:	d1f9      	bne.n	800785c <_svfiprintf_r+0x54>
 8007868:	ebba 0b04 	subs.w	fp, sl, r4
 800786c:	d00b      	beq.n	8007886 <_svfiprintf_r+0x7e>
 800786e:	465b      	mov	r3, fp
 8007870:	4622      	mov	r2, r4
 8007872:	4629      	mov	r1, r5
 8007874:	4638      	mov	r0, r7
 8007876:	f7ff ff6b 	bl	8007750 <__ssputs_r>
 800787a:	3001      	adds	r0, #1
 800787c:	f000 80a7 	beq.w	80079ce <_svfiprintf_r+0x1c6>
 8007880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007882:	445a      	add	r2, fp
 8007884:	9209      	str	r2, [sp, #36]	@ 0x24
 8007886:	f89a 3000 	ldrb.w	r3, [sl]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 809f 	beq.w	80079ce <_svfiprintf_r+0x1c6>
 8007890:	2300      	movs	r3, #0
 8007892:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800789a:	f10a 0a01 	add.w	sl, sl, #1
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	9307      	str	r3, [sp, #28]
 80078a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80078a8:	4654      	mov	r4, sl
 80078aa:	2205      	movs	r2, #5
 80078ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b0:	484e      	ldr	r0, [pc, #312]	@ (80079ec <_svfiprintf_r+0x1e4>)
 80078b2:	f7f8 fc95 	bl	80001e0 <memchr>
 80078b6:	9a04      	ldr	r2, [sp, #16]
 80078b8:	b9d8      	cbnz	r0, 80078f2 <_svfiprintf_r+0xea>
 80078ba:	06d0      	lsls	r0, r2, #27
 80078bc:	bf44      	itt	mi
 80078be:	2320      	movmi	r3, #32
 80078c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078c4:	0711      	lsls	r1, r2, #28
 80078c6:	bf44      	itt	mi
 80078c8:	232b      	movmi	r3, #43	@ 0x2b
 80078ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078ce:	f89a 3000 	ldrb.w	r3, [sl]
 80078d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80078d4:	d015      	beq.n	8007902 <_svfiprintf_r+0xfa>
 80078d6:	9a07      	ldr	r2, [sp, #28]
 80078d8:	4654      	mov	r4, sl
 80078da:	2000      	movs	r0, #0
 80078dc:	f04f 0c0a 	mov.w	ip, #10
 80078e0:	4621      	mov	r1, r4
 80078e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078e6:	3b30      	subs	r3, #48	@ 0x30
 80078e8:	2b09      	cmp	r3, #9
 80078ea:	d94b      	bls.n	8007984 <_svfiprintf_r+0x17c>
 80078ec:	b1b0      	cbz	r0, 800791c <_svfiprintf_r+0x114>
 80078ee:	9207      	str	r2, [sp, #28]
 80078f0:	e014      	b.n	800791c <_svfiprintf_r+0x114>
 80078f2:	eba0 0308 	sub.w	r3, r0, r8
 80078f6:	fa09 f303 	lsl.w	r3, r9, r3
 80078fa:	4313      	orrs	r3, r2
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	46a2      	mov	sl, r4
 8007900:	e7d2      	b.n	80078a8 <_svfiprintf_r+0xa0>
 8007902:	9b03      	ldr	r3, [sp, #12]
 8007904:	1d19      	adds	r1, r3, #4
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	9103      	str	r1, [sp, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	bfbb      	ittet	lt
 800790e:	425b      	neglt	r3, r3
 8007910:	f042 0202 	orrlt.w	r2, r2, #2
 8007914:	9307      	strge	r3, [sp, #28]
 8007916:	9307      	strlt	r3, [sp, #28]
 8007918:	bfb8      	it	lt
 800791a:	9204      	strlt	r2, [sp, #16]
 800791c:	7823      	ldrb	r3, [r4, #0]
 800791e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007920:	d10a      	bne.n	8007938 <_svfiprintf_r+0x130>
 8007922:	7863      	ldrb	r3, [r4, #1]
 8007924:	2b2a      	cmp	r3, #42	@ 0x2a
 8007926:	d132      	bne.n	800798e <_svfiprintf_r+0x186>
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	1d1a      	adds	r2, r3, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	9203      	str	r2, [sp, #12]
 8007930:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007934:	3402      	adds	r4, #2
 8007936:	9305      	str	r3, [sp, #20]
 8007938:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80079fc <_svfiprintf_r+0x1f4>
 800793c:	7821      	ldrb	r1, [r4, #0]
 800793e:	2203      	movs	r2, #3
 8007940:	4650      	mov	r0, sl
 8007942:	f7f8 fc4d 	bl	80001e0 <memchr>
 8007946:	b138      	cbz	r0, 8007958 <_svfiprintf_r+0x150>
 8007948:	9b04      	ldr	r3, [sp, #16]
 800794a:	eba0 000a 	sub.w	r0, r0, sl
 800794e:	2240      	movs	r2, #64	@ 0x40
 8007950:	4082      	lsls	r2, r0
 8007952:	4313      	orrs	r3, r2
 8007954:	3401      	adds	r4, #1
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795c:	4824      	ldr	r0, [pc, #144]	@ (80079f0 <_svfiprintf_r+0x1e8>)
 800795e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007962:	2206      	movs	r2, #6
 8007964:	f7f8 fc3c 	bl	80001e0 <memchr>
 8007968:	2800      	cmp	r0, #0
 800796a:	d036      	beq.n	80079da <_svfiprintf_r+0x1d2>
 800796c:	4b21      	ldr	r3, [pc, #132]	@ (80079f4 <_svfiprintf_r+0x1ec>)
 800796e:	bb1b      	cbnz	r3, 80079b8 <_svfiprintf_r+0x1b0>
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	3307      	adds	r3, #7
 8007974:	f023 0307 	bic.w	r3, r3, #7
 8007978:	3308      	adds	r3, #8
 800797a:	9303      	str	r3, [sp, #12]
 800797c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800797e:	4433      	add	r3, r6
 8007980:	9309      	str	r3, [sp, #36]	@ 0x24
 8007982:	e76a      	b.n	800785a <_svfiprintf_r+0x52>
 8007984:	fb0c 3202 	mla	r2, ip, r2, r3
 8007988:	460c      	mov	r4, r1
 800798a:	2001      	movs	r0, #1
 800798c:	e7a8      	b.n	80078e0 <_svfiprintf_r+0xd8>
 800798e:	2300      	movs	r3, #0
 8007990:	3401      	adds	r4, #1
 8007992:	9305      	str	r3, [sp, #20]
 8007994:	4619      	mov	r1, r3
 8007996:	f04f 0c0a 	mov.w	ip, #10
 800799a:	4620      	mov	r0, r4
 800799c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079a0:	3a30      	subs	r2, #48	@ 0x30
 80079a2:	2a09      	cmp	r2, #9
 80079a4:	d903      	bls.n	80079ae <_svfiprintf_r+0x1a6>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0c6      	beq.n	8007938 <_svfiprintf_r+0x130>
 80079aa:	9105      	str	r1, [sp, #20]
 80079ac:	e7c4      	b.n	8007938 <_svfiprintf_r+0x130>
 80079ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b2:	4604      	mov	r4, r0
 80079b4:	2301      	movs	r3, #1
 80079b6:	e7f0      	b.n	800799a <_svfiprintf_r+0x192>
 80079b8:	ab03      	add	r3, sp, #12
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	462a      	mov	r2, r5
 80079be:	4b0e      	ldr	r3, [pc, #56]	@ (80079f8 <_svfiprintf_r+0x1f0>)
 80079c0:	a904      	add	r1, sp, #16
 80079c2:	4638      	mov	r0, r7
 80079c4:	f3af 8000 	nop.w
 80079c8:	1c42      	adds	r2, r0, #1
 80079ca:	4606      	mov	r6, r0
 80079cc:	d1d6      	bne.n	800797c <_svfiprintf_r+0x174>
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	065b      	lsls	r3, r3, #25
 80079d2:	f53f af2d 	bmi.w	8007830 <_svfiprintf_r+0x28>
 80079d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079d8:	e72c      	b.n	8007834 <_svfiprintf_r+0x2c>
 80079da:	ab03      	add	r3, sp, #12
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	462a      	mov	r2, r5
 80079e0:	4b05      	ldr	r3, [pc, #20]	@ (80079f8 <_svfiprintf_r+0x1f0>)
 80079e2:	a904      	add	r1, sp, #16
 80079e4:	4638      	mov	r0, r7
 80079e6:	f000 f879 	bl	8007adc <_printf_i>
 80079ea:	e7ed      	b.n	80079c8 <_svfiprintf_r+0x1c0>
 80079ec:	080081b5 	.word	0x080081b5
 80079f0:	080081bf 	.word	0x080081bf
 80079f4:	00000000 	.word	0x00000000
 80079f8:	08007751 	.word	0x08007751
 80079fc:	080081bb 	.word	0x080081bb

08007a00 <_printf_common>:
 8007a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a04:	4616      	mov	r6, r2
 8007a06:	4698      	mov	r8, r3
 8007a08:	688a      	ldr	r2, [r1, #8]
 8007a0a:	690b      	ldr	r3, [r1, #16]
 8007a0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a10:	4293      	cmp	r3, r2
 8007a12:	bfb8      	it	lt
 8007a14:	4613      	movlt	r3, r2
 8007a16:	6033      	str	r3, [r6, #0]
 8007a18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a1c:	4607      	mov	r7, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	b10a      	cbz	r2, 8007a26 <_printf_common+0x26>
 8007a22:	3301      	adds	r3, #1
 8007a24:	6033      	str	r3, [r6, #0]
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	0699      	lsls	r1, r3, #26
 8007a2a:	bf42      	ittt	mi
 8007a2c:	6833      	ldrmi	r3, [r6, #0]
 8007a2e:	3302      	addmi	r3, #2
 8007a30:	6033      	strmi	r3, [r6, #0]
 8007a32:	6825      	ldr	r5, [r4, #0]
 8007a34:	f015 0506 	ands.w	r5, r5, #6
 8007a38:	d106      	bne.n	8007a48 <_printf_common+0x48>
 8007a3a:	f104 0a19 	add.w	sl, r4, #25
 8007a3e:	68e3      	ldr	r3, [r4, #12]
 8007a40:	6832      	ldr	r2, [r6, #0]
 8007a42:	1a9b      	subs	r3, r3, r2
 8007a44:	42ab      	cmp	r3, r5
 8007a46:	dc26      	bgt.n	8007a96 <_printf_common+0x96>
 8007a48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a4c:	6822      	ldr	r2, [r4, #0]
 8007a4e:	3b00      	subs	r3, #0
 8007a50:	bf18      	it	ne
 8007a52:	2301      	movne	r3, #1
 8007a54:	0692      	lsls	r2, r2, #26
 8007a56:	d42b      	bmi.n	8007ab0 <_printf_common+0xb0>
 8007a58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a5c:	4641      	mov	r1, r8
 8007a5e:	4638      	mov	r0, r7
 8007a60:	47c8      	blx	r9
 8007a62:	3001      	adds	r0, #1
 8007a64:	d01e      	beq.n	8007aa4 <_printf_common+0xa4>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	6922      	ldr	r2, [r4, #16]
 8007a6a:	f003 0306 	and.w	r3, r3, #6
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	bf02      	ittt	eq
 8007a72:	68e5      	ldreq	r5, [r4, #12]
 8007a74:	6833      	ldreq	r3, [r6, #0]
 8007a76:	1aed      	subeq	r5, r5, r3
 8007a78:	68a3      	ldr	r3, [r4, #8]
 8007a7a:	bf0c      	ite	eq
 8007a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a80:	2500      	movne	r5, #0
 8007a82:	4293      	cmp	r3, r2
 8007a84:	bfc4      	itt	gt
 8007a86:	1a9b      	subgt	r3, r3, r2
 8007a88:	18ed      	addgt	r5, r5, r3
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	341a      	adds	r4, #26
 8007a8e:	42b5      	cmp	r5, r6
 8007a90:	d11a      	bne.n	8007ac8 <_printf_common+0xc8>
 8007a92:	2000      	movs	r0, #0
 8007a94:	e008      	b.n	8007aa8 <_printf_common+0xa8>
 8007a96:	2301      	movs	r3, #1
 8007a98:	4652      	mov	r2, sl
 8007a9a:	4641      	mov	r1, r8
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	47c8      	blx	r9
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d103      	bne.n	8007aac <_printf_common+0xac>
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aac:	3501      	adds	r5, #1
 8007aae:	e7c6      	b.n	8007a3e <_printf_common+0x3e>
 8007ab0:	18e1      	adds	r1, r4, r3
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	2030      	movs	r0, #48	@ 0x30
 8007ab6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007aba:	4422      	add	r2, r4
 8007abc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ac0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ac4:	3302      	adds	r3, #2
 8007ac6:	e7c7      	b.n	8007a58 <_printf_common+0x58>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4622      	mov	r2, r4
 8007acc:	4641      	mov	r1, r8
 8007ace:	4638      	mov	r0, r7
 8007ad0:	47c8      	blx	r9
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d0e6      	beq.n	8007aa4 <_printf_common+0xa4>
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	e7d9      	b.n	8007a8e <_printf_common+0x8e>
	...

08007adc <_printf_i>:
 8007adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae0:	7e0f      	ldrb	r7, [r1, #24]
 8007ae2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ae4:	2f78      	cmp	r7, #120	@ 0x78
 8007ae6:	4691      	mov	r9, r2
 8007ae8:	4680      	mov	r8, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	469a      	mov	sl, r3
 8007aee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007af2:	d807      	bhi.n	8007b04 <_printf_i+0x28>
 8007af4:	2f62      	cmp	r7, #98	@ 0x62
 8007af6:	d80a      	bhi.n	8007b0e <_printf_i+0x32>
 8007af8:	2f00      	cmp	r7, #0
 8007afa:	f000 80d2 	beq.w	8007ca2 <_printf_i+0x1c6>
 8007afe:	2f58      	cmp	r7, #88	@ 0x58
 8007b00:	f000 80b9 	beq.w	8007c76 <_printf_i+0x19a>
 8007b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b0c:	e03a      	b.n	8007b84 <_printf_i+0xa8>
 8007b0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b12:	2b15      	cmp	r3, #21
 8007b14:	d8f6      	bhi.n	8007b04 <_printf_i+0x28>
 8007b16:	a101      	add	r1, pc, #4	@ (adr r1, 8007b1c <_printf_i+0x40>)
 8007b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b1c:	08007b75 	.word	0x08007b75
 8007b20:	08007b89 	.word	0x08007b89
 8007b24:	08007b05 	.word	0x08007b05
 8007b28:	08007b05 	.word	0x08007b05
 8007b2c:	08007b05 	.word	0x08007b05
 8007b30:	08007b05 	.word	0x08007b05
 8007b34:	08007b89 	.word	0x08007b89
 8007b38:	08007b05 	.word	0x08007b05
 8007b3c:	08007b05 	.word	0x08007b05
 8007b40:	08007b05 	.word	0x08007b05
 8007b44:	08007b05 	.word	0x08007b05
 8007b48:	08007c89 	.word	0x08007c89
 8007b4c:	08007bb3 	.word	0x08007bb3
 8007b50:	08007c43 	.word	0x08007c43
 8007b54:	08007b05 	.word	0x08007b05
 8007b58:	08007b05 	.word	0x08007b05
 8007b5c:	08007cab 	.word	0x08007cab
 8007b60:	08007b05 	.word	0x08007b05
 8007b64:	08007bb3 	.word	0x08007bb3
 8007b68:	08007b05 	.word	0x08007b05
 8007b6c:	08007b05 	.word	0x08007b05
 8007b70:	08007c4b 	.word	0x08007c4b
 8007b74:	6833      	ldr	r3, [r6, #0]
 8007b76:	1d1a      	adds	r2, r3, #4
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6032      	str	r2, [r6, #0]
 8007b7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b84:	2301      	movs	r3, #1
 8007b86:	e09d      	b.n	8007cc4 <_printf_i+0x1e8>
 8007b88:	6833      	ldr	r3, [r6, #0]
 8007b8a:	6820      	ldr	r0, [r4, #0]
 8007b8c:	1d19      	adds	r1, r3, #4
 8007b8e:	6031      	str	r1, [r6, #0]
 8007b90:	0606      	lsls	r6, r0, #24
 8007b92:	d501      	bpl.n	8007b98 <_printf_i+0xbc>
 8007b94:	681d      	ldr	r5, [r3, #0]
 8007b96:	e003      	b.n	8007ba0 <_printf_i+0xc4>
 8007b98:	0645      	lsls	r5, r0, #25
 8007b9a:	d5fb      	bpl.n	8007b94 <_printf_i+0xb8>
 8007b9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	da03      	bge.n	8007bac <_printf_i+0xd0>
 8007ba4:	232d      	movs	r3, #45	@ 0x2d
 8007ba6:	426d      	negs	r5, r5
 8007ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bac:	4859      	ldr	r0, [pc, #356]	@ (8007d14 <_printf_i+0x238>)
 8007bae:	230a      	movs	r3, #10
 8007bb0:	e011      	b.n	8007bd6 <_printf_i+0xfa>
 8007bb2:	6821      	ldr	r1, [r4, #0]
 8007bb4:	6833      	ldr	r3, [r6, #0]
 8007bb6:	0608      	lsls	r0, r1, #24
 8007bb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bbc:	d402      	bmi.n	8007bc4 <_printf_i+0xe8>
 8007bbe:	0649      	lsls	r1, r1, #25
 8007bc0:	bf48      	it	mi
 8007bc2:	b2ad      	uxthmi	r5, r5
 8007bc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bc6:	4853      	ldr	r0, [pc, #332]	@ (8007d14 <_printf_i+0x238>)
 8007bc8:	6033      	str	r3, [r6, #0]
 8007bca:	bf14      	ite	ne
 8007bcc:	230a      	movne	r3, #10
 8007bce:	2308      	moveq	r3, #8
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bd6:	6866      	ldr	r6, [r4, #4]
 8007bd8:	60a6      	str	r6, [r4, #8]
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	bfa2      	ittt	ge
 8007bde:	6821      	ldrge	r1, [r4, #0]
 8007be0:	f021 0104 	bicge.w	r1, r1, #4
 8007be4:	6021      	strge	r1, [r4, #0]
 8007be6:	b90d      	cbnz	r5, 8007bec <_printf_i+0x110>
 8007be8:	2e00      	cmp	r6, #0
 8007bea:	d04b      	beq.n	8007c84 <_printf_i+0x1a8>
 8007bec:	4616      	mov	r6, r2
 8007bee:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bf2:	fb03 5711 	mls	r7, r3, r1, r5
 8007bf6:	5dc7      	ldrb	r7, [r0, r7]
 8007bf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bfc:	462f      	mov	r7, r5
 8007bfe:	42bb      	cmp	r3, r7
 8007c00:	460d      	mov	r5, r1
 8007c02:	d9f4      	bls.n	8007bee <_printf_i+0x112>
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	d10b      	bne.n	8007c20 <_printf_i+0x144>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	07df      	lsls	r7, r3, #31
 8007c0c:	d508      	bpl.n	8007c20 <_printf_i+0x144>
 8007c0e:	6923      	ldr	r3, [r4, #16]
 8007c10:	6861      	ldr	r1, [r4, #4]
 8007c12:	4299      	cmp	r1, r3
 8007c14:	bfde      	ittt	le
 8007c16:	2330      	movle	r3, #48	@ 0x30
 8007c18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c1c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007c20:	1b92      	subs	r2, r2, r6
 8007c22:	6122      	str	r2, [r4, #16]
 8007c24:	f8cd a000 	str.w	sl, [sp]
 8007c28:	464b      	mov	r3, r9
 8007c2a:	aa03      	add	r2, sp, #12
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7ff fee6 	bl	8007a00 <_printf_common>
 8007c34:	3001      	adds	r0, #1
 8007c36:	d14a      	bne.n	8007cce <_printf_i+0x1f2>
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c3c:	b004      	add	sp, #16
 8007c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	f043 0320 	orr.w	r3, r3, #32
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	4833      	ldr	r0, [pc, #204]	@ (8007d18 <_printf_i+0x23c>)
 8007c4c:	2778      	movs	r7, #120	@ 0x78
 8007c4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	6831      	ldr	r1, [r6, #0]
 8007c56:	061f      	lsls	r7, r3, #24
 8007c58:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c5c:	d402      	bmi.n	8007c64 <_printf_i+0x188>
 8007c5e:	065f      	lsls	r7, r3, #25
 8007c60:	bf48      	it	mi
 8007c62:	b2ad      	uxthmi	r5, r5
 8007c64:	6031      	str	r1, [r6, #0]
 8007c66:	07d9      	lsls	r1, r3, #31
 8007c68:	bf44      	itt	mi
 8007c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c6e:	6023      	strmi	r3, [r4, #0]
 8007c70:	b11d      	cbz	r5, 8007c7a <_printf_i+0x19e>
 8007c72:	2310      	movs	r3, #16
 8007c74:	e7ac      	b.n	8007bd0 <_printf_i+0xf4>
 8007c76:	4827      	ldr	r0, [pc, #156]	@ (8007d14 <_printf_i+0x238>)
 8007c78:	e7e9      	b.n	8007c4e <_printf_i+0x172>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	f023 0320 	bic.w	r3, r3, #32
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	e7f6      	b.n	8007c72 <_printf_i+0x196>
 8007c84:	4616      	mov	r6, r2
 8007c86:	e7bd      	b.n	8007c04 <_printf_i+0x128>
 8007c88:	6833      	ldr	r3, [r6, #0]
 8007c8a:	6825      	ldr	r5, [r4, #0]
 8007c8c:	6961      	ldr	r1, [r4, #20]
 8007c8e:	1d18      	adds	r0, r3, #4
 8007c90:	6030      	str	r0, [r6, #0]
 8007c92:	062e      	lsls	r6, r5, #24
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	d501      	bpl.n	8007c9c <_printf_i+0x1c0>
 8007c98:	6019      	str	r1, [r3, #0]
 8007c9a:	e002      	b.n	8007ca2 <_printf_i+0x1c6>
 8007c9c:	0668      	lsls	r0, r5, #25
 8007c9e:	d5fb      	bpl.n	8007c98 <_printf_i+0x1bc>
 8007ca0:	8019      	strh	r1, [r3, #0]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6123      	str	r3, [r4, #16]
 8007ca6:	4616      	mov	r6, r2
 8007ca8:	e7bc      	b.n	8007c24 <_printf_i+0x148>
 8007caa:	6833      	ldr	r3, [r6, #0]
 8007cac:	1d1a      	adds	r2, r3, #4
 8007cae:	6032      	str	r2, [r6, #0]
 8007cb0:	681e      	ldr	r6, [r3, #0]
 8007cb2:	6862      	ldr	r2, [r4, #4]
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f7f8 fa92 	bl	80001e0 <memchr>
 8007cbc:	b108      	cbz	r0, 8007cc2 <_printf_i+0x1e6>
 8007cbe:	1b80      	subs	r0, r0, r6
 8007cc0:	6060      	str	r0, [r4, #4]
 8007cc2:	6863      	ldr	r3, [r4, #4]
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ccc:	e7aa      	b.n	8007c24 <_printf_i+0x148>
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	47d0      	blx	sl
 8007cd8:	3001      	adds	r0, #1
 8007cda:	d0ad      	beq.n	8007c38 <_printf_i+0x15c>
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	079b      	lsls	r3, r3, #30
 8007ce0:	d413      	bmi.n	8007d0a <_printf_i+0x22e>
 8007ce2:	68e0      	ldr	r0, [r4, #12]
 8007ce4:	9b03      	ldr	r3, [sp, #12]
 8007ce6:	4298      	cmp	r0, r3
 8007ce8:	bfb8      	it	lt
 8007cea:	4618      	movlt	r0, r3
 8007cec:	e7a6      	b.n	8007c3c <_printf_i+0x160>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4632      	mov	r2, r6
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	47d0      	blx	sl
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d09d      	beq.n	8007c38 <_printf_i+0x15c>
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	68e3      	ldr	r3, [r4, #12]
 8007d00:	9903      	ldr	r1, [sp, #12]
 8007d02:	1a5b      	subs	r3, r3, r1
 8007d04:	42ab      	cmp	r3, r5
 8007d06:	dcf2      	bgt.n	8007cee <_printf_i+0x212>
 8007d08:	e7eb      	b.n	8007ce2 <_printf_i+0x206>
 8007d0a:	2500      	movs	r5, #0
 8007d0c:	f104 0619 	add.w	r6, r4, #25
 8007d10:	e7f5      	b.n	8007cfe <_printf_i+0x222>
 8007d12:	bf00      	nop
 8007d14:	080081c6 	.word	0x080081c6
 8007d18:	080081d7 	.word	0x080081d7

08007d1c <memmove>:
 8007d1c:	4288      	cmp	r0, r1
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	eb01 0402 	add.w	r4, r1, r2
 8007d24:	d902      	bls.n	8007d2c <memmove+0x10>
 8007d26:	4284      	cmp	r4, r0
 8007d28:	4623      	mov	r3, r4
 8007d2a:	d807      	bhi.n	8007d3c <memmove+0x20>
 8007d2c:	1e43      	subs	r3, r0, #1
 8007d2e:	42a1      	cmp	r1, r4
 8007d30:	d008      	beq.n	8007d44 <memmove+0x28>
 8007d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d3a:	e7f8      	b.n	8007d2e <memmove+0x12>
 8007d3c:	4402      	add	r2, r0
 8007d3e:	4601      	mov	r1, r0
 8007d40:	428a      	cmp	r2, r1
 8007d42:	d100      	bne.n	8007d46 <memmove+0x2a>
 8007d44:	bd10      	pop	{r4, pc}
 8007d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d4e:	e7f7      	b.n	8007d40 <memmove+0x24>

08007d50 <_sbrk_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d06      	ldr	r5, [pc, #24]	@ (8007d6c <_sbrk_r+0x1c>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	f7f9 f9e4 	bl	8001128 <_sbrk>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_sbrk_r+0x1a>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_sbrk_r+0x1a>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	20004c5c 	.word	0x20004c5c

08007d70 <_realloc_r>:
 8007d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d74:	4680      	mov	r8, r0
 8007d76:	4615      	mov	r5, r2
 8007d78:	460c      	mov	r4, r1
 8007d7a:	b921      	cbnz	r1, 8007d86 <_realloc_r+0x16>
 8007d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	4611      	mov	r1, r2
 8007d82:	f7ff bc59 	b.w	8007638 <_malloc_r>
 8007d86:	b92a      	cbnz	r2, 8007d94 <_realloc_r+0x24>
 8007d88:	f7ff fbea 	bl	8007560 <_free_r>
 8007d8c:	2400      	movs	r4, #0
 8007d8e:	4620      	mov	r0, r4
 8007d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d94:	f000 f81a 	bl	8007dcc <_malloc_usable_size_r>
 8007d98:	4285      	cmp	r5, r0
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	d802      	bhi.n	8007da4 <_realloc_r+0x34>
 8007d9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007da2:	d8f4      	bhi.n	8007d8e <_realloc_r+0x1e>
 8007da4:	4629      	mov	r1, r5
 8007da6:	4640      	mov	r0, r8
 8007da8:	f7ff fc46 	bl	8007638 <_malloc_r>
 8007dac:	4607      	mov	r7, r0
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d0ec      	beq.n	8007d8c <_realloc_r+0x1c>
 8007db2:	42b5      	cmp	r5, r6
 8007db4:	462a      	mov	r2, r5
 8007db6:	4621      	mov	r1, r4
 8007db8:	bf28      	it	cs
 8007dba:	4632      	movcs	r2, r6
 8007dbc:	f7ff fbc2 	bl	8007544 <memcpy>
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	f7ff fbcc 	bl	8007560 <_free_r>
 8007dc8:	463c      	mov	r4, r7
 8007dca:	e7e0      	b.n	8007d8e <_realloc_r+0x1e>

08007dcc <_malloc_usable_size_r>:
 8007dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd0:	1f18      	subs	r0, r3, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	bfbc      	itt	lt
 8007dd6:	580b      	ldrlt	r3, [r1, r0]
 8007dd8:	18c0      	addlt	r0, r0, r3
 8007dda:	4770      	bx	lr

08007ddc <_init>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr

08007de8 <_fini>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	bf00      	nop
 8007dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dee:	bc08      	pop	{r3}
 8007df0:	469e      	mov	lr, r3
 8007df2:	4770      	bx	lr
