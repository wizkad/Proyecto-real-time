
joseba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e14  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08007fb4  08007fb4  00008fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008388  08008388  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  08008388  08008388  00009388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008390  08008390  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008390  08008390  00009390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008394  08008394  00009394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08008398  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000064  080083fc  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c48  080083fc  0000ac48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b19  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000351d  00000000  00000000  00021bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  000250d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107e  00000000  00000000  00026600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004008  00000000  00000000  0002767e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001627a  00000000  00000000  0002b686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009926b  00000000  00000000  00041900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dab6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f4c  00000000  00000000  000dabb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e0afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f9c 	.word	0x08007f9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08007f9c 	.word	0x08007f9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe74 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f8ac 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f9dc 	bl	8000938 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f9b0 	bl	80008e4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000584:	f000 f910 	bl	80007a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000588:	f000 f95e 	bl	8000848 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058c:	f003 fbd8 	bl	8003d40 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex */
  MutexHandle = osMutexNew(&Mutex_attributes);
 8000590:	4832      	ldr	r0, [pc, #200]	@ (800065c <main+0xec>)
 8000592:	f003 fdb2 	bl	80040fa <osMutexNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a31      	ldr	r2, [pc, #196]	@ (8000660 <main+0xf0>)
 800059a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of frecuenciaUltrasonido */
  frecuenciaUltrasonidoHandle = osMessageQueueNew (16, sizeof(uint16_t), &frecuenciaUltrasonido_attributes);
 800059c:	4a31      	ldr	r2, [pc, #196]	@ (8000664 <main+0xf4>)
 800059e:	2102      	movs	r1, #2
 80005a0:	2010      	movs	r0, #16
 80005a2:	f003 fe30 	bl	8004206 <osMessageQueueNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a2f      	ldr	r2, [pc, #188]	@ (8000668 <main+0xf8>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of frecuenciaConstante */
  frecuenciaConstanteHandle = osMessageQueueNew (16, sizeof(uint16_t), &frecuenciaConstante_attributes);
 80005ac:	4a2f      	ldr	r2, [pc, #188]	@ (800066c <main+0xfc>)
 80005ae:	2102      	movs	r1, #2
 80005b0:	2010      	movs	r0, #16
 80005b2:	f003 fe28 	bl	8004206 <osMessageQueueNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000670 <main+0x100>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of frecuenciaLog */
  frecuenciaLogHandle = osMessageQueueNew (16, sizeof(uint16_t), &frecuenciaLog_attributes);
 80005bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000674 <main+0x104>)
 80005be:	2102      	movs	r1, #2
 80005c0:	2010      	movs	r0, #16
 80005c2:	f003 fe20 	bl	8004206 <osMessageQueueNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000678 <main+0x108>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of MandarUARTqueue */
  MandarUARTqueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &MandarUARTqueue_attributes);
 80005cc:	4a2b      	ldr	r2, [pc, #172]	@ (800067c <main+0x10c>)
 80005ce:	2102      	movs	r1, #2
 80005d0:	2010      	movs	r0, #16
 80005d2:	f003 fe18 	bl	8004206 <osMessageQueueNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a29      	ldr	r2, [pc, #164]	@ (8000680 <main+0x110>)
 80005da:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005dc:	4a29      	ldr	r2, [pc, #164]	@ (8000684 <main+0x114>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4829      	ldr	r0, [pc, #164]	@ (8000688 <main+0x118>)
 80005e2:	f003 fbf7 	bl	8003dd4 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a28      	ldr	r2, [pc, #160]	@ (800068c <main+0x11c>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of LecturaPin */
  LecturaPinHandle = osThreadNew(LecturaPines, NULL, &LecturaPin_attributes);
 80005ec:	4a28      	ldr	r2, [pc, #160]	@ (8000690 <main+0x120>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4828      	ldr	r0, [pc, #160]	@ (8000694 <main+0x124>)
 80005f2:	f003 fbef 	bl	8003dd4 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a27      	ldr	r2, [pc, #156]	@ (8000698 <main+0x128>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of ultrasound */
  ultrasoundHandle = osThreadNew(Ultrasound, NULL, &ultrasound_attributes);
 80005fc:	4a27      	ldr	r2, [pc, #156]	@ (800069c <main+0x12c>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4827      	ldr	r0, [pc, #156]	@ (80006a0 <main+0x130>)
 8000602:	f003 fbe7 	bl	8003dd4 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a26      	ldr	r2, [pc, #152]	@ (80006a4 <main+0x134>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of Buzzer */
  BuzzerHandle = osThreadNew(BuzzerA, NULL, &Buzzer_attributes);
 800060c:	4a26      	ldr	r2, [pc, #152]	@ (80006a8 <main+0x138>)
 800060e:	2100      	movs	r1, #0
 8000610:	4826      	ldr	r0, [pc, #152]	@ (80006ac <main+0x13c>)
 8000612:	f003 fbdf 	bl	8003dd4 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a25      	ldr	r2, [pc, #148]	@ (80006b0 <main+0x140>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of RecibirUART */
  RecibirUARTHandle = osThreadNew(Recibir_UART, NULL, &RecibirUART_attributes);
 800061c:	4a25      	ldr	r2, [pc, #148]	@ (80006b4 <main+0x144>)
 800061e:	2100      	movs	r1, #0
 8000620:	4825      	ldr	r0, [pc, #148]	@ (80006b8 <main+0x148>)
 8000622:	f003 fbd7 	bl	8003dd4 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a24      	ldr	r2, [pc, #144]	@ (80006bc <main+0x14c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of MandarUART */
  MandarUARTHandle = osThreadNew(Mandar_UART, NULL, &MandarUART_attributes);
 800062c:	4a24      	ldr	r2, [pc, #144]	@ (80006c0 <main+0x150>)
 800062e:	2100      	movs	r1, #0
 8000630:	4824      	ldr	r0, [pc, #144]	@ (80006c4 <main+0x154>)
 8000632:	f003 fbcf 	bl	8003dd4 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a23      	ldr	r2, [pc, #140]	@ (80006c8 <main+0x158>)
 800063a:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of PinPolling */
  PinPollingHandle = osEventFlagsNew(&PinPolling_attributes);
 800063c:	4823      	ldr	r0, [pc, #140]	@ (80006cc <main+0x15c>)
 800063e:	f003 fc76 	bl	8003f2e <osEventFlagsNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <main+0x160>)
 8000646:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  osEventFlagsSet(PinPollingHandle,0x0002U);
 8000648:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <main+0x160>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2102      	movs	r1, #2
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fcac 	bl	8003fac <osEventFlagsSet>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000654:	f003 fb98 	bl	8003d88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <main+0xe8>
 800065c:	0800821c 	.word	0x0800821c
 8000660:	20000180 	.word	0x20000180
 8000664:	080081bc 	.word	0x080081bc
 8000668:	20000170 	.word	0x20000170
 800066c:	080081d4 	.word	0x080081d4
 8000670:	20000174 	.word	0x20000174
 8000674:	080081ec 	.word	0x080081ec
 8000678:	20000178 	.word	0x20000178
 800067c:	08008204 	.word	0x08008204
 8000680:	2000017c 	.word	0x2000017c
 8000684:	080080e4 	.word	0x080080e4
 8000688:	08000d61 	.word	0x08000d61
 800068c:	20000158 	.word	0x20000158
 8000690:	08008108 	.word	0x08008108
 8000694:	08000d71 	.word	0x08000d71
 8000698:	2000015c 	.word	0x2000015c
 800069c:	0800812c 	.word	0x0800812c
 80006a0:	08000e01 	.word	0x08000e01
 80006a4:	20000160 	.word	0x20000160
 80006a8:	08008150 	.word	0x08008150
 80006ac:	08000e51 	.word	0x08000e51
 80006b0:	20000164 	.word	0x20000164
 80006b4:	08008174 	.word	0x08008174
 80006b8:	08000ef5 	.word	0x08000ef5
 80006bc:	20000168 	.word	0x20000168
 80006c0:	08008198 	.word	0x08008198
 80006c4:	08000f19 	.word	0x08000f19
 80006c8:	2000016c 	.word	0x2000016c
 80006cc:	0800822c 	.word	0x0800822c
 80006d0:	20000184 	.word	0x20000184

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	@ 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	@ 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 ffc8 	bl	8007678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	@ (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	@ (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	@ 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	@ (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800074c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074e:	2304      	movs	r3, #4
 8000750:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000752:	2304      	movs	r3, #4
 8000754:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f966 	bl	8001a2c <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000766:	f000 fbfb 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fbc8 	bl	8001f1c <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000792:	f000 fbe5 	bl	8000f60 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	@ 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_TIM1_Init+0x98>)
 80007c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000844 <MX_TIM1_Init+0x9c>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <MX_TIM1_Init+0x98>)
 80007cc:	2254      	movs	r2, #84	@ 0x54
 80007ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_TIM1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <MX_TIM1_Init+0x98>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_TIM1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e2:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_TIM1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_TIM1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ee:	4814      	ldr	r0, [pc, #80]	@ (8000840 <MX_TIM1_Init+0x98>)
 80007f0:	f001 fdb4 	bl	800235c <HAL_TIM_Base_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80007fa:	f000 fbb1 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000802:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4619      	mov	r1, r3
 800080a:	480d      	ldr	r0, [pc, #52]	@ (8000840 <MX_TIM1_Init+0x98>)
 800080c:	f001 ff77 	bl	80026fe <HAL_TIM_ConfigClockSource>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000816:	f000 fba3 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	@ (8000840 <MX_TIM1_Init+0x98>)
 8000828:	f002 f97e 	bl	8002b28 <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000832:	f000 fb95 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000080 	.word	0x20000080
 8000844:	40010000 	.word	0x40010000

08000848 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <MX_TIM3_Init+0x94>)
 8000866:	4a1e      	ldr	r2, [pc, #120]	@ (80008e0 <MX_TIM3_Init+0x98>)
 8000868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <MX_TIM3_Init+0x94>)
 800086c:	2229      	movs	r2, #41	@ 0x29
 800086e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_TIM3_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <MX_TIM3_Init+0x94>)
 8000878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800087c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_TIM3_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_TIM3_Init+0x94>)
 8000886:	2280      	movs	r2, #128	@ 0x80
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800088a:	4814      	ldr	r0, [pc, #80]	@ (80008dc <MX_TIM3_Init+0x94>)
 800088c:	f001 fd66 	bl	800235c <HAL_TIM_Base_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 fb63 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	4619      	mov	r1, r3
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_TIM3_Init+0x94>)
 80008a8:	f001 ff29 	bl	80026fe <HAL_TIM_ConfigClockSource>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fb55 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_TIM3_Init+0x94>)
 80008c4:	f002 f930 	bl	8002b28 <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008ce:	f000 fb47 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000c8 	.word	0x200000c8
 80008e0:	40000400 	.word	0x40000400

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_USART2_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 800091c:	f002 f986 	bl	8002c2c <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 fb1b 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000110 	.word	0x20000110
 8000934:	40004400 	.word	0x40004400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b3d      	ldr	r3, [pc, #244]	@ (8000a48 <MX_GPIO_Init+0x110>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a3c      	ldr	r2, [pc, #240]	@ (8000a48 <MX_GPIO_Init+0x110>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a48 <MX_GPIO_Init+0x110>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b36      	ldr	r3, [pc, #216]	@ (8000a48 <MX_GPIO_Init+0x110>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a35      	ldr	r2, [pc, #212]	@ (8000a48 <MX_GPIO_Init+0x110>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b33      	ldr	r3, [pc, #204]	@ (8000a48 <MX_GPIO_Init+0x110>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a48 <MX_GPIO_Init+0x110>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a48 <MX_GPIO_Init+0x110>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <MX_GPIO_Init+0x110>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b28      	ldr	r3, [pc, #160]	@ (8000a48 <MX_GPIO_Init+0x110>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a27      	ldr	r2, [pc, #156]	@ (8000a48 <MX_GPIO_Init+0x110>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b25      	ldr	r3, [pc, #148]	@ (8000a48 <MX_GPIO_Init+0x110>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	21a0      	movs	r1, #160	@ 0xa0
 80009c2:	4822      	ldr	r0, [pc, #136]	@ (8000a4c <MX_GPIO_Init+0x114>)
 80009c4:	f000 fffe 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_ultrasonido_GPIO_Port, Trigger_ultrasonido_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2110      	movs	r1, #16
 80009cc:	4820      	ldr	r0, [pc, #128]	@ (8000a50 <MX_GPIO_Init+0x118>)
 80009ce:	f000 fff9 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	481a      	ldr	r0, [pc, #104]	@ (8000a54 <MX_GPIO_Init+0x11c>)
 80009ea:	f000 fe4f 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 80009ee:	23a0      	movs	r3, #160	@ 0xa0
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4811      	ldr	r0, [pc, #68]	@ (8000a4c <MX_GPIO_Init+0x114>)
 8000a06:	f000 fe41 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_ultrasonido_Pin */
  GPIO_InitStruct.Pin = Echo_ultrasonido_Pin;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_ultrasonido_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <MX_GPIO_Init+0x118>)
 8000a1e:	f000 fe35 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_ultrasonido_Pin */
  GPIO_InitStruct.Pin = Trigger_ultrasonido_Pin;
 8000a22:	2310      	movs	r3, #16
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_ultrasonido_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_GPIO_Init+0x118>)
 8000a3a:	f000 fe27 	bl	800168c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	@ 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40020800 	.word	0x40020800

08000a58 <TiempoaFrecuencia>:
uint8_t EntradaBuzzer = 1;         // Controla la entrada del buzzer
uint16_t FrecuenciaMandar;  // Frecuencia(Hz)


//Funcion de generacion de frecuencias para el buzzer
uint32_t TiempoaFrecuencia(uint32_t us) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
    // Limitar el tiempo a los valores mínimos y máximos
    if (us < TIME_MIN_US) us = TIME_MIN_US;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b41      	cmp	r3, #65	@ 0x41
 8000a64:	d801      	bhi.n	8000a6a <TiempoaFrecuencia+0x12>
 8000a66:	2342      	movs	r3, #66	@ 0x42
 8000a68:	607b      	str	r3, [r7, #4]
    if (us > TIME_MAX_US) us = TIME_MAX_US;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2bc8      	cmp	r3, #200	@ 0xc8
 8000a6e:	d901      	bls.n	8000a74 <TiempoaFrecuencia+0x1c>
 8000a70:	23c8      	movs	r3, #200	@ 0xc8
 8000a72:	607b      	str	r3, [r7, #4]

    // Aplicar la fórmula de interpolación lineal
    uint32_t frecuencia = FREQ_MIN_HZ + (us - TIME_MIN_US) * (FREQ_MAX_HZ - FREQ_MIN_HZ) / (TIME_MAX_US - TIME_MIN_US);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000a7a:	fb02 f303 	mul.w	r3, r2, r3
 8000a7e:	f5a3 3341 	sub.w	r3, r3, #197632	@ 0x30400
 8000a82:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8000a86:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <TiempoaFrecuencia+0x4c>)
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000a92:	60fb      	str	r3, [r7, #12]

    return frecuencia;
 8000a94:	68fb      	ldr	r3, [r7, #12]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	07a44c6b 	.word	0x07a44c6b

08000aa8 <delay_us>:


void delay_us(uint16_t us)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim1);
 8000ab2:	480b      	ldr	r0, [pc, #44]	@ (8000ae0 <delay_us+0x38>)
 8000ab4:	f001 fca2 	bl	80023fc <HAL_TIM_Base_Start_IT>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <delay_us+0x38>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
    while(timcounter<us);
 8000ac0:	bf00      	nop
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <delay_us+0x3c>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	88fa      	ldrh	r2, [r7, #6]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8fa      	bhi.n	8000ac2 <delay_us+0x1a>

    HAL_TIM_Base_Stop_IT(&htim1);
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <delay_us+0x38>)
 8000ace:	f001 fcf7 	bl	80024c0 <HAL_TIM_Base_Stop_IT>
    timcounter = 0;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <delay_us+0x3c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	801a      	strh	r2, [r3, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000080 	.word	0x20000080
 8000ae4:	20000188 	.word	0x20000188

08000ae8 <HAL_TIM_PeriodElapsedCallback>:

/*Callback TIM*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d106      	bne.n	8000b08 <HAL_TIM_PeriodElapsedCallback+0x20>
	timcounter++;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b04:	801a      	strh	r2, [r3, #0]
	}

	else {
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
	}
}
 8000b06:	e003      	b.n	8000b10 <HAL_TIM_PeriodElapsedCallback+0x28>
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b0c:	f000 ff73 	bl	80019f6 <HAL_GPIO_TogglePin>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	20000188 	.word	0x20000188
 8000b20:	40020000 	.word	0x40020000

08000b24 <HAL_UART_RxCpltCallback>:

//Callback USART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a1a      	ldr	r2, [pc, #104]	@ (8000b9c <HAL_UART_RxCpltCallback+0x78>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12e      	bne.n	8000b94 <HAL_UART_RxCpltCallback+0x70>
	        char rxChar = rxBuffer[0];
 8000b36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <HAL_UART_RxCpltCallback+0x7c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	73fb      	strb	r3, [r7, #15]

	        if (rxChar == '\r') {
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2b0d      	cmp	r3, #13
 8000b40:	d111      	bne.n	8000b66 <HAL_UART_RxCpltCallback+0x42>
	            //Añade el fin de string
	            Buffer[cmdIndice] = '\0';
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x80>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x84>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	5499      	strb	r1, [r3, r2]

	            // Procesa el comando
	            UARTCommand(Buffer);
 8000b4e:	4816      	ldr	r0, [pc, #88]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x84>)
 8000b50:	f000 f82e 	bl	8000bb0 <UARTCommand>

	            // Reinicia el indice
	            cmdIndice = 0;
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x80>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	801a      	strh	r2, [r3, #0]
	            memset(Buffer, 0, BUFFER_SIZE);
 8000b5a:	2214      	movs	r2, #20
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4812      	ldr	r0, [pc, #72]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x84>)
 8000b60:	f006 fd8a 	bl	8007678 <memset>
 8000b64:	e011      	b.n	8000b8a <HAL_UART_RxCpltCallback+0x66>
	        } else if (cmdIndice < BUFFER_SIZE - 1) {
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x80>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	2b12      	cmp	r3, #18
 8000b6c:	d80a      	bhi.n	8000b84 <HAL_UART_RxCpltCallback+0x60>
	            // Añade el char al siguiente espacio
	            Buffer[cmdIndice++] = rxChar;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x80>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	b291      	uxth	r1, r2
 8000b76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x80>)
 8000b78:	8011      	strh	r1, [r2, #0]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x84>)
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	5453      	strb	r3, [r2, r1]
 8000b82:	e002      	b.n	8000b8a <HAL_UART_RxCpltCallback+0x66>
	        } else {
	            // Buffer lleno
	            cmdIndice = 0;  // Reset the buffer
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x80>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	801a      	strh	r2, [r3, #0]
	        }

	        // Reinicia la conexion
	        HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4904      	ldr	r1, [pc, #16]	@ (8000ba0 <HAL_UART_RxCpltCallback+0x7c>)
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <HAL_UART_RxCpltCallback+0x88>)
 8000b90:	f002 f927 	bl	8002de2 <HAL_UART_Receive_IT>
	    }
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	2000018c 	.word	0x2000018c
 8000ba4:	200001a4 	.word	0x200001a4
 8000ba8:	20000190 	.word	0x20000190
 8000bac:	20000110 	.word	0x20000110

08000bb0 <UARTCommand>:

void UARTCommand(char *comando)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	@ 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	char buffer[30];
	uint16_t frecuencia;
	 if (strncmp(comando, "SRC", 3) == 0) {
 8000bb8:	2203      	movs	r2, #3
 8000bba:	495c      	ldr	r1, [pc, #368]	@ (8000d2c <UARTCommand+0x17c>)
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f006 fd63 	bl	8007688 <strncmp>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d122      	bne.n	8000c0e <UARTCommand+0x5e>
		 //Comando recibido: SRC
		 EntradaBuzzer = atoi(comando + 4);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3304      	adds	r3, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f006 fcab 	bl	8007528 <atoi>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b56      	ldr	r3, [pc, #344]	@ (8000d30 <UARTCommand+0x180>)
 8000bd8:	701a      	strb	r2, [r3, #0]
		 memset(buffer, 0, sizeof(buffer));
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	221e      	movs	r2, #30
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f006 fd48 	bl	8007678 <memset>
		 sprintf(buffer,"Entrada cambiada: %d",EntradaBuzzer);
 8000be8:	4b51      	ldr	r3, [pc, #324]	@ (8000d30 <UARTCommand+0x180>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4950      	ldr	r1, [pc, #320]	@ (8000d34 <UARTCommand+0x184>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f006 fd1f 	bl	8007638 <siprintf>
		 osMessageQueuePut(MandarUARTqueueHandle,&buffer,8U,osWaitForever);
 8000bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8000d38 <UARTCommand+0x188>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	f107 0110 	add.w	r1, r7, #16
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c06:	2208      	movs	r2, #8
 8000c08:	f003 fb70 	bl	80042ec <osMessageQueuePut>
		 memset(buffer, 0, sizeof(buffer));
		 sprintf(buffer,"Comando no valido\n");
		 //HAL_UART_Transmit(&huart2,(uint8_t*)buffer,sizeof(buffer), 10);
		 osMessageQueuePut(MandarUARTqueueHandle,&buffer,0U,0U);
	 }
}
 8000c0c:	e08a      	b.n	8000d24 <UARTCommand+0x174>
	 } else if (strncmp(comando, "FREQ", 4) == 0) {
 8000c0e:	2204      	movs	r2, #4
 8000c10:	494a      	ldr	r1, [pc, #296]	@ (8000d3c <UARTCommand+0x18c>)
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f006 fd38 	bl	8007688 <strncmp>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14c      	bne.n	8000cb8 <UARTCommand+0x108>
		 frecuencia = atoi(comando + 5);  // Extrae la frecuencia
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3305      	adds	r3, #5
 8000c22:	4618      	mov	r0, r3
 8000c24:	f006 fc80 	bl	8007528 <atoi>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	81fb      	strh	r3, [r7, #14]
		 EntradaBuzzer = 2;
 8000c2e:	4b40      	ldr	r3, [pc, #256]	@ (8000d30 <UARTCommand+0x180>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	701a      	strb	r2, [r3, #0]
		 if((frecuencia>=2000) && (frecuencia<=5000)){
 8000c34:	89fb      	ldrh	r3, [r7, #14]
 8000c36:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000c3a:	d327      	bcc.n	8000c8c <UARTCommand+0xdc>
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d822      	bhi.n	8000c8c <UARTCommand+0xdc>
			 FrecuenciaBuzzer = frecuencia;
 8000c46:	89fa      	ldrh	r2, [r7, #14]
 8000c48:	4b3d      	ldr	r3, [pc, #244]	@ (8000d40 <UARTCommand+0x190>)
 8000c4a:	801a      	strh	r2, [r3, #0]
			 memset(buffer, 0, sizeof(buffer));
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	221e      	movs	r2, #30
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f006 fd0f 	bl	8007678 <memset>
             sprintf(buffer,"Frecuencia: %d\n", frecuencia);
 8000c5a:	89fb      	ldrh	r3, [r7, #14]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4938      	ldr	r1, [pc, #224]	@ (8000d44 <UARTCommand+0x194>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f006 fce7 	bl	8007638 <siprintf>
			 osMessageQueuePut(MandarUARTqueueHandle,&buffer,0U,0U);
 8000c6a:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <UARTCommand+0x188>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	f107 0110 	add.w	r1, r7, #16
 8000c72:	2300      	movs	r3, #0
 8000c74:	2200      	movs	r2, #0
 8000c76:	f003 fb39 	bl	80042ec <osMessageQueuePut>
			 osMessageQueuePut(frecuenciaConstanteHandle,&frecuencia,0U,0U);
 8000c7a:	4b33      	ldr	r3, [pc, #204]	@ (8000d48 <UARTCommand+0x198>)
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	f107 010e 	add.w	r1, r7, #14
 8000c82:	2300      	movs	r3, #0
 8000c84:	2200      	movs	r2, #0
 8000c86:	f003 fb31 	bl	80042ec <osMessageQueuePut>
}
 8000c8a:	e04b      	b.n	8000d24 <UARTCommand+0x174>
			 memset(buffer, 0, sizeof(buffer));
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	221e      	movs	r2, #30
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f006 fcef 	bl	8007678 <memset>
			 sprintf(buffer,"Frecuencia no valida\n");
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	492b      	ldr	r1, [pc, #172]	@ (8000d4c <UARTCommand+0x19c>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f006 fcc9 	bl	8007638 <siprintf>
			 osMessageQueuePut(MandarUARTqueueHandle,&buffer,0U,0U);
 8000ca6:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <UARTCommand+0x188>)
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	f107 0110 	add.w	r1, r7, #16
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f003 fb1b 	bl	80042ec <osMessageQueuePut>
}
 8000cb6:	e035      	b.n	8000d24 <UARTCommand+0x174>
		 else if (strncmp(comando, "frecuencia", 10) == 0) {
 8000cb8:	220a      	movs	r2, #10
 8000cba:	4925      	ldr	r1, [pc, #148]	@ (8000d50 <UARTCommand+0x1a0>)
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f006 fce3 	bl	8007688 <strncmp>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d118      	bne.n	8000cfa <UARTCommand+0x14a>
			 memset(buffer, 0, sizeof(buffer));
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	221e      	movs	r2, #30
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f006 fcd1 	bl	8007678 <memset>
			 sprintf(buffer,"#%d#", FrecuenciaMandar);
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <UARTCommand+0x1a4>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	491d      	ldr	r1, [pc, #116]	@ (8000d58 <UARTCommand+0x1a8>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 fca8 	bl	8007638 <siprintf>
			 osMessageQueuePut(MandarUARTqueueHandle,&buffer,0U,0U);
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <UARTCommand+0x188>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	f107 0110 	add.w	r1, r7, #16
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f003 fafa 	bl	80042ec <osMessageQueuePut>
}
 8000cf8:	e014      	b.n	8000d24 <UARTCommand+0x174>
		 memset(buffer, 0, sizeof(buffer));
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	221e      	movs	r2, #30
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 fcb8 	bl	8007678 <memset>
		 sprintf(buffer,"Comando no valido\n");
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4913      	ldr	r1, [pc, #76]	@ (8000d5c <UARTCommand+0x1ac>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f006 fc92 	bl	8007638 <siprintf>
		 osMessageQueuePut(MandarUARTqueueHandle,&buffer,0U,0U);
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <UARTCommand+0x188>)
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	f107 0110 	add.w	r1, r7, #16
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f003 fae4 	bl	80042ec <osMessageQueuePut>
}
 8000d24:	bf00      	nop
 8000d26:	3730      	adds	r7, #48	@ 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	08008058 	.word	0x08008058
 8000d30:	20000002 	.word	0x20000002
 8000d34:	0800805c 	.word	0x0800805c
 8000d38:	2000017c 	.word	0x2000017c
 8000d3c:	08008074 	.word	0x08008074
 8000d40:	20000000 	.word	0x20000000
 8000d44:	0800807c 	.word	0x0800807c
 8000d48:	20000174 	.word	0x20000174
 8000d4c:	0800808c 	.word	0x0800808c
 8000d50:	080080a4 	.word	0x080080a4
 8000d54:	200001a6 	.word	0x200001a6
 8000d58:	080080b0 	.word	0x080080b0
 8000d5c:	080080b8 	.word	0x080080b8

08000d60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f003 f8c5 	bl	8003ef8 <osDelay>
 8000d6e:	e7fb      	b.n	8000d68 <StartDefaultTask+0x8>

08000d70 <LecturaPines>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LecturaPines */
void LecturaPines(void *argument)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LecturaPines */
	uint8_t pulso;
	uint8_t PinEstado = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	PinEstado = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	481a      	ldr	r0, [pc, #104]	@ (8000de8 <LecturaPines+0x78>)
 8000d80:	f000 fe08 	bl	8001994 <HAL_GPIO_ReadPin>
 8000d84:	4603      	mov	r3, r0
 8000d86:	73bb      	strb	r3, [r7, #14]
	  if(PinEstado == 1){
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d107      	bne.n	8000d9e <LecturaPines+0x2e>
		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <LecturaPines+0x7c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_TIM_Base_Start_IT(&htim1);
 8000d96:	4815      	ldr	r0, [pc, #84]	@ (8000dec <LecturaPines+0x7c>)
 8000d98:	f001 fb30 	bl	80023fc <HAL_TIM_Base_Start_IT>
 8000d9c:	e00b      	b.n	8000db6 <LecturaPines+0x46>
	  }else{
	  	  HAL_TIM_Base_Stop_IT(&htim1);
 8000d9e:	4813      	ldr	r0, [pc, #76]	@ (8000dec <LecturaPines+0x7c>)
 8000da0:	f001 fb8e 	bl	80024c0 <HAL_TIM_Base_Stop_IT>
	  	  pulso = timcounter;
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <LecturaPines+0x80>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	73fb      	strb	r3, [r7, #15]
	  	  osEventFlagsSet(PinPollingHandle,0x0002U);
 8000daa:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <LecturaPines+0x84>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2102      	movs	r1, #2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 f8fb 	bl	8003fac <osEventFlagsSet>
	  }
	  if(pulso != 0){
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d011      	beq.n	8000de0 <LecturaPines+0x70>
		  uint16_t frecuencia = TiempoaFrecuencia(pulso);
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fe4a 	bl	8000a58 <TiempoaFrecuencia>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	81bb      	strh	r3, [r7, #12]
		  FrecuenciaMandar = frecuencia;
 8000dca:	89ba      	ldrh	r2, [r7, #12]
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <LecturaPines+0x88>)
 8000dce:	801a      	strh	r2, [r3, #0]
		  osMessageQueuePut(frecuenciaUltrasonidoHandle,&frecuencia,0,0);
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <LecturaPines+0x8c>)
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	f107 010c 	add.w	r1, r7, #12
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f003 fa86 	bl	80042ec <osMessageQueuePut>
	  }
	  osDelay(1);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f003 f889 	bl	8003ef8 <osDelay>
	PinEstado = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 8000de6:	e7c9      	b.n	8000d7c <LecturaPines+0xc>
 8000de8:	40020400 	.word	0x40020400
 8000dec:	20000080 	.word	0x20000080
 8000df0:	20000188 	.word	0x20000188
 8000df4:	20000184 	.word	0x20000184
 8000df8:	200001a6 	.word	0x200001a6
 8000dfc:	20000170 	.word	0x20000170

08000e00 <Ultrasound>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ultrasound */
void Ultrasound(void *argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ultrasound */
	/* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(PinPollingHandle,0x0002U,0,osWaitForever);
 8000e08:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <Ultrasound+0x44>)
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e10:	2200      	movs	r2, #0
 8000e12:	2102      	movs	r1, #2
 8000e14:	f003 f90c 	bl	8004030 <osEventFlagsWait>
	  /*Reconfigura el pin como output */
	  timcounter = 0;
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <Ultrasound+0x48>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2110      	movs	r1, #16
 8000e22:	480a      	ldr	r0, [pc, #40]	@ (8000e4c <Ultrasound+0x4c>)
 8000e24:	f000 fdce 	bl	80019c4 <HAL_GPIO_WritePin>
	  /* funcion de delay de 5us*/
	  delay_us(10);
 8000e28:	200a      	movs	r0, #10
 8000e2a:	f7ff fe3d 	bl	8000aa8 <delay_us>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2110      	movs	r1, #16
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <Ultrasound+0x4c>)
 8000e34:	f000 fdc6 	bl	80019c4 <HAL_GPIO_WritePin>

    osDelay(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f003 f85d 	bl	8003ef8 <osDelay>
	  osEventFlagsWait(PinPollingHandle,0x0002U,0,osWaitForever);
 8000e3e:	bf00      	nop
 8000e40:	e7e2      	b.n	8000e08 <Ultrasound+0x8>
 8000e42:	bf00      	nop
 8000e44:	20000184 	.word	0x20000184
 8000e48:	20000188 	.word	0x20000188
 8000e4c:	40020400 	.word	0x40020400

08000e50 <BuzzerA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BuzzerA */
void BuzzerA(void *argument)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BuzzerA */
	uint16_t frecuencia;
  /* Infinite loop */
  for(;;)
  {
	  if(EntradaBuzzer == 1){
 8000e58:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <BuzzerA+0x94>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d108      	bne.n	8000e72 <BuzzerA+0x22>
	  		  osMessageQueueGet(frecuenciaUltrasonidoHandle,&frecuencia,NULL,osWaitForever);}
 8000e60:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <BuzzerA+0x98>)
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	f107 010e 	add.w	r1, r7, #14
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f003 fa9d 	bl	80043ac <osMessageQueueGet>
	  if(EntradaBuzzer == 2){
 8000e72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <BuzzerA+0x94>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d108      	bne.n	8000e8c <BuzzerA+0x3c>
	  		  osMessageQueueGet(frecuenciaConstanteHandle,&frecuencia,NULL,osWaitForever);}
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <BuzzerA+0x9c>)
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	f107 010e 	add.w	r1, r7, #14
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e86:	2200      	movs	r2, #0
 8000e88:	f003 fa90 	bl	80043ac <osMessageQueueGet>


	  HAL_TIM_Base_Stop_IT(&htim3);
 8000e8c:	4818      	ldr	r0, [pc, #96]	@ (8000ef0 <BuzzerA+0xa0>)
 8000e8e:	f001 fb17 	bl	80024c0 <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <BuzzerA+0xa0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24

	  uint32_t timerPeripherals = HAL_RCC_GetPCLK1Freq(); // Frecuencia del reloj del temporizador
 8000e9a:	f001 fa37 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 8000e9e:	61f8      	str	r0, [r7, #28]
	  uint32_t timerClock = timerPeripherals*2;
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
	  uint32_t arr = 1000; // Mantén ARR fijo en este caso para un duty cycle del 0-100%
 8000ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eaa:	617b      	str	r3, [r7, #20]
	  uint32_t prescaler = (timerClock / (frecuencia * arr)) - 1; // Ajustar prescaler
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]


	  __HAL_TIM_SET_PRESCALER(&htim3, prescaler); // Cambia el prescaler
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <BuzzerA+0xa0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	629a      	str	r2, [r3, #40]	@ 0x28
	  __HAL_TIM_SET_AUTORELOAD(&htim3, arr);     // Cambia el ARR
 8000ec8:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <BuzzerA+0xa0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ed0:	4a07      	ldr	r2, [pc, #28]	@ (8000ef0 <BuzzerA+0xa0>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	60d3      	str	r3, [r2, #12]

	      HAL_TIM_Base_Start_IT(&htim3);        // Reinicia el Timer3
 8000ed6:	4806      	ldr	r0, [pc, #24]	@ (8000ef0 <BuzzerA+0xa0>)
 8000ed8:	f001 fa90 	bl	80023fc <HAL_TIM_Base_Start_IT>

    osDelay(1);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f003 f80b 	bl	8003ef8 <osDelay>
  {
 8000ee2:	e7b9      	b.n	8000e58 <BuzzerA+0x8>
 8000ee4:	20000002 	.word	0x20000002
 8000ee8:	20000170 	.word	0x20000170
 8000eec:	20000174 	.word	0x20000174
 8000ef0:	200000c8 	.word	0x200000c8

08000ef4 <Recibir_UART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Recibir_UART */
void Recibir_UART(void *argument)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Recibir_UART */
  /* Infinite loop */
  for(;;)
  {

	HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	4904      	ldr	r1, [pc, #16]	@ (8000f10 <Recibir_UART+0x1c>)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <Recibir_UART+0x20>)
 8000f02:	f001 ff6e 	bl	8002de2 <HAL_UART_Receive_IT>
    osDelay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f002 fff6 	bl	8003ef8 <osDelay>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, 1);
 8000f0c:	bf00      	nop
 8000f0e:	e7f5      	b.n	8000efc <Recibir_UART+0x8>
 8000f10:	2000018c 	.word	0x2000018c
 8000f14:	20000110 	.word	0x20000110

08000f18 <Mandar_UART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Mandar_UART */
void Mandar_UART(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	@ 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mandar_UART */
	char mandar[30];
  /* Infinite loop */
  for(;;)
  {
	  memset(mandar, 0, sizeof(mandar));
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	221e      	movs	r2, #30
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f006 fba5 	bl	8007678 <memset>
	osMessageQueueGet(MandarUARTqueueHandle,&mandar,NULL,osWaitForever);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <Mandar_UART+0x40>)
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	f107 0108 	add.w	r1, r7, #8
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f003 fa36 	bl	80043ac <osMessageQueueGet>
	HAL_UART_Transmit(&huart2,(uint8_t*)mandar,sizeof(mandar),10);
 8000f40:	f107 0108 	add.w	r1, r7, #8
 8000f44:	230a      	movs	r3, #10
 8000f46:	221e      	movs	r2, #30
 8000f48:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <Mandar_UART+0x44>)
 8000f4a:	f001 febf 	bl	8002ccc <HAL_UART_Transmit>

    osDelay(1);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f002 ffd2 	bl	8003ef8 <osDelay>
	  memset(mandar, 0, sizeof(mandar));
 8000f54:	bf00      	nop
 8000f56:	e7e3      	b.n	8000f20 <Mandar_UART+0x8>
 8000f58:	2000017c 	.word	0x2000017c
 8000f5c:	20000110 	.word	0x20000110

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <Error_Handler+0x8>

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	4a11      	ldr	r2, [pc, #68]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f82:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	210f      	movs	r1, #15
 8000fae:	f06f 0001 	mvn.w	r0, #1
 8000fb2:	f000 faa2 	bl	80014fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001044 <HAL_TIM_Base_MspInit+0x80>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d116      	bne.n	8001004 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <HAL_TIM_Base_MspInit+0x84>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <HAL_TIM_Base_MspInit+0x84>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_TIM_Base_MspInit+0x84>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	2019      	movs	r0, #25
 8000ff8:	f000 fa7f 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ffc:	2019      	movs	r0, #25
 8000ffe:	f000 fa98 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001002:	e01a      	b.n	800103a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a10      	ldr	r2, [pc, #64]	@ (800104c <HAL_TIM_Base_MspInit+0x88>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d115      	bne.n	800103a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_TIM_Base_MspInit+0x84>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a0c      	ldr	r2, [pc, #48]	@ (8001048 <HAL_TIM_Base_MspInit+0x84>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_TIM_Base_MspInit+0x84>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2105      	movs	r1, #5
 800102e:	201d      	movs	r0, #29
 8001030:	f000 fa63 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001034:	201d      	movs	r0, #29
 8001036:	f000 fa7c 	bl	8001532 <HAL_NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40010000 	.word	0x40010000
 8001048:	40023800 	.word	0x40023800
 800104c:	40000400 	.word	0x40000400

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <HAL_UART_MspInit+0x94>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d133      	bne.n	80010da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_UART_MspInit+0x98>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <HAL_UART_MspInit+0x98>)
 800107c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001080:	6413      	str	r3, [r2, #64]	@ 0x40
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_UART_MspInit+0x98>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_UART_MspInit+0x98>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <HAL_UART_MspInit+0x98>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_UART_MspInit+0x98>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010aa:	230c      	movs	r3, #12
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ba:	2307      	movs	r3, #7
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4809      	ldr	r0, [pc, #36]	@ (80010ec <HAL_UART_MspInit+0x9c>)
 80010c6:	f000 fae1 	bl	800168c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	2026      	movs	r0, #38	@ 0x26
 80010d0:	f000 fa13 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d4:	2026      	movs	r0, #38	@ 0x26
 80010d6:	f000 fa2c 	bl	8001532 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	@ 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40004400 	.word	0x40004400
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112a:	f000 f8eb 	bl	8001304 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800112e:	f005 f949 	bl	80063c4 <xTaskGetSchedulerState>
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	d001      	beq.n	800113c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001138:	f005 ff76 	bl	8007028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001144:	4802      	ldr	r0, [pc, #8]	@ (8001150 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001146:	f001 f9ea 	bl	800251e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000080 	.word	0x20000080

08001154 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <TIM3_IRQHandler+0x10>)
 800115a:	f001 f9e0 	bl	800251e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000c8 	.word	0x200000c8

08001168 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <USART2_IRQHandler+0x10>)
 800116e:	f001 fe5d 	bl	8002e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000110 	.word	0x20000110

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f006 fa7e 	bl	80076ac <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20020000 	.word	0x20020000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	200001a8 	.word	0x200001a8
 80011e4:	20004c48 	.word	0x20004c48

080011e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480d      	ldr	r0, [pc, #52]	@ (8001248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001212:	490e      	ldr	r1, [pc, #56]	@ (800124c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001214:	4a0e      	ldr	r2, [pc, #56]	@ (8001250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001228:	4c0b      	ldr	r4, [pc, #44]	@ (8001258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001236:	f7ff ffd7 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f006 fa3d 	bl	80076b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff f997 	bl	8000570 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001250:	08008398 	.word	0x08008398
  ldr r2, =_sbss
 8001254:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001258:	20004c48 	.word	0x20004c48

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <HAL_Init+0x40>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <HAL_Init+0x40>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800127a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <HAL_Init+0x40>)
 8001282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f92b 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	200f      	movs	r0, #15
 8001290:	f000 f808 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fe6a 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_InitTick+0x54>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_InitTick+0x58>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f943 	bl	800154e <HAL_SYSTICK_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00e      	b.n	80012f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d80a      	bhi.n	80012ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e0:	f000 f90b 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e4:	4a06      	ldr	r2, [pc, #24]	@ (8001300 <HAL_InitTick+0x5c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000004 	.word	0x20000004
 80012fc:	2000000c 	.word	0x2000000c
 8001300:	20000008 	.word	0x20000008

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	2000000c 	.word	0x2000000c
 8001328:	200001ac 	.word	0x200001ac

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200001ac 	.word	0x200001ac

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	@ (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	@ (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff29 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff3e 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff8e 	bl	8001438 <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5d 	bl	80013e4 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff31 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001572:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff feda 	bl	800132c <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d008      	beq.n	8001598 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2280      	movs	r2, #128	@ 0x80
 800158a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e052      	b.n	800163e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0216 	bic.w	r2, r2, #22
 80015a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d103      	bne.n	80015c8 <HAL_DMA_Abort+0x62>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d007      	beq.n	80015d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0208 	bic.w	r2, r2, #8
 80015d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015e8:	e013      	b.n	8001612 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ea:	f7ff fe9f 	bl	800132c <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d90c      	bls.n	8001612 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2220      	movs	r2, #32
 80015fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2203      	movs	r2, #3
 8001602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e015      	b.n	800163e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e4      	bne.n	80015ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001624:	223f      	movs	r2, #63	@ 0x3f
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d004      	beq.n	8001664 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2280      	movs	r2, #128	@ 0x80
 800165e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e00c      	b.n	800167e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2205      	movs	r2, #5
 8001668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	e159      	b.n	800195c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016a8:	2201      	movs	r2, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	f040 8148 	bne.w	8001956 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d005      	beq.n	80016de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d130      	bne.n	8001740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001714:	2201      	movs	r2, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 0201 	and.w	r2, r3, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b03      	cmp	r3, #3
 800174a:	d017      	beq.n	800177c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d123      	bne.n	80017d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	69b9      	ldr	r1, [r7, #24]
 80017cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0203 	and.w	r2, r3, #3
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80a2 	beq.w	8001956 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b57      	ldr	r3, [pc, #348]	@ (8001974 <HAL_GPIO_Init+0x2e8>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	4a56      	ldr	r2, [pc, #344]	@ (8001974 <HAL_GPIO_Init+0x2e8>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001820:	6453      	str	r3, [r2, #68]	@ 0x44
 8001822:	4b54      	ldr	r3, [pc, #336]	@ (8001974 <HAL_GPIO_Init+0x2e8>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800182e:	4a52      	ldr	r2, [pc, #328]	@ (8001978 <HAL_GPIO_Init+0x2ec>)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a49      	ldr	r2, [pc, #292]	@ (800197c <HAL_GPIO_Init+0x2f0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0x202>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a48      	ldr	r2, [pc, #288]	@ (8001980 <HAL_GPIO_Init+0x2f4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x1fe>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a47      	ldr	r2, [pc, #284]	@ (8001984 <HAL_GPIO_Init+0x2f8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x1fa>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a46      	ldr	r2, [pc, #280]	@ (8001988 <HAL_GPIO_Init+0x2fc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x1f6>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a45      	ldr	r2, [pc, #276]	@ (800198c <HAL_GPIO_Init+0x300>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x1f2>
 800187a:	2304      	movs	r3, #4
 800187c:	e008      	b.n	8001890 <HAL_GPIO_Init+0x204>
 800187e:	2307      	movs	r3, #7
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x204>
 8001882:	2303      	movs	r3, #3
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x204>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x204>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x204>
 800188e:	2300      	movs	r3, #0
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	f002 0203 	and.w	r2, r2, #3
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4093      	lsls	r3, r2
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a0:	4935      	ldr	r1, [pc, #212]	@ (8001978 <HAL_GPIO_Init+0x2ec>)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ae:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <HAL_GPIO_Init+0x304>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001990 <HAL_GPIO_Init+0x304>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <HAL_GPIO_Init+0x304>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018fc:	4a24      	ldr	r2, [pc, #144]	@ (8001990 <HAL_GPIO_Init+0x304>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001902:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <HAL_GPIO_Init+0x304>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001926:	4a1a      	ldr	r2, [pc, #104]	@ (8001990 <HAL_GPIO_Init+0x304>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800192c:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <HAL_GPIO_Init+0x304>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001950:	4a0f      	ldr	r2, [pc, #60]	@ (8001990 <HAL_GPIO_Init+0x304>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3301      	adds	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	f67f aea2 	bls.w	80016a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40013800 	.word	0x40013800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020400 	.word	0x40020400
 8001984:	40020800 	.word	0x40020800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40021000 	.word	0x40021000
 8001990:	40013c00 	.word	0x40013c00

08001994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e001      	b.n	80019b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
 80019d0:	4613      	mov	r3, r2
 80019d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d4:	787b      	ldrb	r3, [r7, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e0:	e003      	b.n	80019ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019e2:	887b      	ldrh	r3, [r7, #2]
 80019e4:	041a      	lsls	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	619a      	str	r2, [r3, #24]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a08:	887a      	ldrh	r2, [r7, #2]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	041a      	lsls	r2, r3, #16
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	400b      	ands	r3, r1
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e267      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d075      	beq.n	8001b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a4a:	4b88      	ldr	r3, [pc, #544]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d00c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a56:	4b85      	ldr	r3, [pc, #532]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d112      	bne.n	8001a88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a62:	4b82      	ldr	r3, [pc, #520]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a6e:	d10b      	bne.n	8001a88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	4b7e      	ldr	r3, [pc, #504]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d05b      	beq.n	8001b34 <HAL_RCC_OscConfig+0x108>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d157      	bne.n	8001b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e242      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a90:	d106      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x74>
 8001a92:	4b76      	ldr	r3, [pc, #472]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a75      	ldr	r2, [pc, #468]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e01d      	b.n	8001adc <HAL_RCC_OscConfig+0xb0>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x98>
 8001aaa:	4b70      	ldr	r3, [pc, #448]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6f      	ldr	r2, [pc, #444]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6c      	ldr	r2, [pc, #432]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0xb0>
 8001ac4:	4b69      	ldr	r3, [pc, #420]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a68      	ldr	r2, [pc, #416]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b66      	ldr	r3, [pc, #408]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a65      	ldr	r2, [pc, #404]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d013      	beq.n	8001b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fc22 	bl	800132c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fc1e 	bl	800132c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	@ 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e207      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b5b      	ldr	r3, [pc, #364]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0xc0>
 8001b0a:	e014      	b.n	8001b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fc0e 	bl	800132c <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fc0a 	bl	800132c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	@ 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1f3      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	4b51      	ldr	r3, [pc, #324]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0xe8>
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b42:	4b4a      	ldr	r3, [pc, #296]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4e:	4b47      	ldr	r3, [pc, #284]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d11c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5a:	4b44      	ldr	r3, [pc, #272]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d116      	bne.n	8001b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	4b41      	ldr	r3, [pc, #260]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_RCC_OscConfig+0x152>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e1c7      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4937      	ldr	r1, [pc, #220]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	e03a      	b.n	8001c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	4b34      	ldr	r3, [pc, #208]	@ (8001c70 <HAL_RCC_OscConfig+0x244>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fbc3 	bl	800132c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff fbbf 	bl	800132c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e1a8      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4925      	ldr	r1, [pc, #148]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
 8001bdc:	e015      	b.n	8001c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bde:	4b24      	ldr	r3, [pc, #144]	@ (8001c70 <HAL_RCC_OscConfig+0x244>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fba2 	bl	800132c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff fb9e 	bl	800132c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e187      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d036      	beq.n	8001c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d016      	beq.n	8001c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_RCC_OscConfig+0x248>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff fb82 	bl	800132c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fb7e 	bl	800132c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e167      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x200>
 8001c4a:	e01b      	b.n	8001c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4c:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_RCC_OscConfig+0x248>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7ff fb6b 	bl	800132c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	e00e      	b.n	8001c78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fb67 	bl	800132c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d907      	bls.n	8001c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e150      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	42470000 	.word	0x42470000
 8001c74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	4b88      	ldr	r3, [pc, #544]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ea      	bne.n	8001c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 8097 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b81      	ldr	r3, [pc, #516]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10f      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	4a7c      	ldr	r2, [pc, #496]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b77      	ldr	r3, [pc, #476]	@ (8001ea0 <HAL_RCC_OscConfig+0x474>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cce:	4b74      	ldr	r3, [pc, #464]	@ (8001ea0 <HAL_RCC_OscConfig+0x474>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a73      	ldr	r2, [pc, #460]	@ (8001ea0 <HAL_RCC_OscConfig+0x474>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cda:	f7ff fb27 	bl	800132c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce2:	f7ff fb23 	bl	800132c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e10c      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea0 <HAL_RCC_OscConfig+0x474>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x2ea>
 8001d08:	4b64      	ldr	r3, [pc, #400]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0c:	4a63      	ldr	r2, [pc, #396]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d14:	e01c      	b.n	8001d50 <HAL_RCC_OscConfig+0x324>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x30c>
 8001d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d22:	4a5e      	ldr	r2, [pc, #376]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0x324>
 8001d38:	4b58      	ldr	r3, [pc, #352]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3c:	4a57      	ldr	r2, [pc, #348]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d44:	4b55      	ldr	r3, [pc, #340]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d48:	4a54      	ldr	r2, [pc, #336]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d4a:	f023 0304 	bic.w	r3, r3, #4
 8001d4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff fae8 	bl	800132c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff fae4 	bl	800132c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0cb      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	4b49      	ldr	r3, [pc, #292]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ee      	beq.n	8001d60 <HAL_RCC_OscConfig+0x334>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7ff fad2 	bl	800132c <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7ff face 	bl	800132c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e0b5      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da2:	4b3e      	ldr	r3, [pc, #248]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ee      	bne.n	8001d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db4:	4b39      	ldr	r3, [pc, #228]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	4a38      	ldr	r2, [pc, #224]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a1 	beq.w	8001f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dca:	4b34      	ldr	r3, [pc, #208]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d05c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d141      	bne.n	8001e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b31      	ldr	r3, [pc, #196]	@ (8001ea4 <HAL_RCC_OscConfig+0x478>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff faa2 	bl	800132c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff fa9e 	bl	800132c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e087      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfe:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	3b01      	subs	r3, #1
 8001e24:	041b      	lsls	r3, r3, #16
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	061b      	lsls	r3, r3, #24
 8001e2e:	491b      	ldr	r1, [pc, #108]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <HAL_RCC_OscConfig+0x478>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7ff fa77 	bl	800132c <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7ff fa73 	bl	800132c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e05c      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e54:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x416>
 8001e60:	e054      	b.n	8001f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_RCC_OscConfig+0x478>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fa60 	bl	800132c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e70:	f7ff fa5c 	bl	800132c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e045      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x444>
 8001e8e:	e03d      	b.n	8001f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e038      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x4ec>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d028      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d121      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d11a      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ed8:	4013      	ands	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d111      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800

08001f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0cc      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b68      	ldr	r3, [pc, #416]	@ (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d90c      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b65      	ldr	r3, [pc, #404]	@ (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b63      	ldr	r3, [pc, #396]	@ (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0b8      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d020      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f70:	4b59      	ldr	r3, [pc, #356]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a58      	ldr	r2, [pc, #352]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f88:	4b53      	ldr	r3, [pc, #332]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a52      	ldr	r2, [pc, #328]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b50      	ldr	r3, [pc, #320]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	494d      	ldr	r1, [pc, #308]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d044      	beq.n	800203c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	4b47      	ldr	r3, [pc, #284]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d119      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e07f      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d003      	beq.n	8001fda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fda:	4b3f      	ldr	r3, [pc, #252]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06f      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e067      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffa:	4b37      	ldr	r3, [pc, #220]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4934      	ldr	r1, [pc, #208]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	4313      	orrs	r3, r2
 800200a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200c:	f7ff f98e 	bl	800132c <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7ff f98a 	bl	800132c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e04f      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 020c 	and.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	d1eb      	bne.n	8002014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b25      	ldr	r3, [pc, #148]	@ (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d20c      	bcs.n	8002064 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b22      	ldr	r3, [pc, #136]	@ (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e032      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002070:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4916      	ldr	r1, [pc, #88]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800208e:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	490e      	ldr	r1, [pc, #56]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020a2:	f000 f821 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80020a6:	4602      	mov	r2, r0
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	490a      	ldr	r1, [pc, #40]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	5ccb      	ldrb	r3, [r1, r3]
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	4a09      	ldr	r2, [pc, #36]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020be:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f8ee 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023c00 	.word	0x40023c00
 80020d8:	40023800 	.word	0x40023800
 80020dc:	0800823c 	.word	0x0800823c
 80020e0:	20000004 	.word	0x20000004
 80020e4:	20000008 	.word	0x20000008

080020e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ec:	b094      	sub	sp, #80	@ 0x50
 80020ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002100:	4b79      	ldr	r3, [pc, #484]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d00d      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x40>
 800210c:	2b08      	cmp	r3, #8
 800210e:	f200 80e1 	bhi.w	80022d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x34>
 8002116:	2b04      	cmp	r3, #4
 8002118:	d003      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0x3a>
 800211a:	e0db      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800211c:	4b73      	ldr	r3, [pc, #460]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x204>)
 800211e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002120:	e0db      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002122:	4b73      	ldr	r3, [pc, #460]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002124:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002126:	e0d8      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002128:	4b6f      	ldr	r3, [pc, #444]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002130:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002132:	4b6d      	ldr	r3, [pc, #436]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d063      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213e:	4b6a      	ldr	r3, [pc, #424]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	2200      	movs	r2, #0
 8002146:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002148:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800214a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800214c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002150:	633b      	str	r3, [r7, #48]	@ 0x30
 8002152:	2300      	movs	r3, #0
 8002154:	637b      	str	r3, [r7, #52]	@ 0x34
 8002156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800215a:	4622      	mov	r2, r4
 800215c:	462b      	mov	r3, r5
 800215e:	f04f 0000 	mov.w	r0, #0
 8002162:	f04f 0100 	mov.w	r1, #0
 8002166:	0159      	lsls	r1, r3, #5
 8002168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800216c:	0150      	lsls	r0, r2, #5
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4621      	mov	r1, r4
 8002174:	1a51      	subs	r1, r2, r1
 8002176:	6139      	str	r1, [r7, #16]
 8002178:	4629      	mov	r1, r5
 800217a:	eb63 0301 	sbc.w	r3, r3, r1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800218c:	4659      	mov	r1, fp
 800218e:	018b      	lsls	r3, r1, #6
 8002190:	4651      	mov	r1, sl
 8002192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002196:	4651      	mov	r1, sl
 8002198:	018a      	lsls	r2, r1, #6
 800219a:	4651      	mov	r1, sl
 800219c:	ebb2 0801 	subs.w	r8, r2, r1
 80021a0:	4659      	mov	r1, fp
 80021a2:	eb63 0901 	sbc.w	r9, r3, r1
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ba:	4690      	mov	r8, r2
 80021bc:	4699      	mov	r9, r3
 80021be:	4623      	mov	r3, r4
 80021c0:	eb18 0303 	adds.w	r3, r8, r3
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	462b      	mov	r3, r5
 80021c8:	eb49 0303 	adc.w	r3, r9, r3
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021da:	4629      	mov	r1, r5
 80021dc:	024b      	lsls	r3, r1, #9
 80021de:	4621      	mov	r1, r4
 80021e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021e4:	4621      	mov	r1, r4
 80021e6:	024a      	lsls	r2, r1, #9
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ee:	2200      	movs	r2, #0
 80021f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021f8:	f7fe f842 	bl	8000280 <__aeabi_uldivmod>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4613      	mov	r3, r2
 8002202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002204:	e058      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002206:	4b38      	ldr	r3, [pc, #224]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	2200      	movs	r2, #0
 800220e:	4618      	mov	r0, r3
 8002210:	4611      	mov	r1, r2
 8002212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002216:	623b      	str	r3, [r7, #32]
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
 800221c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002220:	4642      	mov	r2, r8
 8002222:	464b      	mov	r3, r9
 8002224:	f04f 0000 	mov.w	r0, #0
 8002228:	f04f 0100 	mov.w	r1, #0
 800222c:	0159      	lsls	r1, r3, #5
 800222e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002232:	0150      	lsls	r0, r2, #5
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4641      	mov	r1, r8
 800223a:	ebb2 0a01 	subs.w	sl, r2, r1
 800223e:	4649      	mov	r1, r9
 8002240:	eb63 0b01 	sbc.w	fp, r3, r1
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002258:	ebb2 040a 	subs.w	r4, r2, sl
 800225c:	eb63 050b 	sbc.w	r5, r3, fp
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	00eb      	lsls	r3, r5, #3
 800226a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800226e:	00e2      	lsls	r2, r4, #3
 8002270:	4614      	mov	r4, r2
 8002272:	461d      	mov	r5, r3
 8002274:	4643      	mov	r3, r8
 8002276:	18e3      	adds	r3, r4, r3
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	464b      	mov	r3, r9
 800227c:	eb45 0303 	adc.w	r3, r5, r3
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800228e:	4629      	mov	r1, r5
 8002290:	028b      	lsls	r3, r1, #10
 8002292:	4621      	mov	r1, r4
 8002294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002298:	4621      	mov	r1, r4
 800229a:	028a      	lsls	r2, r1, #10
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022a2:	2200      	movs	r2, #0
 80022a4:	61bb      	str	r3, [r7, #24]
 80022a6:	61fa      	str	r2, [r7, #28]
 80022a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022ac:	f7fd ffe8 	bl	8000280 <__aeabi_uldivmod>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4613      	mov	r3, r2
 80022b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	3301      	adds	r3, #1
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80022c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022d2:	e002      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x204>)
 80022d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3750      	adds	r7, #80	@ 0x50
 80022e0:	46bd      	mov	sp, r7
 80022e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	00f42400 	.word	0x00f42400
 80022f0:	007a1200 	.word	0x007a1200

080022f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <HAL_RCC_GetHCLKFreq+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000004 	.word	0x20000004

0800230c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002310:	f7ff fff0 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b05      	ldr	r3, [pc, #20]	@ (800232c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0a9b      	lsrs	r3, r3, #10
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4903      	ldr	r1, [pc, #12]	@ (8002330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800
 8002330:	0800824c 	.word	0x0800824c

08002334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002338:	f7ff ffdc 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	0b5b      	lsrs	r3, r3, #13
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4903      	ldr	r1, [pc, #12]	@ (8002358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40023800 	.word	0x40023800
 8002358:	0800824c 	.word	0x0800824c

0800235c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e041      	b.n	80023f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fe1e 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f000 fa9e 	bl	80028dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d001      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e044      	b.n	800249e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1e      	ldr	r2, [pc, #120]	@ (80024ac <HAL_TIM_Base_Start_IT+0xb0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d018      	beq.n	8002468 <HAL_TIM_Base_Start_IT+0x6c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800243e:	d013      	beq.n	8002468 <HAL_TIM_Base_Start_IT+0x6c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1a      	ldr	r2, [pc, #104]	@ (80024b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00e      	beq.n	8002468 <HAL_TIM_Base_Start_IT+0x6c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a19      	ldr	r2, [pc, #100]	@ (80024b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_TIM_Base_Start_IT+0x6c>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a17      	ldr	r2, [pc, #92]	@ (80024b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_TIM_Base_Start_IT+0x6c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a16      	ldr	r2, [pc, #88]	@ (80024bc <HAL_TIM_Base_Start_IT+0xc0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d111      	bne.n	800248c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b06      	cmp	r3, #6
 8002478:	d010      	beq.n	800249c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248a:	e007      	b.n	800249c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40000400 	.word	0x40000400
 80024b4:	40000800 	.word	0x40000800
 80024b8:	40000c00 	.word	0x40000c00
 80024bc:	40014000 	.word	0x40014000

080024c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a1a      	ldr	r2, [r3, #32]
 80024de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10f      	bne.n	8002508 <HAL_TIM_Base_Stop_IT+0x48>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a1a      	ldr	r2, [r3, #32]
 80024ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d107      	bne.n	8002508 <HAL_TIM_Base_Stop_IT+0x48>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01b      	beq.n	8002582 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f06f 0202 	mvn.w	r2, #2
 8002552:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f999 	bl	80028a0 <HAL_TIM_IC_CaptureCallback>
 800256e:	e005      	b.n	800257c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f98b 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f99c 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01b      	beq.n	80025ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f06f 0204 	mvn.w	r2, #4
 800259e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f973 	bl	80028a0 <HAL_TIM_IC_CaptureCallback>
 80025ba:	e005      	b.n	80025c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f965 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f976 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01b      	beq.n	800261a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f06f 0208 	mvn.w	r2, #8
 80025ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2204      	movs	r2, #4
 80025f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f94d 	bl	80028a0 <HAL_TIM_IC_CaptureCallback>
 8002606:	e005      	b.n	8002614 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f93f 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f950 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01b      	beq.n	8002666 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f06f 0210 	mvn.w	r2, #16
 8002636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2208      	movs	r2, #8
 800263c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f927 	bl	80028a0 <HAL_TIM_IC_CaptureCallback>
 8002652:	e005      	b.n	8002660 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f919 	bl	800288c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f92a 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00c      	beq.n	800268a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f06f 0201 	mvn.w	r2, #1
 8002682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7fe fa2f 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00c      	beq.n	80026ae <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269a:	2b00      	cmp	r3, #0
 800269c:	d007      	beq.n	80026ae <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fab5 	bl	8002c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00c      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f8fb 	bl	80028c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f06f 0220 	mvn.w	r2, #32
 80026ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fa87 	bl	8002c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_TIM_ConfigClockSource+0x1c>
 8002716:	2302      	movs	r3, #2
 8002718:	e0b4      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x186>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2202      	movs	r2, #2
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002738:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002740:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002752:	d03e      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0xd4>
 8002754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002758:	f200 8087 	bhi.w	800286a <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002760:	f000 8086 	beq.w	8002870 <HAL_TIM_ConfigClockSource+0x172>
 8002764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002768:	d87f      	bhi.n	800286a <HAL_TIM_ConfigClockSource+0x16c>
 800276a:	2b70      	cmp	r3, #112	@ 0x70
 800276c:	d01a      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0xa6>
 800276e:	2b70      	cmp	r3, #112	@ 0x70
 8002770:	d87b      	bhi.n	800286a <HAL_TIM_ConfigClockSource+0x16c>
 8002772:	2b60      	cmp	r3, #96	@ 0x60
 8002774:	d050      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0x11a>
 8002776:	2b60      	cmp	r3, #96	@ 0x60
 8002778:	d877      	bhi.n	800286a <HAL_TIM_ConfigClockSource+0x16c>
 800277a:	2b50      	cmp	r3, #80	@ 0x50
 800277c:	d03c      	beq.n	80027f8 <HAL_TIM_ConfigClockSource+0xfa>
 800277e:	2b50      	cmp	r3, #80	@ 0x50
 8002780:	d873      	bhi.n	800286a <HAL_TIM_ConfigClockSource+0x16c>
 8002782:	2b40      	cmp	r3, #64	@ 0x40
 8002784:	d058      	beq.n	8002838 <HAL_TIM_ConfigClockSource+0x13a>
 8002786:	2b40      	cmp	r3, #64	@ 0x40
 8002788:	d86f      	bhi.n	800286a <HAL_TIM_ConfigClockSource+0x16c>
 800278a:	2b30      	cmp	r3, #48	@ 0x30
 800278c:	d064      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0x15a>
 800278e:	2b30      	cmp	r3, #48	@ 0x30
 8002790:	d86b      	bhi.n	800286a <HAL_TIM_ConfigClockSource+0x16c>
 8002792:	2b20      	cmp	r3, #32
 8002794:	d060      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0x15a>
 8002796:	2b20      	cmp	r3, #32
 8002798:	d867      	bhi.n	800286a <HAL_TIM_ConfigClockSource+0x16c>
 800279a:	2b00      	cmp	r3, #0
 800279c:	d05c      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0x15a>
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d05a      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0x15a>
 80027a2:	e062      	b.n	800286a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027b4:	f000 f998 	bl	8002ae8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	609a      	str	r2, [r3, #8]
      break;
 80027d0:	e04f      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027e2:	f000 f981 	bl	8002ae8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027f4:	609a      	str	r2, [r3, #8]
      break;
 80027f6:	e03c      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002804:	461a      	mov	r2, r3
 8002806:	f000 f8f5 	bl	80029f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2150      	movs	r1, #80	@ 0x50
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f94e 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 8002816:	e02c      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002824:	461a      	mov	r2, r3
 8002826:	f000 f914 	bl	8002a52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2160      	movs	r1, #96	@ 0x60
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f93e 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 8002836:	e01c      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002844:	461a      	mov	r2, r3
 8002846:	f000 f8d5 	bl	80029f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2140      	movs	r1, #64	@ 0x40
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f92e 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 8002856:	e00c      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f000 f925 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 8002868:	e003      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
      break;
 800286e:	e000      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002870:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3a      	ldr	r2, [pc, #232]	@ (80029d8 <TIM_Base_SetConfig+0xfc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00f      	beq.n	8002914 <TIM_Base_SetConfig+0x38>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028fa:	d00b      	beq.n	8002914 <TIM_Base_SetConfig+0x38>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a37      	ldr	r2, [pc, #220]	@ (80029dc <TIM_Base_SetConfig+0x100>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <TIM_Base_SetConfig+0x38>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a36      	ldr	r2, [pc, #216]	@ (80029e0 <TIM_Base_SetConfig+0x104>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0x38>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a35      	ldr	r2, [pc, #212]	@ (80029e4 <TIM_Base_SetConfig+0x108>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d108      	bne.n	8002926 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2b      	ldr	r2, [pc, #172]	@ (80029d8 <TIM_Base_SetConfig+0xfc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01b      	beq.n	8002966 <TIM_Base_SetConfig+0x8a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002934:	d017      	beq.n	8002966 <TIM_Base_SetConfig+0x8a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a28      	ldr	r2, [pc, #160]	@ (80029dc <TIM_Base_SetConfig+0x100>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <TIM_Base_SetConfig+0x8a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a27      	ldr	r2, [pc, #156]	@ (80029e0 <TIM_Base_SetConfig+0x104>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00f      	beq.n	8002966 <TIM_Base_SetConfig+0x8a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a26      	ldr	r2, [pc, #152]	@ (80029e4 <TIM_Base_SetConfig+0x108>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00b      	beq.n	8002966 <TIM_Base_SetConfig+0x8a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a25      	ldr	r2, [pc, #148]	@ (80029e8 <TIM_Base_SetConfig+0x10c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <TIM_Base_SetConfig+0x8a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a24      	ldr	r2, [pc, #144]	@ (80029ec <TIM_Base_SetConfig+0x110>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d003      	beq.n	8002966 <TIM_Base_SetConfig+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a23      	ldr	r2, [pc, #140]	@ (80029f0 <TIM_Base_SetConfig+0x114>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d108      	bne.n	8002978 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0e      	ldr	r2, [pc, #56]	@ (80029d8 <TIM_Base_SetConfig+0xfc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d105      	bne.n	80029ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f023 0201 	bic.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	611a      	str	r2, [r3, #16]
  }
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40000400 	.word	0x40000400
 80029e0:	40000800 	.word	0x40000800
 80029e4:	40000c00 	.word	0x40000c00
 80029e8:	40014000 	.word	0x40014000
 80029ec:	40014400 	.word	0x40014400
 80029f0:	40014800 	.word	0x40014800

080029f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f023 030a 	bic.w	r3, r3, #10
 8002a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f023 0210 	bic.w	r2, r3, #16
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	031b      	lsls	r3, r3, #12
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f043 0307 	orr.w	r3, r3, #7
 8002ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	021a      	lsls	r2, r3, #8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e050      	b.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d018      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b8c:	d013      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00e      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a16      	ldr	r2, [pc, #88]	@ (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	@ (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	@ (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800
 8002bfc:	40000c00 	.word	0x40000c00
 8002c00:	40014000 	.word	0x40014000

08002c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e042      	b.n	8002cc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fe f9fc 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	@ 0x24
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fdbd 	bl	80037f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d175      	bne.n	8002dd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_UART_Transmit+0x2c>
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e06e      	b.n	8002dda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2221      	movs	r2, #33	@ 0x21
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0a:	f7fe fb0f 	bl	800132c <HAL_GetTick>
 8002d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	88fa      	ldrh	r2, [r7, #6]
 8002d1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d24:	d108      	bne.n	8002d38 <HAL_UART_Transmit+0x6c>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e003      	b.n	8002d40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d40:	e02e      	b.n	8002da0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2180      	movs	r1, #128	@ 0x80
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fb1f 	bl	8003390 <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e03a      	b.n	8002dda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e007      	b.n	8002d92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1cb      	bne.n	8002d42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2140      	movs	r1, #64	@ 0x40
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 faeb 	bl	8003390 <UART_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e006      	b.n	8002dda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	4613      	mov	r3, r2
 8002dee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d112      	bne.n	8002e22 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_UART_Receive_IT+0x26>
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e00b      	b.n	8002e24 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fb12 	bl	8003442 <UART_Start_Receive_IT>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	e000      	b.n	8002e24 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b0ba      	sub	sp, #232	@ 0xe8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_UART_IRQHandler+0x66>
 8002e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fbf2 	bl	8003674 <UART_Receive_IT>
      return;
 8002e90:	e25b      	b.n	800334a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80de 	beq.w	8003058 <HAL_UART_IRQHandler+0x22c>
 8002e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d106      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80d1 	beq.w	8003058 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_UART_IRQHandler+0xae>
 8002ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_UART_IRQHandler+0xd2>
 8002ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	f043 0202 	orr.w	r2, r3, #2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_UART_IRQHandler+0xf6>
 8002f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	f043 0204 	orr.w	r2, r3, #4
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d011      	beq.n	8002f52 <HAL_UART_IRQHandler+0x126>
 8002f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d105      	bne.n	8002f46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	f043 0208 	orr.w	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 81f2 	beq.w	8003340 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_UART_IRQHandler+0x14e>
 8002f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fb7d 	bl	8003674 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f84:	2b40      	cmp	r3, #64	@ 0x40
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x17a>
 8002f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d04f      	beq.n	8003046 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa85 	bl	80034b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb6:	2b40      	cmp	r3, #64	@ 0x40
 8002fb8:	d141      	bne.n	800303e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3314      	adds	r3, #20
 8002fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ff6:	e841 2300 	strex	r3, r2, [r1]
 8002ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1d9      	bne.n	8002fba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d013      	beq.n	8003036 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003012:	4a7e      	ldr	r2, [pc, #504]	@ (800320c <HAL_UART_IRQHandler+0x3e0>)
 8003014:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fb13 	bl	8001646 <HAL_DMA_Abort_IT>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003030:	4610      	mov	r0, r2
 8003032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	e00e      	b.n	8003054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f994 	bl	8003364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303c:	e00a      	b.n	8003054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f990 	bl	8003364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	e006      	b.n	8003054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f98c 	bl	8003364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003052:	e175      	b.n	8003340 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	bf00      	nop
    return;
 8003056:	e173      	b.n	8003340 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	2b01      	cmp	r3, #1
 800305e:	f040 814f 	bne.w	8003300 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8148 	beq.w	8003300 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8141 	beq.w	8003300 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309e:	2b40      	cmp	r3, #64	@ 0x40
 80030a0:	f040 80b6 	bne.w	8003210 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8145 	beq.w	8003344 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030c2:	429a      	cmp	r2, r3
 80030c4:	f080 813e 	bcs.w	8003344 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030da:	f000 8088 	beq.w	80031ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800310a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800310e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1d9      	bne.n	80030de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3314      	adds	r3, #20
 8003130:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003134:	e853 3f00 	ldrex	r3, [r3]
 8003138:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800313a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3314      	adds	r3, #20
 800314a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800314e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003152:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003154:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003156:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e1      	bne.n	800312a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3314      	adds	r3, #20
 800316c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800317c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3314      	adds	r3, #20
 8003186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800318a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800318c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e3      	bne.n	8003166 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031be:	f023 0310 	bic.w	r3, r3, #16
 80031c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031d8:	e841 2300 	strex	r3, r2, [r1]
 80031dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e3      	bne.n	80031ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe f9bc 	bl	8001566 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	b29b      	uxth	r3, r3
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f8b7 	bl	8003378 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800320a:	e09b      	b.n	8003344 <HAL_UART_IRQHandler+0x518>
 800320c:	0800357d 	.word	0x0800357d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003218:	b29b      	uxth	r3, r3
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 808e 	beq.w	8003348 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800322c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8089 	beq.w	8003348 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	330c      	adds	r3, #12
 800323c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800324c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	330c      	adds	r3, #12
 8003256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800325a:	647a      	str	r2, [r7, #68]	@ 0x44
 800325c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003260:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e3      	bne.n	8003236 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	623b      	str	r3, [r7, #32]
   return(result);
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3314      	adds	r3, #20
 800328e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003292:	633a      	str	r2, [r7, #48]	@ 0x30
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800329a:	e841 2300 	strex	r3, r2, [r1]
 800329e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1e3      	bne.n	800326e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	330c      	adds	r3, #12
 80032ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0310 	bic.w	r3, r3, #16
 80032ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032d8:	61fa      	str	r2, [r7, #28]
 80032da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	69b9      	ldr	r1, [r7, #24]
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	617b      	str	r3, [r7, #20]
   return(result);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e3      	bne.n	80032b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f83d 	bl	8003378 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032fe:	e023      	b.n	8003348 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_UART_IRQHandler+0x4f4>
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f943 	bl	80035a4 <UART_Transmit_IT>
    return;
 800331e:	e014      	b.n	800334a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00e      	beq.n	800334a <HAL_UART_IRQHandler+0x51e>
 800332c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f983 	bl	8003644 <UART_EndTransmit_IT>
    return;
 800333e:	e004      	b.n	800334a <HAL_UART_IRQHandler+0x51e>
    return;
 8003340:	bf00      	nop
 8003342:	e002      	b.n	800334a <HAL_UART_IRQHandler+0x51e>
      return;
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <HAL_UART_IRQHandler+0x51e>
      return;
 8003348:	bf00      	nop
  }
}
 800334a:	37e8      	adds	r7, #232	@ 0xe8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a0:	e03b      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033a8:	d037      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fd ffbf 	bl	800132c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e03a      	b.n	800343a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d023      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0x8a>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b80      	cmp	r3, #128	@ 0x80
 80033d6:	d020      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0x8a>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b40      	cmp	r3, #64	@ 0x40
 80033dc:	d01d      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d116      	bne.n	800341a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f857 	bl	80034b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2208      	movs	r2, #8
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4013      	ands	r3, r2
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	429a      	cmp	r2, r3
 8003428:	bf0c      	ite	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	2300      	movne	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	429a      	cmp	r2, r3
 8003436:	d0b4      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	4613      	mov	r3, r2
 800344e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	88fa      	ldrh	r2, [r7, #6]
 800345a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2222      	movs	r2, #34	@ 0x22
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003486:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0220 	orr.w	r2, r2, #32
 80034a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b095      	sub	sp, #84	@ 0x54
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034de:	643a      	str	r2, [r7, #64]	@ 0x40
 80034e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e5      	bne.n	80034be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3314      	adds	r3, #20
 80034f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	61fb      	str	r3, [r7, #28]
   return(result);
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	64bb      	str	r3, [r7, #72]	@ 0x48
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3314      	adds	r3, #20
 8003510:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e5      	bne.n	80034f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	2b01      	cmp	r3, #1
 800352c:	d119      	bne.n	8003562 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	60bb      	str	r3, [r7, #8]
   return(result);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f023 0310 	bic.w	r3, r3, #16
 8003544:	647b      	str	r3, [r7, #68]	@ 0x44
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	330c      	adds	r3, #12
 800354c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800354e:	61ba      	str	r2, [r7, #24]
 8003550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	6979      	ldr	r1, [r7, #20]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	613b      	str	r3, [r7, #16]
   return(result);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e5      	bne.n	800352e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003570:	bf00      	nop
 8003572:	3754      	adds	r7, #84	@ 0x54
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003588:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7ff fee4 	bl	8003364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b21      	cmp	r3, #33	@ 0x21
 80035b6:	d13e      	bne.n	8003636 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c0:	d114      	bne.n	80035ec <UART_Transmit_IT+0x48>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d110      	bne.n	80035ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	621a      	str	r2, [r3, #32]
 80035ea:	e008      	b.n	80035fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	1c59      	adds	r1, r3, #1
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6211      	str	r1, [r2, #32]
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29b      	uxth	r3, r3
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4619      	mov	r1, r3
 800360c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10f      	bne.n	8003632 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003620:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003630:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800365a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff fe73 	bl	8003350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	@ 0x30
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b22      	cmp	r3, #34	@ 0x22
 8003686:	f040 80ae 	bne.w	80037e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003692:	d117      	bne.n	80036c4 <UART_Receive_IT+0x50>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d113      	bne.n	80036c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	1c9a      	adds	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80036c2:	e026      	b.n	8003712 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d6:	d007      	beq.n	80036e8 <UART_Receive_IT+0x74>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <UART_Receive_IT+0x82>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	e008      	b.n	8003708 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003702:	b2da      	uxtb	r2, r3
 8003704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003706:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29b      	uxth	r3, r3
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4619      	mov	r1, r3
 8003720:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003722:	2b00      	cmp	r3, #0
 8003724:	d15d      	bne.n	80037e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0220 	bic.w	r2, r2, #32
 8003734:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003744:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	2b01      	cmp	r3, #1
 800376a:	d135      	bne.n	80037d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	330c      	adds	r3, #12
 8003778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	613b      	str	r3, [r7, #16]
   return(result);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f023 0310 	bic.w	r3, r3, #16
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	330c      	adds	r3, #12
 8003790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003792:	623a      	str	r2, [r7, #32]
 8003794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	69f9      	ldr	r1, [r7, #28]
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	61bb      	str	r3, [r7, #24]
   return(result);
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e5      	bne.n	8003772 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d10a      	bne.n	80037ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff fdd1 	bl	8003378 <HAL_UARTEx_RxEventCallback>
 80037d6:	e002      	b.n	80037de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7fd f9a3 	bl	8000b24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e002      	b.n	80037e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
  }
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3730      	adds	r7, #48	@ 0x30
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f4:	b0c0      	sub	sp, #256	@ 0x100
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	68d9      	ldr	r1, [r3, #12]
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	ea40 0301 	orr.w	r3, r0, r1
 8003818:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	431a      	orrs	r2, r3
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	431a      	orrs	r2, r3
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003848:	f021 010c 	bic.w	r1, r1, #12
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003856:	430b      	orrs	r3, r1
 8003858:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386a:	6999      	ldr	r1, [r3, #24]
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	ea40 0301 	orr.w	r3, r0, r1
 8003876:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b8f      	ldr	r3, [pc, #572]	@ (8003abc <UART_SetConfig+0x2cc>)
 8003880:	429a      	cmp	r2, r3
 8003882:	d005      	beq.n	8003890 <UART_SetConfig+0xa0>
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ac0 <UART_SetConfig+0x2d0>)
 800388c:	429a      	cmp	r2, r3
 800388e:	d104      	bne.n	800389a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003890:	f7fe fd50 	bl	8002334 <HAL_RCC_GetPCLK2Freq>
 8003894:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003898:	e003      	b.n	80038a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800389a:	f7fe fd37 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 800389e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ac:	f040 810c 	bne.w	8003ac8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	1891      	adds	r1, r2, r2
 80038c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038ca:	415b      	adcs	r3, r3
 80038cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038d2:	4621      	mov	r1, r4
 80038d4:	eb12 0801 	adds.w	r8, r2, r1
 80038d8:	4629      	mov	r1, r5
 80038da:	eb43 0901 	adc.w	r9, r3, r1
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038f2:	4690      	mov	r8, r2
 80038f4:	4699      	mov	r9, r3
 80038f6:	4623      	mov	r3, r4
 80038f8:	eb18 0303 	adds.w	r3, r8, r3
 80038fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003900:	462b      	mov	r3, r5
 8003902:	eb49 0303 	adc.w	r3, r9, r3
 8003906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003916:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800391a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800391e:	460b      	mov	r3, r1
 8003920:	18db      	adds	r3, r3, r3
 8003922:	653b      	str	r3, [r7, #80]	@ 0x50
 8003924:	4613      	mov	r3, r2
 8003926:	eb42 0303 	adc.w	r3, r2, r3
 800392a:	657b      	str	r3, [r7, #84]	@ 0x54
 800392c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003930:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003934:	f7fc fca4 	bl	8000280 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4b61      	ldr	r3, [pc, #388]	@ (8003ac4 <UART_SetConfig+0x2d4>)
 800393e:	fba3 2302 	umull	r2, r3, r3, r2
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	011c      	lsls	r4, r3, #4
 8003946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003950:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003954:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	1891      	adds	r1, r2, r2
 800395e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003960:	415b      	adcs	r3, r3
 8003962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003968:	4641      	mov	r1, r8
 800396a:	eb12 0a01 	adds.w	sl, r2, r1
 800396e:	4649      	mov	r1, r9
 8003970:	eb43 0b01 	adc.w	fp, r3, r1
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003980:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003988:	4692      	mov	sl, r2
 800398a:	469b      	mov	fp, r3
 800398c:	4643      	mov	r3, r8
 800398e:	eb1a 0303 	adds.w	r3, sl, r3
 8003992:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003996:	464b      	mov	r3, r9
 8003998:	eb4b 0303 	adc.w	r3, fp, r3
 800399c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039b4:	460b      	mov	r3, r1
 80039b6:	18db      	adds	r3, r3, r3
 80039b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ba:	4613      	mov	r3, r2
 80039bc:	eb42 0303 	adc.w	r3, r2, r3
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039ca:	f7fc fc59 	bl	8000280 <__aeabi_uldivmod>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac4 <UART_SetConfig+0x2d4>)
 80039d6:	fba3 2301 	umull	r2, r3, r3, r1
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2264      	movs	r2, #100	@ 0x64
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	1acb      	subs	r3, r1, r3
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039ea:	4b36      	ldr	r3, [pc, #216]	@ (8003ac4 <UART_SetConfig+0x2d4>)
 80039ec:	fba3 2302 	umull	r2, r3, r3, r2
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039f8:	441c      	add	r4, r3
 80039fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	1891      	adds	r1, r2, r2
 8003a12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a14:	415b      	adcs	r3, r3
 8003a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	1851      	adds	r1, r2, r1
 8003a20:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a22:	4649      	mov	r1, r9
 8003a24:	414b      	adcs	r3, r1
 8003a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a34:	4659      	mov	r1, fp
 8003a36:	00cb      	lsls	r3, r1, #3
 8003a38:	4651      	mov	r1, sl
 8003a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a3e:	4651      	mov	r1, sl
 8003a40:	00ca      	lsls	r2, r1, #3
 8003a42:	4610      	mov	r0, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	4642      	mov	r2, r8
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a50:	464b      	mov	r3, r9
 8003a52:	460a      	mov	r2, r1
 8003a54:	eb42 0303 	adc.w	r3, r2, r3
 8003a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a70:	460b      	mov	r3, r1
 8003a72:	18db      	adds	r3, r3, r3
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a76:	4613      	mov	r3, r2
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a86:	f7fc fbfb 	bl	8000280 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <UART_SetConfig+0x2d4>)
 8003a90:	fba3 1302 	umull	r1, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2164      	movs	r1, #100	@ 0x64
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	3332      	adds	r3, #50	@ 0x32
 8003aa2:	4a08      	ldr	r2, [pc, #32]	@ (8003ac4 <UART_SetConfig+0x2d4>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 0207 	and.w	r2, r3, #7
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4422      	add	r2, r4
 8003ab6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ab8:	e106      	b.n	8003cc8 <UART_SetConfig+0x4d8>
 8003aba:	bf00      	nop
 8003abc:	40011000 	.word	0x40011000
 8003ac0:	40011400 	.word	0x40011400
 8003ac4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003acc:	2200      	movs	r2, #0
 8003ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ad2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ad6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ada:	4642      	mov	r2, r8
 8003adc:	464b      	mov	r3, r9
 8003ade:	1891      	adds	r1, r2, r2
 8003ae0:	6239      	str	r1, [r7, #32]
 8003ae2:	415b      	adcs	r3, r3
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aea:	4641      	mov	r1, r8
 8003aec:	1854      	adds	r4, r2, r1
 8003aee:	4649      	mov	r1, r9
 8003af0:	eb43 0501 	adc.w	r5, r3, r1
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	00eb      	lsls	r3, r5, #3
 8003afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b02:	00e2      	lsls	r2, r4, #3
 8003b04:	4614      	mov	r4, r2
 8003b06:	461d      	mov	r5, r3
 8003b08:	4643      	mov	r3, r8
 8003b0a:	18e3      	adds	r3, r4, r3
 8003b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b10:	464b      	mov	r3, r9
 8003b12:	eb45 0303 	adc.w	r3, r5, r3
 8003b16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b36:	4629      	mov	r1, r5
 8003b38:	008b      	lsls	r3, r1, #2
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b40:	4621      	mov	r1, r4
 8003b42:	008a      	lsls	r2, r1, #2
 8003b44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b48:	f7fc fb9a 	bl	8000280 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4b60      	ldr	r3, [pc, #384]	@ (8003cd4 <UART_SetConfig+0x4e4>)
 8003b52:	fba3 2302 	umull	r2, r3, r3, r2
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	011c      	lsls	r4, r3, #4
 8003b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	1891      	adds	r1, r2, r2
 8003b72:	61b9      	str	r1, [r7, #24]
 8003b74:	415b      	adcs	r3, r3
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	1851      	adds	r1, r2, r1
 8003b80:	6139      	str	r1, [r7, #16]
 8003b82:	4649      	mov	r1, r9
 8003b84:	414b      	adcs	r3, r1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b94:	4659      	mov	r1, fp
 8003b96:	00cb      	lsls	r3, r1, #3
 8003b98:	4651      	mov	r1, sl
 8003b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	00ca      	lsls	r2, r1, #3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4642      	mov	r2, r8
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	eb42 0303 	adc.w	r3, r2, r3
 8003bb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	008b      	lsls	r3, r1, #2
 8003bd8:	4641      	mov	r1, r8
 8003bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bde:	4641      	mov	r1, r8
 8003be0:	008a      	lsls	r2, r1, #2
 8003be2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003be6:	f7fc fb4b 	bl	8000280 <__aeabi_uldivmod>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4b38      	ldr	r3, [pc, #224]	@ (8003cd4 <UART_SetConfig+0x4e4>)
 8003bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2264      	movs	r2, #100	@ 0x64
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	1acb      	subs	r3, r1, r3
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	3332      	adds	r3, #50	@ 0x32
 8003c04:	4a33      	ldr	r2, [pc, #204]	@ (8003cd4 <UART_SetConfig+0x4e4>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c10:	441c      	add	r4, r3
 8003c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c16:	2200      	movs	r2, #0
 8003c18:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	1891      	adds	r1, r2, r2
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	415b      	adcs	r3, r3
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c30:	4641      	mov	r1, r8
 8003c32:	1851      	adds	r1, r2, r1
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	4649      	mov	r1, r9
 8003c38:	414b      	adcs	r3, r1
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c48:	4659      	mov	r1, fp
 8003c4a:	00cb      	lsls	r3, r1, #3
 8003c4c:	4651      	mov	r1, sl
 8003c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c52:	4651      	mov	r1, sl
 8003c54:	00ca      	lsls	r2, r1, #3
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	189b      	adds	r3, r3, r2
 8003c60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c62:	464b      	mov	r3, r9
 8003c64:	460a      	mov	r2, r1
 8003c66:	eb42 0303 	adc.w	r3, r2, r3
 8003c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c76:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c84:	4649      	mov	r1, r9
 8003c86:	008b      	lsls	r3, r1, #2
 8003c88:	4641      	mov	r1, r8
 8003c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c8e:	4641      	mov	r1, r8
 8003c90:	008a      	lsls	r2, r1, #2
 8003c92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c96:	f7fc faf3 	bl	8000280 <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <UART_SetConfig+0x4e4>)
 8003ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	2164      	movs	r1, #100	@ 0x64
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	3332      	adds	r3, #50	@ 0x32
 8003cb2:	4a08      	ldr	r2, [pc, #32]	@ (8003cd4 <UART_SetConfig+0x4e4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	f003 020f 	and.w	r2, r3, #15
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4422      	add	r2, r4
 8003cc6:	609a      	str	r2, [r3, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd4:	51eb851f 	.word	0x51eb851f

08003cd8 <__NVIC_SetPriority>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	6039      	str	r1, [r7, #0]
 8003ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	db0a      	blt.n	8003d02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	490c      	ldr	r1, [pc, #48]	@ (8003d24 <__NVIC_SetPriority+0x4c>)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	0112      	lsls	r2, r2, #4
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003d00:	e00a      	b.n	8003d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4908      	ldr	r1, [pc, #32]	@ (8003d28 <__NVIC_SetPriority+0x50>)
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3b04      	subs	r3, #4
 8003d10:	0112      	lsls	r2, r2, #4
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	440b      	add	r3, r1
 8003d16:	761a      	strb	r2, [r3, #24]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000e100 	.word	0xe000e100
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d30:	2100      	movs	r1, #0
 8003d32:	f06f 0004 	mvn.w	r0, #4
 8003d36:	f7ff ffcf 	bl	8003cd8 <__NVIC_SetPriority>
#endif
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d46:	f3ef 8305 	mrs	r3, IPSR
 8003d4a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003d52:	f06f 0305 	mvn.w	r3, #5
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	e00c      	b.n	8003d74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d84 <osKernelInitialize+0x44>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d105      	bne.n	8003d6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d62:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <osKernelInitialize+0x44>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e002      	b.n	8003d74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d74:	687b      	ldr	r3, [r7, #4]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	200001b0 	.word	0x200001b0

08003d88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d8e:	f3ef 8305 	mrs	r3, IPSR
 8003d92:	603b      	str	r3, [r7, #0]
  return(result);
 8003d94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003d9a:	f06f 0305 	mvn.w	r3, #5
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	e010      	b.n	8003dc4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003da2:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <osKernelStart+0x48>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d109      	bne.n	8003dbe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003daa:	f7ff ffbf 	bl	8003d2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003dae:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <osKernelStart+0x48>)
 8003db0:	2202      	movs	r2, #2
 8003db2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003db4:	f001 fe16 	bl	80059e4 <vTaskStartScheduler>
      stat = osOK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	e002      	b.n	8003dc4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003dc4:	687b      	ldr	r3, [r7, #4]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	200001b0 	.word	0x200001b0

08003dd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08e      	sub	sp, #56	@ 0x38
 8003dd8:	af04      	add	r7, sp, #16
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003de4:	f3ef 8305 	mrs	r3, IPSR
 8003de8:	617b      	str	r3, [r7, #20]
  return(result);
 8003dea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d17e      	bne.n	8003eee <osThreadNew+0x11a>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d07b      	beq.n	8003eee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003df6:	2380      	movs	r3, #128	@ 0x80
 8003df8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003dfa:	2318      	movs	r3, #24
 8003dfc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d045      	beq.n	8003e9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <osThreadNew+0x48>
        name = attr->name;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <osThreadNew+0x6e>
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b38      	cmp	r3, #56	@ 0x38
 8003e34:	d805      	bhi.n	8003e42 <osThreadNew+0x6e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <osThreadNew+0x72>
        return (NULL);
 8003e42:	2300      	movs	r3, #0
 8003e44:	e054      	b.n	8003ef0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00e      	beq.n	8003e7c <osThreadNew+0xa8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b5b      	cmp	r3, #91	@ 0x5b
 8003e64:	d90a      	bls.n	8003e7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <osThreadNew+0xa8>
        mem = 1;
 8003e76:	2301      	movs	r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	e010      	b.n	8003e9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10c      	bne.n	8003e9e <osThreadNew+0xca>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d108      	bne.n	8003e9e <osThreadNew+0xca>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <osThreadNew+0xca>
          mem = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	e001      	b.n	8003e9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d110      	bne.n	8003ec6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003eac:	9202      	str	r2, [sp, #8]
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6a3a      	ldr	r2, [r7, #32]
 8003eb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f001 fbb6 	bl	800562c <xTaskCreateStatic>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	e013      	b.n	8003eee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d110      	bne.n	8003eee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	f107 0310 	add.w	r3, r7, #16
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f001 fc04 	bl	80056ec <xTaskCreate>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <osThreadNew+0x11a>
            hTask = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003eee:	693b      	ldr	r3, [r7, #16]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3728      	adds	r7, #40	@ 0x28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f00:	f3ef 8305 	mrs	r3, IPSR
 8003f04:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <osDelay+0x1c>
    stat = osErrorISR;
 8003f0c:	f06f 0305 	mvn.w	r3, #5
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e007      	b.n	8003f24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f001 fd2a 	bl	8005978 <vTaskDelay>
    }
  }

  return (stat);
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f3a:	f3ef 8305 	mrs	r3, IPSR
 8003f3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f40:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d12d      	bne.n	8003fa2 <osEventFlagsNew+0x74>
    mem = -1;
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f4a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d015      	beq.n	8003f7e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <osEventFlagsNew+0x3a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2b1f      	cmp	r3, #31
 8003f60:	d902      	bls.n	8003f68 <osEventFlagsNew+0x3a>
        mem = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	e00c      	b.n	8003f82 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d108      	bne.n	8003f82 <osEventFlagsNew+0x54>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <osEventFlagsNew+0x54>
          mem = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	e001      	b.n	8003f82 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d106      	bne.n	8003f96 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fa9f 	bl	80044d0 <xEventGroupCreateStatic>
 8003f92:	6178      	str	r0, [r7, #20]
 8003f94:	e005      	b.n	8003fa2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8003f9c:	f000 fad1 	bl	8004542 <xEventGroupCreate>
 8003fa0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003fa2:	697b      	ldr	r3, [r7, #20]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <osEventFlagsSet+0x1c>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fc6:	d303      	bcc.n	8003fd0 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8003fc8:	f06f 0303 	mvn.w	r3, #3
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	e028      	b.n	8004022 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fd0:	f3ef 8305 	mrs	r3, IPSR
 8003fd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01d      	beq.n	8004018 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8003fe0:	f107 0308 	add.w	r3, r7, #8
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6839      	ldr	r1, [r7, #0]
 8003fe8:	6938      	ldr	r0, [r7, #16]
 8003fea:	f000 fc53 	bl	8004894 <xEventGroupSetBitsFromISR>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8003ff4:	f06f 0302 	mvn.w	r3, #2
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e012      	b.n	8004022 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <osEventFlagsSet+0x76>
 8004006:	4b09      	ldr	r3, [pc, #36]	@ (800402c <osEventFlagsSet+0x80>)
 8004008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	e004      	b.n	8004022 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	6938      	ldr	r0, [r7, #16]
 800401c:	f000 fb7e 	bl	800471c <xEventGroupSetBits>
 8004020:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004022:	697b      	ldr	r3, [r7, #20]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	e000ed04 	.word	0xe000ed04

08004030 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	@ 0x30
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <osEventFlagsWait+0x20>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800404e:	d303      	bcc.n	8004058 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004050:	f06f 0303 	mvn.w	r3, #3
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	e04b      	b.n	80040f0 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004058:	f3ef 8305 	mrs	r3, IPSR
 800405c:	617b      	str	r3, [r7, #20]
  return(result);
 800405e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8004064:	f06f 0305 	mvn.w	r3, #5
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	e041      	b.n	80040f0 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8004076:	2301      	movs	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
 800407a:	e001      	b.n	8004080 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800407c:	2300      	movs	r3, #0
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	e001      	b.n	8004094 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	6a3a      	ldr	r2, [r7, #32]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	69b8      	ldr	r0, [r7, #24]
 80040a0:	f000 fa6a 	bl	8004578 <xEventGroupWaitBits>
 80040a4:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4013      	ands	r3, r2
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d019      	beq.n	80040f0 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 80040c2:	f06f 0301 	mvn.w	r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	e012      	b.n	80040f0 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80040ca:	f06f 0302 	mvn.w	r3, #2
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	e00e      	b.n	80040f0 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 80040e2:	f06f 0301 	mvn.w	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	e002      	b.n	80040f0 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80040ea:	f06f 0302 	mvn.w	r3, #2
 80040ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80040f0:	69fb      	ldr	r3, [r7, #28]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3728      	adds	r7, #40	@ 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b088      	sub	sp, #32
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004106:	f3ef 8305 	mrs	r3, IPSR
 800410a:	60bb      	str	r3, [r7, #8]
  return(result);
 800410c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800410e:	2b00      	cmp	r3, #0
 8004110:	d174      	bne.n	80041fc <osMutexNew+0x102>
    if (attr != NULL) {
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e001      	b.n	8004124 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <osMutexNew+0x3a>
      rmtx = 1U;
 800412e:	2301      	movs	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e001      	b.n	8004138 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d15c      	bne.n	80041fc <osMutexNew+0x102>
      mem = -1;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004146:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d015      	beq.n	800417a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d006      	beq.n	8004164 <osMutexNew+0x6a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b4f      	cmp	r3, #79	@ 0x4f
 800415c:	d902      	bls.n	8004164 <osMutexNew+0x6a>
          mem = 1;
 800415e:	2301      	movs	r3, #1
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	e00c      	b.n	800417e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d108      	bne.n	800417e <osMutexNew+0x84>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <osMutexNew+0x84>
            mem = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	e001      	b.n	800417e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d112      	bne.n	80041aa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	4619      	mov	r1, r3
 8004190:	2004      	movs	r0, #4
 8004192:	f000 fdbe 	bl	8004d12 <xQueueCreateMutexStatic>
 8004196:	61f8      	str	r0, [r7, #28]
 8004198:	e016      	b.n	80041c8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	4619      	mov	r1, r3
 80041a0:	2001      	movs	r0, #1
 80041a2:	f000 fdb6 	bl	8004d12 <xQueueCreateMutexStatic>
 80041a6:	61f8      	str	r0, [r7, #28]
 80041a8:	e00e      	b.n	80041c8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10b      	bne.n	80041c8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80041b6:	2004      	movs	r0, #4
 80041b8:	f000 fd93 	bl	8004ce2 <xQueueCreateMutex>
 80041bc:	61f8      	str	r0, [r7, #28]
 80041be:	e003      	b.n	80041c8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80041c0:	2001      	movs	r0, #1
 80041c2:	f000 fd8e 	bl	8004ce2 <xQueueCreateMutex>
 80041c6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00c      	beq.n	80041e8 <osMutexNew+0xee>
        if (attr != NULL) {
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <osMutexNew+0xe2>
          name = attr->name;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e001      	b.n	80041e0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80041e0:	68f9      	ldr	r1, [r7, #12]
 80041e2:	69f8      	ldr	r0, [r7, #28]
 80041e4:	f001 f9c4 	bl	8005570 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d006      	beq.n	80041fc <osMutexNew+0x102>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80041fc:	69fb      	ldr	r3, [r7, #28]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004206:	b580      	push	{r7, lr}
 8004208:	b08a      	sub	sp, #40	@ 0x28
 800420a:	af02      	add	r7, sp, #8
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004216:	f3ef 8305 	mrs	r3, IPSR
 800421a:	613b      	str	r3, [r7, #16]
  return(result);
 800421c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800421e:	2b00      	cmp	r3, #0
 8004220:	d15f      	bne.n	80042e2 <osMessageQueueNew+0xdc>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05c      	beq.n	80042e2 <osMessageQueueNew+0xdc>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d059      	beq.n	80042e2 <osMessageQueueNew+0xdc>
    mem = -1;
 800422e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004232:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d029      	beq.n	800428e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d012      	beq.n	8004268 <osMessageQueueNew+0x62>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	2b4f      	cmp	r3, #79	@ 0x4f
 8004248:	d90e      	bls.n	8004268 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <osMessageQueueNew+0x62>
        mem = 1;
 8004262:	2301      	movs	r3, #1
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	e014      	b.n	8004292 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d110      	bne.n	8004292 <osMessageQueueNew+0x8c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10c      	bne.n	8004292 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800427c:	2b00      	cmp	r3, #0
 800427e:	d108      	bne.n	8004292 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <osMessageQueueNew+0x8c>
          mem = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	e001      	b.n	8004292 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10b      	bne.n	80042b0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2100      	movs	r1, #0
 80042a2:	9100      	str	r1, [sp, #0]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fc26 	bl	8004af8 <xQueueGenericCreateStatic>
 80042ac:	61f8      	str	r0, [r7, #28]
 80042ae:	e008      	b.n	80042c2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d105      	bne.n	80042c2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80042b6:	2200      	movs	r2, #0
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fc99 	bl	8004bf2 <xQueueGenericCreate>
 80042c0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00c      	beq.n	80042e2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	e001      	b.n	80042da <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80042da:	6979      	ldr	r1, [r7, #20]
 80042dc:	69f8      	ldr	r0, [r7, #28]
 80042de:	f001 f947 	bl	8005570 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80042e2:	69fb      	ldr	r3, [r7, #28]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004300:	2300      	movs	r3, #0
 8004302:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004304:	f3ef 8305 	mrs	r3, IPSR
 8004308:	617b      	str	r3, [r7, #20]
  return(result);
 800430a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800430c:	2b00      	cmp	r3, #0
 800430e:	d028      	beq.n	8004362 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <osMessageQueuePut+0x36>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <osMessageQueuePut+0x36>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004322:	f06f 0303 	mvn.w	r3, #3
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	e038      	b.n	800439c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800432e:	f107 0210 	add.w	r2, r7, #16
 8004332:	2300      	movs	r3, #0
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	69b8      	ldr	r0, [r7, #24]
 8004338:	f000 fe08 	bl	8004f4c <xQueueGenericSendFromISR>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d003      	beq.n	800434a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004342:	f06f 0302 	mvn.w	r3, #2
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	e028      	b.n	800439c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d025      	beq.n	800439c <osMessageQueuePut+0xb0>
 8004350:	4b15      	ldr	r3, [pc, #84]	@ (80043a8 <osMessageQueuePut+0xbc>)
 8004352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	e01c      	b.n	800439c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <osMessageQueuePut+0x82>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800436e:	f06f 0303 	mvn.w	r3, #3
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	e012      	b.n	800439c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004376:	2300      	movs	r3, #0
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	69b8      	ldr	r0, [r7, #24]
 800437e:	f000 fce3 	bl	8004d48 <xQueueGenericSend>
 8004382:	4603      	mov	r3, r0
 8004384:	2b01      	cmp	r3, #1
 8004386:	d009      	beq.n	800439c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800438e:	f06f 0301 	mvn.w	r3, #1
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	e002      	b.n	800439c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004396:	f06f 0302 	mvn.w	r3, #2
 800439a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800439c:	69fb      	ldr	r3, [r7, #28]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043c2:	f3ef 8305 	mrs	r3, IPSR
 80043c6:	617b      	str	r3, [r7, #20]
  return(result);
 80043c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d028      	beq.n	8004420 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <osMessageQueueGet+0x34>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <osMessageQueueGet+0x34>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80043e0:	f06f 0303 	mvn.w	r3, #3
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	e037      	b.n	8004458 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80043ec:	f107 0310 	add.w	r3, r7, #16
 80043f0:	461a      	mov	r2, r3
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	69b8      	ldr	r0, [r7, #24]
 80043f6:	f000 ff29 	bl	800524c <xQueueReceiveFromISR>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d003      	beq.n	8004408 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004400:	f06f 0302 	mvn.w	r3, #2
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	e027      	b.n	8004458 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d024      	beq.n	8004458 <osMessageQueueGet+0xac>
 800440e:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <osMessageQueueGet+0xb8>)
 8004410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	e01b      	b.n	8004458 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <osMessageQueueGet+0x80>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d103      	bne.n	8004434 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800442c:	f06f 0303 	mvn.w	r3, #3
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	e011      	b.n	8004458 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	69b8      	ldr	r0, [r7, #24]
 800443a:	f000 fe25 	bl	8005088 <xQueueReceive>
 800443e:	4603      	mov	r3, r0
 8004440:	2b01      	cmp	r3, #1
 8004442:	d009      	beq.n	8004458 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800444a:	f06f 0301 	mvn.w	r3, #1
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e002      	b.n	8004458 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004452:	f06f 0302 	mvn.w	r3, #2
 8004456:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004458:	69fb      	ldr	r3, [r7, #28]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4a07      	ldr	r2, [pc, #28]	@ (8004494 <vApplicationGetIdleTaskMemory+0x2c>)
 8004478:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4a06      	ldr	r2, [pc, #24]	@ (8004498 <vApplicationGetIdleTaskMemory+0x30>)
 800447e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2280      	movs	r2, #128	@ 0x80
 8004484:	601a      	str	r2, [r3, #0]
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	200001b4 	.word	0x200001b4
 8004498:	20000210 	.word	0x20000210

0800449c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a07      	ldr	r2, [pc, #28]	@ (80044c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80044ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4a06      	ldr	r2, [pc, #24]	@ (80044cc <vApplicationGetTimerTaskMemory+0x30>)
 80044b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044ba:	601a      	str	r2, [r3, #0]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	20000410 	.word	0x20000410
 80044cc:	2000046c 	.word	0x2000046c

080044d0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	e7fd      	b.n	80044f2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80044f6:	2320      	movs	r3, #32
 80044f8:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d00b      	beq.n	8004518 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	60fb      	str	r3, [r7, #12]
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3304      	adds	r3, #4
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f9c5 	bl	80048bc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2201      	movs	r2, #1
 8004536:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004538:	697b      	ldr	r3, [r7, #20]
	}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004548:	2020      	movs	r0, #32
 800454a:	f002 fdff 	bl	800714c <pvPortMalloc>
 800454e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f9ab 	bl	80048bc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800456c:	687b      	ldr	r3, [r7, #4]
	}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b090      	sub	sp, #64	@ 0x40
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <xEventGroupWaitBits+0x38>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	623b      	str	r3, [r7, #32]
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045b6:	d30b      	bcc.n	80045d0 <xEventGroupWaitBits+0x58>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	61fb      	str	r3, [r7, #28]
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	e7fd      	b.n	80045cc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <xEventGroupWaitBits+0x76>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	61bb      	str	r3, [r7, #24]
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	e7fd      	b.n	80045ea <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ee:	f001 fee9 	bl	80063c4 <xTaskGetSchedulerState>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <xEventGroupWaitBits+0x86>
 80045f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <xEventGroupWaitBits+0x8a>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <xEventGroupWaitBits+0x8c>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	617b      	str	r3, [r7, #20]
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004620:	f001 fa48 	bl	8005ab4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004630:	f000 f90d 	bl	800484e <prvTestWaitCondition>
 8004634:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8004636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00e      	beq.n	800465a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800463c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004640:	2300      	movs	r3, #0
 8004642:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d028      	beq.n	800469c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800464a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	43db      	mvns	r3, r3
 8004652:	401a      	ands	r2, r3
 8004654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	e020      	b.n	800469c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800465a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004662:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8004664:	2301      	movs	r3, #1
 8004666:	633b      	str	r3, [r7, #48]	@ 0x30
 8004668:	e018      	b.n	800469c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004676:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800467e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004680:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004684:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004688:	1d18      	adds	r0, r3, #4
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468e:	4313      	orrs	r3, r2
 8004690:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004692:	4619      	mov	r1, r3
 8004694:	f001 fc08 	bl	8005ea8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800469c:	f001 fa18 	bl	8005ad0 <xTaskResumeAll>
 80046a0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80046a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d031      	beq.n	800470c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d107      	bne.n	80046be <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80046ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004718 <xEventGroupWaitBits+0x1a0>)
 80046b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80046be:	f001 ff0f 	bl	80064e0 <uxTaskResetEventItemValue>
 80046c2:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80046c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11a      	bne.n	8004704 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80046ce:	f002 fc1b 	bl	8006f08 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80046d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80046de:	f000 f8b6 	bl	800484e <prvTestWaitCondition>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80046ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	401a      	ands	r2, r3
 80046f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fa:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80046fc:	2301      	movs	r3, #1
 80046fe:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8004700:	f002 fc34 	bl	8006f6c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004706:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800470a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800470c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800470e:	4618      	mov	r0, r3
 8004710:	3740      	adds	r7, #64	@ 0x40
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08e      	sub	sp, #56	@ 0x38
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004726:	2300      	movs	r3, #0
 8004728:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <xEventGroupSetBits+0x34>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	613b      	str	r3, [r7, #16]
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	e7fd      	b.n	800474c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004756:	d30b      	bcc.n	8004770 <xEventGroupSetBits+0x54>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60fb      	str	r3, [r7, #12]
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	e7fd      	b.n	800476c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004772:	3304      	adds	r3, #4
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	3308      	adds	r3, #8
 800477a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800477c:	f001 f99a 	bl	8005ab4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	431a      	orrs	r2, r3
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004792:	e03c      	b.n	800480e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800479a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80047aa:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047b2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d108      	bne.n	80047d0 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00b      	beq.n	80047e2 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80047ca:	2301      	movs	r3, #1
 80047cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ce:	e008      	b.n	80047e2 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	4013      	ands	r3, r2
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d101      	bne.n	80047e2 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80047de:	2301      	movs	r3, #1
 80047e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d010      	beq.n	800480a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80047f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004802:	4619      	mov	r1, r3
 8004804:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004806:	f001 fc1d 	bl	8006044 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800480e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	429a      	cmp	r2, r3
 8004814:	d1be      	bne.n	8004794 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	43db      	mvns	r3, r3
 800481e:	401a      	ands	r2, r3
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004824:	f001 f954 	bl	8005ad0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3738      	adds	r7, #56	@ 0x38
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800483e:	6839      	ldr	r1, [r7, #0]
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff6b 	bl	800471c <xEventGroupSetBits>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800484e:	b480      	push	{r7}
 8004850:	b087      	sub	sp, #28
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d107      	bne.n	8004874 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800486e:	2301      	movs	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	e007      	b.n	8004884 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	4013      	ands	r3, r2
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	429a      	cmp	r2, r3
 800487e:	d101      	bne.n	8004884 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004880:	2301      	movs	r3, #1
 8004882:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004884:	697b      	ldr	r3, [r7, #20]
}
 8004886:	4618      	mov	r0, r3
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	68f9      	ldr	r1, [r7, #12]
 80048a6:	4804      	ldr	r0, [pc, #16]	@ (80048b8 <xEventGroupSetBitsFromISR+0x24>)
 80048a8:	f002 f9e0 	bl	8006c6c <xTimerPendFunctionCallFromISR>
 80048ac:	6178      	str	r0, [r7, #20]

		return xReturn;
 80048ae:	697b      	ldr	r3, [r7, #20]
	}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	08004835 	.word	0x08004835

080048bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f103 0208 	add.w	r2, r3, #8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f103 0208 	add.w	r2, r3, #8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f103 0208 	add.w	r2, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004974:	d103      	bne.n	800497e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e00c      	b.n	8004998 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3308      	adds	r3, #8
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	e002      	b.n	800498c <vListInsert+0x2e>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	d2f6      	bcs.n	8004986 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6892      	ldr	r2, [r2, #8]
 80049e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6852      	ldr	r2, [r2, #4]
 80049f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d103      	bne.n	8004a04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <xQueueGenericReset+0x2c>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	60bb      	str	r3, [r7, #8]
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a50:	f002 fa5a 	bl	8006f08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5c:	68f9      	ldr	r1, [r7, #12]
 8004a5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	3b01      	subs	r3, #1
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	441a      	add	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	22ff      	movs	r2, #255	@ 0xff
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	22ff      	movs	r2, #255	@ 0xff
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d114      	bne.n	8004ad0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01a      	beq.n	8004ae4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3310      	adds	r3, #16
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 fa62 	bl	8005f7c <xTaskRemoveFromEventList>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d012      	beq.n	8004ae4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004abe:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <xQueueGenericReset+0xd0>)
 8004ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	e009      	b.n	8004ae4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3310      	adds	r3, #16
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fef1 	bl	80048bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3324      	adds	r3, #36	@ 0x24
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff feec 	bl	80048bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ae4:	f002 fa42 	bl	8006f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ae8:	2301      	movs	r3, #1
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	e000ed04 	.word	0xe000ed04

08004af8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08e      	sub	sp, #56	@ 0x38
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	e7fd      	b.n	8004b3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <xQueueGenericCreateStatic+0x56>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <xQueueGenericCreateStatic+0x5a>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <xQueueGenericCreateStatic+0x5c>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	623b      	str	r3, [r7, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <xQueueGenericCreateStatic+0x84>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <xQueueGenericCreateStatic+0x88>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <xQueueGenericCreateStatic+0x8a>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	61fb      	str	r3, [r7, #28]
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	e7fd      	b.n	8004b9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b9e:	2350      	movs	r3, #80	@ 0x50
 8004ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b50      	cmp	r3, #80	@ 0x50
 8004ba6:	d00b      	beq.n	8004bc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	61bb      	str	r3, [r7, #24]
}
 8004bba:	bf00      	nop
 8004bbc:	bf00      	nop
 8004bbe:	e7fd      	b.n	8004bbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00d      	beq.n	8004be8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f840 	bl	8004c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3730      	adds	r7, #48	@ 0x30
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b08a      	sub	sp, #40	@ 0x28
 8004bf6:	af02      	add	r7, sp, #8
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	613b      	str	r3, [r7, #16]
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	3350      	adds	r3, #80	@ 0x50
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f002 fa8d 	bl	800714c <pvPortMalloc>
 8004c32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d011      	beq.n	8004c5e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	3350      	adds	r3, #80	@ 0x50
 8004c42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c4c:	79fa      	ldrb	r2, [r7, #7]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	4613      	mov	r3, r2
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f805 	bl	8004c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3720      	adds	r7, #32
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d103      	bne.n	8004c84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e002      	b.n	8004c8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c96:	2101      	movs	r1, #1
 8004c98:	69b8      	ldr	r0, [r7, #24]
 8004c9a:	f7ff fec3 	bl	8004a24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00e      	beq.n	8004cda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f837 	bl	8004d48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b086      	sub	sp, #24
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	4603      	mov	r3, r0
 8004cea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004cec:	2301      	movs	r3, #1
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6939      	ldr	r1, [r7, #16]
 8004cfa:	6978      	ldr	r0, [r7, #20]
 8004cfc:	f7ff ff79 	bl	8004bf2 <xQueueGenericCreate>
 8004d00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff ffd3 	bl	8004cae <prvInitialiseMutex>

		return xNewQueue;
 8004d08:	68fb      	ldr	r3, [r7, #12]
	}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b088      	sub	sp, #32
 8004d16:	af02      	add	r7, sp, #8
 8004d18:	4603      	mov	r3, r0
 8004d1a:	6039      	str	r1, [r7, #0]
 8004d1c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	2300      	movs	r3, #0
 8004d24:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	6939      	ldr	r1, [r7, #16]
 8004d30:	6978      	ldr	r0, [r7, #20]
 8004d32:	f7ff fee1 	bl	8004af8 <xQueueGenericCreateStatic>
 8004d36:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7ff ffb8 	bl	8004cae <prvInitialiseMutex>

		return xNewQueue;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
	}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08e      	sub	sp, #56	@ 0x38
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d56:	2300      	movs	r3, #0
 8004d58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <xQueueGenericSend+0x34>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d76:	bf00      	nop
 8004d78:	bf00      	nop
 8004d7a:	e7fd      	b.n	8004d78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <xQueueGenericSend+0x42>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <xQueueGenericSend+0x46>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <xQueueGenericSend+0x48>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <xQueueGenericSend+0x64>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d103      	bne.n	8004dba <xQueueGenericSend+0x72>
 8004db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <xQueueGenericSend+0x76>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <xQueueGenericSend+0x78>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10b      	bne.n	8004ddc <xQueueGenericSend+0x94>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	623b      	str	r3, [r7, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ddc:	f001 faf2 	bl	80063c4 <xTaskGetSchedulerState>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <xQueueGenericSend+0xa4>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <xQueueGenericSend+0xa8>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <xQueueGenericSend+0xaa>
 8004df0:	2300      	movs	r3, #0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <xQueueGenericSend+0xc6>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	61fb      	str	r3, [r7, #28]
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e0e:	f002 f87b 	bl	8006f08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <xQueueGenericSend+0xdc>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d129      	bne.n	8004e78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e2a:	f000 fa91 	bl	8005350 <prvCopyDataToQueue>
 8004e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d010      	beq.n	8004e5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3a:	3324      	adds	r3, #36	@ 0x24
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 f89d 	bl	8005f7c <xTaskRemoveFromEventList>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e48:	4b3f      	ldr	r3, [pc, #252]	@ (8004f48 <xQueueGenericSend+0x200>)
 8004e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	e00a      	b.n	8004e70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e60:	4b39      	ldr	r3, [pc, #228]	@ (8004f48 <xQueueGenericSend+0x200>)
 8004e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e70:	f002 f87c 	bl	8006f6c <vPortExitCritical>
				return pdPASS;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e063      	b.n	8004f40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e7e:	f002 f875 	bl	8006f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e05c      	b.n	8004f40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e8c:	f107 0314 	add.w	r3, r7, #20
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 f93b 	bl	800610c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e96:	2301      	movs	r3, #1
 8004e98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e9a:	f002 f867 	bl	8006f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e9e:	f000 fe09 	bl	8005ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ea2:	f002 f831 	bl	8006f08 <vPortEnterCritical>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004eac:	b25b      	sxtb	r3, r3
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eb2:	d103      	bne.n	8004ebc <xQueueGenericSend+0x174>
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ec8:	d103      	bne.n	8004ed2 <xQueueGenericSend+0x18a>
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ed2:	f002 f84b 	bl	8006f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ed6:	1d3a      	adds	r2, r7, #4
 8004ed8:	f107 0314 	add.w	r3, r7, #20
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 f92a 	bl	8006138 <xTaskCheckForTimeOut>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d124      	bne.n	8004f34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004eea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eec:	f000 fb28 	bl	8005540 <prvIsQueueFull>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef8:	3310      	adds	r3, #16
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 ffac 	bl	8005e5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f06:	f000 fab3 	bl	8005470 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f0a:	f000 fde1 	bl	8005ad0 <xTaskResumeAll>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f47f af7c 	bne.w	8004e0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004f16:	4b0c      	ldr	r3, [pc, #48]	@ (8004f48 <xQueueGenericSend+0x200>)
 8004f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	e772      	b.n	8004e0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f2a:	f000 faa1 	bl	8005470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f2e:	f000 fdcf 	bl	8005ad0 <xTaskResumeAll>
 8004f32:	e76c      	b.n	8004e0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f36:	f000 fa9b 	bl	8005470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f3a:	f000 fdc9 	bl	8005ad0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3738      	adds	r7, #56	@ 0x38
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b090      	sub	sp, #64	@ 0x40
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	e7fd      	b.n	8004f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <xQueueGenericSendFromISR+0x3e>
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <xQueueGenericSendFromISR+0x42>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <xQueueGenericSendFromISR+0x44>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	e7fd      	b.n	8004fa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d103      	bne.n	8004fba <xQueueGenericSendFromISR+0x6e>
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <xQueueGenericSendFromISR+0x72>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <xQueueGenericSendFromISR+0x74>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	623b      	str	r3, [r7, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fdc:	f002 f874 	bl	80070c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fe0:	f3ef 8211 	mrs	r2, BASEPRI
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	61fa      	str	r2, [r7, #28]
 8004ff6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005004:	429a      	cmp	r2, r3
 8005006:	d302      	bcc.n	800500e <xQueueGenericSendFromISR+0xc2>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d12f      	bne.n	800506e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005014:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005024:	f000 f994 	bl	8005350 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005028:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005030:	d112      	bne.n	8005058 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800503a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503c:	3324      	adds	r3, #36	@ 0x24
 800503e:	4618      	mov	r0, r3
 8005040:	f000 ff9c 	bl	8005f7c <xTaskRemoveFromEventList>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00e      	beq.n	8005068 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00b      	beq.n	8005068 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e007      	b.n	8005068 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005058:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800505c:	3301      	adds	r3, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	b25a      	sxtb	r2, r3
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005068:	2301      	movs	r3, #1
 800506a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800506c:	e001      	b.n	8005072 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800506e:	2300      	movs	r3, #0
 8005070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005074:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800507c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800507e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005080:	4618      	mov	r0, r3
 8005082:	3740      	adds	r7, #64	@ 0x40
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08c      	sub	sp, #48	@ 0x30
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005094:	2300      	movs	r3, #0
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <xQueueReceive+0x32>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	623b      	str	r3, [r7, #32]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <xQueueReceive+0x40>
 80050c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <xQueueReceive+0x44>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <xQueueReceive+0x46>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <xQueueReceive+0x62>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	61fb      	str	r3, [r7, #28]
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	e7fd      	b.n	80050e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050ea:	f001 f96b 	bl	80063c4 <xTaskGetSchedulerState>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <xQueueReceive+0x72>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <xQueueReceive+0x76>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <xQueueReceive+0x78>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10b      	bne.n	800511c <xQueueReceive+0x94>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	61bb      	str	r3, [r7, #24]
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800511c:	f001 fef4 	bl	8006f08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01f      	beq.n	800516c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005130:	f000 f978 	bl	8005424 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	1e5a      	subs	r2, r3, #1
 8005138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00f      	beq.n	8005164 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	3310      	adds	r3, #16
 8005148:	4618      	mov	r0, r3
 800514a:	f000 ff17 	bl	8005f7c <xTaskRemoveFromEventList>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005154:	4b3c      	ldr	r3, [pc, #240]	@ (8005248 <xQueueReceive+0x1c0>)
 8005156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005164:	f001 ff02 	bl	8006f6c <vPortExitCritical>
				return pdPASS;
 8005168:	2301      	movs	r3, #1
 800516a:	e069      	b.n	8005240 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005172:	f001 fefb 	bl	8006f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005176:	2300      	movs	r3, #0
 8005178:	e062      	b.n	8005240 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800517a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	4618      	mov	r0, r3
 8005186:	f000 ffc1 	bl	800610c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800518a:	2301      	movs	r3, #1
 800518c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800518e:	f001 feed 	bl	8006f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005192:	f000 fc8f 	bl	8005ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005196:	f001 feb7 	bl	8006f08 <vPortEnterCritical>
 800519a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051a0:	b25b      	sxtb	r3, r3
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051a6:	d103      	bne.n	80051b0 <xQueueReceive+0x128>
 80051a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051b6:	b25b      	sxtb	r3, r3
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051bc:	d103      	bne.n	80051c6 <xQueueReceive+0x13e>
 80051be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051c6:	f001 fed1 	bl	8006f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ca:	1d3a      	adds	r2, r7, #4
 80051cc:	f107 0310 	add.w	r3, r7, #16
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 ffb0 	bl	8006138 <xTaskCheckForTimeOut>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d123      	bne.n	8005226 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051e0:	f000 f998 	bl	8005514 <prvIsQueueEmpty>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d017      	beq.n	800521a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ec:	3324      	adds	r3, #36	@ 0x24
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fe32 	bl	8005e5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051fa:	f000 f939 	bl	8005470 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051fe:	f000 fc67 	bl	8005ad0 <xTaskResumeAll>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d189      	bne.n	800511c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005208:	4b0f      	ldr	r3, [pc, #60]	@ (8005248 <xQueueReceive+0x1c0>)
 800520a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	e780      	b.n	800511c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800521a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800521c:	f000 f928 	bl	8005470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005220:	f000 fc56 	bl	8005ad0 <xTaskResumeAll>
 8005224:	e77a      	b.n	800511c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005228:	f000 f922 	bl	8005470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800522c:	f000 fc50 	bl	8005ad0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005232:	f000 f96f 	bl	8005514 <prvIsQueueEmpty>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	f43f af6f 	beq.w	800511c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800523e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005240:	4618      	mov	r0, r3
 8005242:	3730      	adds	r7, #48	@ 0x30
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08e      	sub	sp, #56	@ 0x38
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	623b      	str	r3, [r7, #32]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d103      	bne.n	8005288 <xQueueReceiveFromISR+0x3c>
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <xQueueReceiveFromISR+0x40>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <xQueueReceiveFromISR+0x42>
 800528c:	2300      	movs	r3, #0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	61fb      	str	r3, [r7, #28]
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	e7fd      	b.n	80052a6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052aa:	f001 ff0d 	bl	80070c8 <vPortValidateInterruptPriority>
	__asm volatile
 80052ae:	f3ef 8211 	mrs	r2, BASEPRI
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	61ba      	str	r2, [r7, #24]
 80052c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80052c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d02f      	beq.n	8005336 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052e4:	f000 f89e 	bl	8005424 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	1e5a      	subs	r2, r3, #1
 80052ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80052f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052f8:	d112      	bne.n	8005320 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	3310      	adds	r3, #16
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fe38 	bl	8005f7c <xTaskRemoveFromEventList>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00b      	beq.n	8005330 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e007      	b.n	8005330 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005324:	3301      	adds	r3, #1
 8005326:	b2db      	uxtb	r3, r3
 8005328:	b25a      	sxtb	r2, r3
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005330:	2301      	movs	r3, #1
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
 8005334:	e001      	b.n	800533a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	@ 0x34
 800533a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f383 8811 	msr	BASEPRI, r3
}
 8005344:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005348:	4618      	mov	r0, r3
 800534a:	3738      	adds	r7, #56	@ 0x38
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10d      	bne.n	800538a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d14d      	bne.n	8005412 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	4618      	mov	r0, r3
 800537c:	f001 f840 	bl	8006400 <xTaskPriorityDisinherit>
 8005380:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	609a      	str	r2, [r3, #8]
 8005388:	e043      	b.n	8005412 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d119      	bne.n	80053c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6858      	ldr	r0, [r3, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	461a      	mov	r2, r3
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	f002 f9b2 	bl	8007704 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a8:	441a      	add	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d32b      	bcc.n	8005412 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	e026      	b.n	8005412 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68d8      	ldr	r0, [r3, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053cc:	461a      	mov	r2, r3
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	f002 f998 	bl	8007704 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053dc:	425b      	negs	r3, r3
 80053de:	441a      	add	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d207      	bcs.n	8005400 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f8:	425b      	negs	r3, r3
 80053fa:	441a      	add	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d105      	bne.n	8005412 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	3b01      	subs	r3, #1
 8005410:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800541a:	697b      	ldr	r3, [r7, #20]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d018      	beq.n	8005468 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	441a      	add	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d303      	bcc.n	8005458 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68d9      	ldr	r1, [r3, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005460:	461a      	mov	r2, r3
 8005462:	6838      	ldr	r0, [r7, #0]
 8005464:	f002 f94e 	bl	8007704 <memcpy>
	}
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005478:	f001 fd46 	bl	8006f08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005482:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005484:	e011      	b.n	80054aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548a:	2b00      	cmp	r3, #0
 800548c:	d012      	beq.n	80054b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3324      	adds	r3, #36	@ 0x24
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fd72 	bl	8005f7c <xTaskRemoveFromEventList>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800549e:	f000 feaf 	bl	8006200 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	dce9      	bgt.n	8005486 <prvUnlockQueue+0x16>
 80054b2:	e000      	b.n	80054b6 <prvUnlockQueue+0x46>
					break;
 80054b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	22ff      	movs	r2, #255	@ 0xff
 80054ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80054be:	f001 fd55 	bl	8006f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054c2:	f001 fd21 	bl	8006f08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054ce:	e011      	b.n	80054f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d012      	beq.n	80054fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3310      	adds	r3, #16
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fd4d 	bl	8005f7c <xTaskRemoveFromEventList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80054e8:	f000 fe8a 	bl	8006200 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dce9      	bgt.n	80054d0 <prvUnlockQueue+0x60>
 80054fc:	e000      	b.n	8005500 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80054fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	22ff      	movs	r2, #255	@ 0xff
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005508:	f001 fd30 	bl	8006f6c <vPortExitCritical>
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800551c:	f001 fcf4 	bl	8006f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005524:	2b00      	cmp	r3, #0
 8005526:	d102      	bne.n	800552e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005528:	2301      	movs	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	e001      	b.n	8005532 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005532:	f001 fd1b 	bl	8006f6c <vPortExitCritical>

	return xReturn;
 8005536:	68fb      	ldr	r3, [r7, #12]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005548:	f001 fcde 	bl	8006f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005554:	429a      	cmp	r2, r3
 8005556:	d102      	bne.n	800555e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005558:	2301      	movs	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	e001      	b.n	8005562 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005562:	f001 fd03 	bl	8006f6c <vPortExitCritical>

	return xReturn;
 8005566:	68fb      	ldr	r3, [r7, #12]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e014      	b.n	80055aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005580:	4a0f      	ldr	r2, [pc, #60]	@ (80055c0 <vQueueAddToRegistry+0x50>)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10b      	bne.n	80055a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800558c:	490c      	ldr	r1, [pc, #48]	@ (80055c0 <vQueueAddToRegistry+0x50>)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005596:	4a0a      	ldr	r2, [pc, #40]	@ (80055c0 <vQueueAddToRegistry+0x50>)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4413      	add	r3, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055a2:	e006      	b.n	80055b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3301      	adds	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b07      	cmp	r3, #7
 80055ae:	d9e7      	bls.n	8005580 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	2000086c 	.word	0x2000086c

080055c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055d4:	f001 fc98 	bl	8006f08 <vPortEnterCritical>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055e4:	d103      	bne.n	80055ee <vQueueWaitForMessageRestricted+0x2a>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055f4:	b25b      	sxtb	r3, r3
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055fa:	d103      	bne.n	8005604 <vQueueWaitForMessageRestricted+0x40>
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005604:	f001 fcb2 	bl	8006f6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560c:	2b00      	cmp	r3, #0
 800560e:	d106      	bne.n	800561e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	3324      	adds	r3, #36	@ 0x24
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fc83 	bl	8005f24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800561e:	6978      	ldr	r0, [r7, #20]
 8005620:	f7ff ff26 	bl	8005470 <prvUnlockQueue>
	}
 8005624:	bf00      	nop
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08e      	sub	sp, #56	@ 0x38
 8005630:	af04      	add	r7, sp, #16
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800563a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	623b      	str	r3, [r7, #32]
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10b      	bne.n	8005676 <xTaskCreateStatic+0x4a>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	61fb      	str	r3, [r7, #28]
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	e7fd      	b.n	8005672 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005676:	235c      	movs	r3, #92	@ 0x5c
 8005678:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b5c      	cmp	r3, #92	@ 0x5c
 800567e:	d00b      	beq.n	8005698 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	61bb      	str	r3, [r7, #24]
}
 8005692:	bf00      	nop
 8005694:	bf00      	nop
 8005696:	e7fd      	b.n	8005694 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005698:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01e      	beq.n	80056de <xTaskCreateStatic+0xb2>
 80056a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01b      	beq.n	80056de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056b8:	2300      	movs	r3, #0
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	9302      	str	r3, [sp, #8]
 80056c0:	f107 0314 	add.w	r3, r7, #20
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f850 	bl	8005776 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056d8:	f000 f8de 	bl	8005898 <prvAddNewTaskToReadyList>
 80056dc:	e001      	b.n	80056e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056e2:	697b      	ldr	r3, [r7, #20]
	}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3728      	adds	r7, #40	@ 0x28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	@ 0x30
 80056f0:	af04      	add	r7, sp, #16
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4618      	mov	r0, r3
 8005702:	f001 fd23 	bl	800714c <pvPortMalloc>
 8005706:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00e      	beq.n	800572c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800570e:	205c      	movs	r0, #92	@ 0x5c
 8005710:	f001 fd1c 	bl	800714c <pvPortMalloc>
 8005714:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	631a      	str	r2, [r3, #48]	@ 0x30
 8005722:	e005      	b.n	8005730 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005724:	6978      	ldr	r0, [r7, #20]
 8005726:	f001 fddf 	bl	80072e8 <vPortFree>
 800572a:	e001      	b.n	8005730 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d017      	beq.n	8005766 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800573e:	88fa      	ldrh	r2, [r7, #6]
 8005740:	2300      	movs	r3, #0
 8005742:	9303      	str	r3, [sp, #12]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	9302      	str	r3, [sp, #8]
 8005748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f80e 	bl	8005776 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800575a:	69f8      	ldr	r0, [r7, #28]
 800575c:	f000 f89c 	bl	8005898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005760:	2301      	movs	r3, #1
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	e002      	b.n	800576c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800576a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800576c:	69bb      	ldr	r3, [r7, #24]
	}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b088      	sub	sp, #32
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
 8005782:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	461a      	mov	r2, r3
 800578e:	21a5      	movs	r1, #165	@ 0xa5
 8005790:	f001 ff72 	bl	8007678 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800579e:	3b01      	subs	r3, #1
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f023 0307 	bic.w	r3, r3, #7
 80057ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00b      	beq.n	80057d0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	617b      	str	r3, [r7, #20]
}
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
 80057ce:	e7fd      	b.n	80057cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01f      	beq.n	8005816 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e012      	b.n	8005802 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	7819      	ldrb	r1, [r3, #0]
 80057e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	3334      	adds	r3, #52	@ 0x34
 80057ec:	460a      	mov	r2, r1
 80057ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d006      	beq.n	800580a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3301      	adds	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b0f      	cmp	r3, #15
 8005806:	d9e9      	bls.n	80057dc <prvInitialiseNewTask+0x66>
 8005808:	e000      	b.n	800580c <prvInitialiseNewTask+0x96>
			{
				break;
 800580a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005814:	e003      	b.n	800581e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	2b37      	cmp	r3, #55	@ 0x37
 8005822:	d901      	bls.n	8005828 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005824:	2337      	movs	r3, #55	@ 0x37
 8005826:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800582c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005832:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	2200      	movs	r2, #0
 8005838:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	3304      	adds	r3, #4
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff f85c 	bl	80048fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	3318      	adds	r3, #24
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff f857 	bl	80048fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005862:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005866:	2200      	movs	r2, #0
 8005868:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	69b8      	ldr	r0, [r7, #24]
 8005878:	f001 fa18 	bl	8006cac <pxPortInitialiseStack>
 800587c:	4602      	mov	r2, r0
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800588c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800588e:	bf00      	nop
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058a0:	f001 fb32 	bl	8006f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058a4:	4b2d      	ldr	r3, [pc, #180]	@ (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	4a2c      	ldr	r2, [pc, #176]	@ (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058bc:	4b27      	ldr	r3, [pc, #156]	@ (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d110      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058c4:	f000 fcc0 	bl	8006248 <prvInitialiseTaskLists>
 80058c8:	e00d      	b.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ca:	4b26      	ldr	r3, [pc, #152]	@ (8005964 <prvAddNewTaskToReadyList+0xcc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058d2:	4b23      	ldr	r3, [pc, #140]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d802      	bhi.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058e6:	4b20      	ldr	r3, [pc, #128]	@ (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fc:	4b1b      	ldr	r3, [pc, #108]	@ (800596c <prvAddNewTaskToReadyList+0xd4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d903      	bls.n	800590c <prvAddNewTaskToReadyList+0x74>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005908:	4a18      	ldr	r2, [pc, #96]	@ (800596c <prvAddNewTaskToReadyList+0xd4>)
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4a15      	ldr	r2, [pc, #84]	@ (8005970 <prvAddNewTaskToReadyList+0xd8>)
 800591a:	441a      	add	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f7fe fff7 	bl	8004916 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005928:	f001 fb20 	bl	8006f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800592c:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <prvAddNewTaskToReadyList+0xcc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005934:	4b0a      	ldr	r3, [pc, #40]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	429a      	cmp	r2, r3
 8005940:	d207      	bcs.n	8005952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005942:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <prvAddNewTaskToReadyList+0xdc>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000d80 	.word	0x20000d80
 8005960:	200008ac 	.word	0x200008ac
 8005964:	20000d8c 	.word	0x20000d8c
 8005968:	20000d9c 	.word	0x20000d9c
 800596c:	20000d88 	.word	0x20000d88
 8005970:	200008b0 	.word	0x200008b0
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d018      	beq.n	80059bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800598a:	4b14      	ldr	r3, [pc, #80]	@ (80059dc <vTaskDelay+0x64>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <vTaskDelay+0x32>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60bb      	str	r3, [r7, #8]
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	e7fd      	b.n	80059a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059aa:	f000 f883 	bl	8005ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059ae:	2100      	movs	r1, #0
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fdad 	bl	8006510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059b6:	f000 f88b 	bl	8005ad0 <xTaskResumeAll>
 80059ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d107      	bne.n	80059d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80059c2:	4b07      	ldr	r3, [pc, #28]	@ (80059e0 <vTaskDelay+0x68>)
 80059c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000da8 	.word	0x20000da8
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	@ 0x28
 80059e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059f2:	463a      	mov	r2, r7
 80059f4:	1d39      	adds	r1, r7, #4
 80059f6:	f107 0308 	add.w	r3, r7, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe fd34 	bl	8004468 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	9202      	str	r2, [sp, #8]
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	460a      	mov	r2, r1
 8005a12:	4922      	ldr	r1, [pc, #136]	@ (8005a9c <vTaskStartScheduler+0xb8>)
 8005a14:	4822      	ldr	r0, [pc, #136]	@ (8005aa0 <vTaskStartScheduler+0xbc>)
 8005a16:	f7ff fe09 	bl	800562c <xTaskCreateStatic>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4a21      	ldr	r2, [pc, #132]	@ (8005aa4 <vTaskStartScheduler+0xc0>)
 8005a1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a20:	4b20      	ldr	r3, [pc, #128]	@ (8005aa4 <vTaskStartScheduler+0xc0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	e001      	b.n	8005a32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d102      	bne.n	8005a3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a38:	f000 fdbe 	bl	80065b8 <xTimerCreateTimerTask>
 8005a3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d116      	bne.n	8005a72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	613b      	str	r3, [r7, #16]
}
 8005a56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a58:	4b13      	ldr	r3, [pc, #76]	@ (8005aa8 <vTaskStartScheduler+0xc4>)
 8005a5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a60:	4b12      	ldr	r3, [pc, #72]	@ (8005aac <vTaskStartScheduler+0xc8>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a66:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <vTaskStartScheduler+0xcc>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a6c:	f001 f9a8 	bl	8006dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a70:	e00f      	b.n	8005a92 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a78:	d10b      	bne.n	8005a92 <vTaskStartScheduler+0xae>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	60fb      	str	r3, [r7, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <vTaskStartScheduler+0xaa>
}
 8005a92:	bf00      	nop
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	080080cc 	.word	0x080080cc
 8005aa0:	08006219 	.word	0x08006219
 8005aa4:	20000da4 	.word	0x20000da4
 8005aa8:	20000da0 	.word	0x20000da0
 8005aac:	20000d8c 	.word	0x20000d8c
 8005ab0:	20000d84 	.word	0x20000d84

08005ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ab8:	4b04      	ldr	r3, [pc, #16]	@ (8005acc <vTaskSuspendAll+0x18>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	4a03      	ldr	r2, [pc, #12]	@ (8005acc <vTaskSuspendAll+0x18>)
 8005ac0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ac2:	bf00      	nop
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000da8 	.word	0x20000da8

08005ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ade:	4b42      	ldr	r3, [pc, #264]	@ (8005be8 <xTaskResumeAll+0x118>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <xTaskResumeAll+0x2e>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	603b      	str	r3, [r7, #0]
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	e7fd      	b.n	8005afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005afe:	f001 fa03 	bl	8006f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b02:	4b39      	ldr	r3, [pc, #228]	@ (8005be8 <xTaskResumeAll+0x118>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	4a37      	ldr	r2, [pc, #220]	@ (8005be8 <xTaskResumeAll+0x118>)
 8005b0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b0c:	4b36      	ldr	r3, [pc, #216]	@ (8005be8 <xTaskResumeAll+0x118>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d162      	bne.n	8005bda <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b14:	4b35      	ldr	r3, [pc, #212]	@ (8005bec <xTaskResumeAll+0x11c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05e      	beq.n	8005bda <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b1c:	e02f      	b.n	8005b7e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b1e:	4b34      	ldr	r3, [pc, #208]	@ (8005bf0 <xTaskResumeAll+0x120>)
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3318      	adds	r3, #24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe ff50 	bl	80049d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe ff4b 	bl	80049d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf4 <xTaskResumeAll+0x124>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d903      	bls.n	8005b4e <xTaskResumeAll+0x7e>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf4 <xTaskResumeAll+0x124>)
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4a27      	ldr	r2, [pc, #156]	@ (8005bf8 <xTaskResumeAll+0x128>)
 8005b5c:	441a      	add	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4619      	mov	r1, r3
 8005b64:	4610      	mov	r0, r2
 8005b66:	f7fe fed6 	bl	8004916 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6e:	4b23      	ldr	r3, [pc, #140]	@ (8005bfc <xTaskResumeAll+0x12c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005b78:	4b21      	ldr	r3, [pc, #132]	@ (8005c00 <xTaskResumeAll+0x130>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf0 <xTaskResumeAll+0x120>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1cb      	bne.n	8005b1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b8c:	f000 fbfa 	bl	8006384 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b90:	4b1c      	ldr	r3, [pc, #112]	@ (8005c04 <xTaskResumeAll+0x134>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d010      	beq.n	8005bbe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b9c:	f000 f846 	bl	8005c2c <xTaskIncrementTick>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005ba6:	4b16      	ldr	r3, [pc, #88]	@ (8005c00 <xTaskResumeAll+0x130>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f1      	bne.n	8005b9c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005bb8:	4b12      	ldr	r3, [pc, #72]	@ (8005c04 <xTaskResumeAll+0x134>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bbe:	4b10      	ldr	r3, [pc, #64]	@ (8005c00 <xTaskResumeAll+0x130>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bca:	4b0f      	ldr	r3, [pc, #60]	@ (8005c08 <xTaskResumeAll+0x138>)
 8005bcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bda:	f001 f9c7 	bl	8006f6c <vPortExitCritical>

	return xAlreadyYielded;
 8005bde:	68bb      	ldr	r3, [r7, #8]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000da8 	.word	0x20000da8
 8005bec:	20000d80 	.word	0x20000d80
 8005bf0:	20000d40 	.word	0x20000d40
 8005bf4:	20000d88 	.word	0x20000d88
 8005bf8:	200008b0 	.word	0x200008b0
 8005bfc:	200008ac 	.word	0x200008ac
 8005c00:	20000d94 	.word	0x20000d94
 8005c04:	20000d90 	.word	0x20000d90
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c12:	4b05      	ldr	r3, [pc, #20]	@ (8005c28 <xTaskGetTickCount+0x1c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c18:	687b      	ldr	r3, [r7, #4]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000d84 	.word	0x20000d84

08005c2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c36:	4b4f      	ldr	r3, [pc, #316]	@ (8005d74 <xTaskIncrementTick+0x148>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f040 8090 	bne.w	8005d60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c40:	4b4d      	ldr	r3, [pc, #308]	@ (8005d78 <xTaskIncrementTick+0x14c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3301      	adds	r3, #1
 8005c46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c48:	4a4b      	ldr	r2, [pc, #300]	@ (8005d78 <xTaskIncrementTick+0x14c>)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d121      	bne.n	8005c98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c54:	4b49      	ldr	r3, [pc, #292]	@ (8005d7c <xTaskIncrementTick+0x150>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	603b      	str	r3, [r7, #0]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <xTaskIncrementTick+0x46>
 8005c76:	4b41      	ldr	r3, [pc, #260]	@ (8005d7c <xTaskIncrementTick+0x150>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	4b40      	ldr	r3, [pc, #256]	@ (8005d80 <xTaskIncrementTick+0x154>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a3e      	ldr	r2, [pc, #248]	@ (8005d7c <xTaskIncrementTick+0x150>)
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	4a3e      	ldr	r2, [pc, #248]	@ (8005d80 <xTaskIncrementTick+0x154>)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d84 <xTaskIncrementTick+0x158>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	4a3c      	ldr	r2, [pc, #240]	@ (8005d84 <xTaskIncrementTick+0x158>)
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	f000 fb76 	bl	8006384 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c98:	4b3b      	ldr	r3, [pc, #236]	@ (8005d88 <xTaskIncrementTick+0x15c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d349      	bcc.n	8005d36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ca2:	4b36      	ldr	r3, [pc, #216]	@ (8005d7c <xTaskIncrementTick+0x150>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cac:	4b36      	ldr	r3, [pc, #216]	@ (8005d88 <xTaskIncrementTick+0x15c>)
 8005cae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cb2:	601a      	str	r2, [r3, #0]
					break;
 8005cb4:	e03f      	b.n	8005d36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb6:	4b31      	ldr	r3, [pc, #196]	@ (8005d7c <xTaskIncrementTick+0x150>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d203      	bcs.n	8005cd6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cce:	4a2e      	ldr	r2, [pc, #184]	@ (8005d88 <xTaskIncrementTick+0x15c>)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cd4:	e02f      	b.n	8005d36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	3304      	adds	r3, #4
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fe78 	bl	80049d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d004      	beq.n	8005cf2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	3318      	adds	r3, #24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe fe6f 	bl	80049d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf6:	4b25      	ldr	r3, [pc, #148]	@ (8005d8c <xTaskIncrementTick+0x160>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d903      	bls.n	8005d06 <xTaskIncrementTick+0xda>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d02:	4a22      	ldr	r2, [pc, #136]	@ (8005d8c <xTaskIncrementTick+0x160>)
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4a1f      	ldr	r2, [pc, #124]	@ (8005d90 <xTaskIncrementTick+0x164>)
 8005d14:	441a      	add	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7fe fdfa 	bl	8004916 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d26:	4b1b      	ldr	r3, [pc, #108]	@ (8005d94 <xTaskIncrementTick+0x168>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d3b8      	bcc.n	8005ca2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d34:	e7b5      	b.n	8005ca2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d36:	4b17      	ldr	r3, [pc, #92]	@ (8005d94 <xTaskIncrementTick+0x168>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3c:	4914      	ldr	r1, [pc, #80]	@ (8005d90 <xTaskIncrementTick+0x164>)
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d901      	bls.n	8005d52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d52:	4b11      	ldr	r3, [pc, #68]	@ (8005d98 <xTaskIncrementTick+0x16c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	e004      	b.n	8005d6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d60:	4b0e      	ldr	r3, [pc, #56]	@ (8005d9c <xTaskIncrementTick+0x170>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	4a0d      	ldr	r2, [pc, #52]	@ (8005d9c <xTaskIncrementTick+0x170>)
 8005d68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d6a:	697b      	ldr	r3, [r7, #20]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000da8 	.word	0x20000da8
 8005d78:	20000d84 	.word	0x20000d84
 8005d7c:	20000d38 	.word	0x20000d38
 8005d80:	20000d3c 	.word	0x20000d3c
 8005d84:	20000d98 	.word	0x20000d98
 8005d88:	20000da0 	.word	0x20000da0
 8005d8c:	20000d88 	.word	0x20000d88
 8005d90:	200008b0 	.word	0x200008b0
 8005d94:	200008ac 	.word	0x200008ac
 8005d98:	20000d94 	.word	0x20000d94
 8005d9c:	20000d90 	.word	0x20000d90

08005da0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005da6:	4b28      	ldr	r3, [pc, #160]	@ (8005e48 <vTaskSwitchContext+0xa8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dae:	4b27      	ldr	r3, [pc, #156]	@ (8005e4c <vTaskSwitchContext+0xac>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005db4:	e042      	b.n	8005e3c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005db6:	4b25      	ldr	r3, [pc, #148]	@ (8005e4c <vTaskSwitchContext+0xac>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dbc:	4b24      	ldr	r3, [pc, #144]	@ (8005e50 <vTaskSwitchContext+0xb0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e011      	b.n	8005de8 <vTaskSwitchContext+0x48>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <vTaskSwitchContext+0x42>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	607b      	str	r3, [r7, #4]
}
 8005ddc:	bf00      	nop
 8005dde:	bf00      	nop
 8005de0:	e7fd      	b.n	8005dde <vTaskSwitchContext+0x3e>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	491a      	ldr	r1, [pc, #104]	@ (8005e54 <vTaskSwitchContext+0xb4>)
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0e3      	beq.n	8005dc4 <vTaskSwitchContext+0x24>
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4a13      	ldr	r2, [pc, #76]	@ (8005e54 <vTaskSwitchContext+0xb4>)
 8005e08:	4413      	add	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d104      	bne.n	8005e2c <vTaskSwitchContext+0x8c>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	605a      	str	r2, [r3, #4]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	4a09      	ldr	r2, [pc, #36]	@ (8005e58 <vTaskSwitchContext+0xb8>)
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4a06      	ldr	r2, [pc, #24]	@ (8005e50 <vTaskSwitchContext+0xb0>)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6013      	str	r3, [r2, #0]
}
 8005e3c:	bf00      	nop
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	20000da8 	.word	0x20000da8
 8005e4c:	20000d94 	.word	0x20000d94
 8005e50:	20000d88 	.word	0x20000d88
 8005e54:	200008b0 	.word	0x200008b0
 8005e58:	200008ac 	.word	0x200008ac

08005e5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60fb      	str	r3, [r7, #12]
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	e7fd      	b.n	8005e80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e84:	4b07      	ldr	r3, [pc, #28]	@ (8005ea4 <vTaskPlaceOnEventList+0x48>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3318      	adds	r3, #24
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fe fd66 	bl	800495e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e92:	2101      	movs	r1, #1
 8005e94:	6838      	ldr	r0, [r7, #0]
 8005e96:	f000 fb3b 	bl	8006510 <prvAddCurrentTaskToDelayedList>
}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200008ac 	.word	0x200008ac

08005ea8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	617b      	str	r3, [r7, #20]
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	e7fd      	b.n	8005ece <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005ed2:	4b12      	ldr	r3, [pc, #72]	@ (8005f1c <vTaskPlaceOnUnorderedEventList+0x74>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10b      	bne.n	8005ef2 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	613b      	str	r3, [r7, #16]
}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	e7fd      	b.n	8005eee <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8005f20 <vTaskPlaceOnUnorderedEventList+0x78>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005efc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005efe:	4b08      	ldr	r3, [pc, #32]	@ (8005f20 <vTaskPlaceOnUnorderedEventList+0x78>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3318      	adds	r3, #24
 8005f04:	4619      	mov	r1, r3
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f7fe fd05 	bl	8004916 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fafe 	bl	8006510 <prvAddCurrentTaskToDelayedList>
}
 8005f14:	bf00      	nop
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20000da8 	.word	0x20000da8
 8005f20:	200008ac 	.word	0x200008ac

08005f24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	617b      	str	r3, [r7, #20]
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	e7fd      	b.n	8005f4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f78 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3318      	adds	r3, #24
 8005f54:	4619      	mov	r1, r3
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7fe fcdd 	bl	8004916 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	68b8      	ldr	r0, [r7, #8]
 8005f6c:	f000 fad0 	bl	8006510 <prvAddCurrentTaskToDelayedList>
	}
 8005f70:	bf00      	nop
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	200008ac 	.word	0x200008ac

08005f7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	60fb      	str	r3, [r7, #12]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3318      	adds	r3, #24
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fd0e 	bl	80049d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800602c <xTaskRemoveFromEventList+0xb0>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11d      	bne.n	8005ff8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fd05 	bl	80049d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fca:	4b19      	ldr	r3, [pc, #100]	@ (8006030 <xTaskRemoveFromEventList+0xb4>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d903      	bls.n	8005fda <xTaskRemoveFromEventList+0x5e>
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	4a16      	ldr	r2, [pc, #88]	@ (8006030 <xTaskRemoveFromEventList+0xb4>)
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4a13      	ldr	r2, [pc, #76]	@ (8006034 <xTaskRemoveFromEventList+0xb8>)
 8005fe8:	441a      	add	r2, r3
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7fe fc90 	bl	8004916 <vListInsertEnd>
 8005ff6:	e005      	b.n	8006004 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	3318      	adds	r3, #24
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	480e      	ldr	r0, [pc, #56]	@ (8006038 <xTaskRemoveFromEventList+0xbc>)
 8006000:	f7fe fc89 	bl	8004916 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006008:	4b0c      	ldr	r3, [pc, #48]	@ (800603c <xTaskRemoveFromEventList+0xc0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	429a      	cmp	r2, r3
 8006010:	d905      	bls.n	800601e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006012:	2301      	movs	r3, #1
 8006014:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006016:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <xTaskRemoveFromEventList+0xc4>)
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e001      	b.n	8006022 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006022:	697b      	ldr	r3, [r7, #20]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20000da8 	.word	0x20000da8
 8006030:	20000d88 	.word	0x20000d88
 8006034:	200008b0 	.word	0x200008b0
 8006038:	20000d40 	.word	0x20000d40
 800603c:	200008ac 	.word	0x200008ac
 8006040:	20000d94 	.word	0x20000d94

08006044 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800604e:	4b2a      	ldr	r3, [pc, #168]	@ (80060f8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10b      	bne.n	800606e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	613b      	str	r3, [r7, #16]
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	e7fd      	b.n	800606a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	60fb      	str	r3, [r7, #12]
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	e7fd      	b.n	8006098 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7fe fc97 	bl	80049d0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fc92 	bl	80049d0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b0:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <vTaskRemoveFromUnorderedEventList+0xb8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d903      	bls.n	80060c0 <vTaskRemoveFromUnorderedEventList+0x7c>
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	4a0f      	ldr	r2, [pc, #60]	@ (80060fc <vTaskRemoveFromUnorderedEventList+0xb8>)
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006100 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80060ce:	441a      	add	r2, r3
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f7fe fc1d 	bl	8004916 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e0:	4b08      	ldr	r3, [pc, #32]	@ (8006104 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d902      	bls.n	80060f0 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80060ea:	4b07      	ldr	r3, [pc, #28]	@ (8006108 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
	}
}
 80060f0:	bf00      	nop
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20000da8 	.word	0x20000da8
 80060fc:	20000d88 	.word	0x20000d88
 8006100:	200008b0 	.word	0x200008b0
 8006104:	200008ac 	.word	0x200008ac
 8006108:	20000d94 	.word	0x20000d94

0800610c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006114:	4b06      	ldr	r3, [pc, #24]	@ (8006130 <vTaskInternalSetTimeOutState+0x24>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800611c:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <vTaskInternalSetTimeOutState+0x28>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	605a      	str	r2, [r3, #4]
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	20000d98 	.word	0x20000d98
 8006134:	20000d84 	.word	0x20000d84

08006138 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	613b      	str	r3, [r7, #16]
}
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	e7fd      	b.n	800615c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	60fb      	str	r3, [r7, #12]
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800617e:	f000 fec3 	bl	8006f08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006182:	4b1d      	ldr	r3, [pc, #116]	@ (80061f8 <xTaskCheckForTimeOut+0xc0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800619a:	d102      	bne.n	80061a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800619c:	2300      	movs	r3, #0
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e023      	b.n	80061ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <xTaskCheckForTimeOut+0xc4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d007      	beq.n	80061be <xTaskCheckForTimeOut+0x86>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d302      	bcc.n	80061be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	e015      	b.n	80061ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d20b      	bcs.n	80061e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff ff99 	bl	800610c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	e004      	b.n	80061ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061ea:	f000 febf 	bl	8006f6c <vPortExitCritical>

	return xReturn;
 80061ee:	69fb      	ldr	r3, [r7, #28]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20000d84 	.word	0x20000d84
 80061fc:	20000d98 	.word	0x20000d98

08006200 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006204:	4b03      	ldr	r3, [pc, #12]	@ (8006214 <vTaskMissedYield+0x14>)
 8006206:	2201      	movs	r2, #1
 8006208:	601a      	str	r2, [r3, #0]
}
 800620a:	bf00      	nop
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	20000d94 	.word	0x20000d94

08006218 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006220:	f000 f852 	bl	80062c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006224:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <prvIdleTask+0x28>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d9f9      	bls.n	8006220 <prvIdleTask+0x8>
			{
				taskYIELD();
 800622c:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <prvIdleTask+0x2c>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800623c:	e7f0      	b.n	8006220 <prvIdleTask+0x8>
 800623e:	bf00      	nop
 8006240:	200008b0 	.word	0x200008b0
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800624e:	2300      	movs	r3, #0
 8006250:	607b      	str	r3, [r7, #4]
 8006252:	e00c      	b.n	800626e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4a12      	ldr	r2, [pc, #72]	@ (80062a8 <prvInitialiseTaskLists+0x60>)
 8006260:	4413      	add	r3, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fb2a 	bl	80048bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3301      	adds	r3, #1
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b37      	cmp	r3, #55	@ 0x37
 8006272:	d9ef      	bls.n	8006254 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006274:	480d      	ldr	r0, [pc, #52]	@ (80062ac <prvInitialiseTaskLists+0x64>)
 8006276:	f7fe fb21 	bl	80048bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800627a:	480d      	ldr	r0, [pc, #52]	@ (80062b0 <prvInitialiseTaskLists+0x68>)
 800627c:	f7fe fb1e 	bl	80048bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006280:	480c      	ldr	r0, [pc, #48]	@ (80062b4 <prvInitialiseTaskLists+0x6c>)
 8006282:	f7fe fb1b 	bl	80048bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006286:	480c      	ldr	r0, [pc, #48]	@ (80062b8 <prvInitialiseTaskLists+0x70>)
 8006288:	f7fe fb18 	bl	80048bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800628c:	480b      	ldr	r0, [pc, #44]	@ (80062bc <prvInitialiseTaskLists+0x74>)
 800628e:	f7fe fb15 	bl	80048bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006292:	4b0b      	ldr	r3, [pc, #44]	@ (80062c0 <prvInitialiseTaskLists+0x78>)
 8006294:	4a05      	ldr	r2, [pc, #20]	@ (80062ac <prvInitialiseTaskLists+0x64>)
 8006296:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006298:	4b0a      	ldr	r3, [pc, #40]	@ (80062c4 <prvInitialiseTaskLists+0x7c>)
 800629a:	4a05      	ldr	r2, [pc, #20]	@ (80062b0 <prvInitialiseTaskLists+0x68>)
 800629c:	601a      	str	r2, [r3, #0]
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	200008b0 	.word	0x200008b0
 80062ac:	20000d10 	.word	0x20000d10
 80062b0:	20000d24 	.word	0x20000d24
 80062b4:	20000d40 	.word	0x20000d40
 80062b8:	20000d54 	.word	0x20000d54
 80062bc:	20000d6c 	.word	0x20000d6c
 80062c0:	20000d38 	.word	0x20000d38
 80062c4:	20000d3c 	.word	0x20000d3c

080062c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ce:	e019      	b.n	8006304 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062d0:	f000 fe1a 	bl	8006f08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d4:	4b10      	ldr	r3, [pc, #64]	@ (8006318 <prvCheckTasksWaitingTermination+0x50>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3304      	adds	r3, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fb75 	bl	80049d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <prvCheckTasksWaitingTermination+0x54>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	4a0b      	ldr	r2, [pc, #44]	@ (800631c <prvCheckTasksWaitingTermination+0x54>)
 80062ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006320 <prvCheckTasksWaitingTermination+0x58>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006320 <prvCheckTasksWaitingTermination+0x58>)
 80062f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062fa:	f000 fe37 	bl	8006f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f810 	bl	8006324 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006304:	4b06      	ldr	r3, [pc, #24]	@ (8006320 <prvCheckTasksWaitingTermination+0x58>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e1      	bne.n	80062d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000d54 	.word	0x20000d54
 800631c:	20000d80 	.word	0x20000d80
 8006320:	20000d68 	.word	0x20000d68

08006324 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006332:	2b00      	cmp	r3, #0
 8006334:	d108      	bne.n	8006348 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633a:	4618      	mov	r0, r3
 800633c:	f000 ffd4 	bl	80072e8 <vPortFree>
				vPortFree( pxTCB );
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 ffd1 	bl	80072e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006346:	e019      	b.n	800637c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800634e:	2b01      	cmp	r3, #1
 8006350:	d103      	bne.n	800635a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 ffc8 	bl	80072e8 <vPortFree>
	}
 8006358:	e010      	b.n	800637c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006360:	2b02      	cmp	r3, #2
 8006362:	d00b      	beq.n	800637c <prvDeleteTCB+0x58>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	60fb      	str	r3, [r7, #12]
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	e7fd      	b.n	8006378 <prvDeleteTCB+0x54>
	}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800638a:	4b0c      	ldr	r3, [pc, #48]	@ (80063bc <prvResetNextTaskUnblockTime+0x38>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006394:	4b0a      	ldr	r3, [pc, #40]	@ (80063c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006396:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800639a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800639c:	e008      	b.n	80063b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800639e:	4b07      	ldr	r3, [pc, #28]	@ (80063bc <prvResetNextTaskUnblockTime+0x38>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4a04      	ldr	r2, [pc, #16]	@ (80063c0 <prvResetNextTaskUnblockTime+0x3c>)
 80063ae:	6013      	str	r3, [r2, #0]
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20000d38 	.word	0x20000d38
 80063c0:	20000da0 	.word	0x20000da0

080063c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063ca:	4b0b      	ldr	r3, [pc, #44]	@ (80063f8 <xTaskGetSchedulerState+0x34>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063d2:	2301      	movs	r3, #1
 80063d4:	607b      	str	r3, [r7, #4]
 80063d6:	e008      	b.n	80063ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d8:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <xTaskGetSchedulerState+0x38>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063e0:	2302      	movs	r3, #2
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	e001      	b.n	80063ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063ea:	687b      	ldr	r3, [r7, #4]
	}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20000d8c 	.word	0x20000d8c
 80063fc:	20000da8 	.word	0x20000da8

08006400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d058      	beq.n	80064c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006416:	4b2f      	ldr	r3, [pc, #188]	@ (80064d4 <xTaskPriorityDisinherit+0xd4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	429a      	cmp	r2, r3
 800641e:	d00b      	beq.n	8006438 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	60bb      	str	r3, [r7, #8]
}
 8006452:	bf00      	nop
 8006454:	bf00      	nop
 8006456:	e7fd      	b.n	8006454 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800645c:	1e5a      	subs	r2, r3, #1
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800646a:	429a      	cmp	r2, r3
 800646c:	d02c      	beq.n	80064c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006472:	2b00      	cmp	r3, #0
 8006474:	d128      	bne.n	80064c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	3304      	adds	r3, #4
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe faa8 	bl	80049d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006498:	4b0f      	ldr	r3, [pc, #60]	@ (80064d8 <xTaskPriorityDisinherit+0xd8>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d903      	bls.n	80064a8 <xTaskPriorityDisinherit+0xa8>
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a4:	4a0c      	ldr	r2, [pc, #48]	@ (80064d8 <xTaskPriorityDisinherit+0xd8>)
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4a09      	ldr	r2, [pc, #36]	@ (80064dc <xTaskPriorityDisinherit+0xdc>)
 80064b6:	441a      	add	r2, r3
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f7fe fa29 	bl	8004916 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064c8:	697b      	ldr	r3, [r7, #20]
	}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	200008ac 	.word	0x200008ac
 80064d8:	20000d88 	.word	0x20000d88
 80064dc:	200008b0 	.word	0x200008b0

080064e0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80064e6:	4b09      	ldr	r3, [pc, #36]	@ (800650c <uxTaskResetEventItemValue+0x2c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ee:	4b07      	ldr	r3, [pc, #28]	@ (800650c <uxTaskResetEventItemValue+0x2c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <uxTaskResetEventItemValue+0x2c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80064fc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80064fe:	687b      	ldr	r3, [r7, #4]
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	200008ac 	.word	0x200008ac

08006510 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800651a:	4b21      	ldr	r3, [pc, #132]	@ (80065a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006520:	4b20      	ldr	r3, [pc, #128]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3304      	adds	r3, #4
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe fa52 	bl	80049d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006532:	d10a      	bne.n	800654a <prvAddCurrentTaskToDelayedList+0x3a>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800653a:	4b1a      	ldr	r3, [pc, #104]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4819      	ldr	r0, [pc, #100]	@ (80065a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006544:	f7fe f9e7 	bl	8004916 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006548:	e026      	b.n	8006598 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4413      	add	r3, r2
 8006550:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006552:	4b14      	ldr	r3, [pc, #80]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	429a      	cmp	r2, r3
 8006560:	d209      	bcs.n	8006576 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006562:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f7fe f9f5 	bl	800495e <vListInsert>
}
 8006574:	e010      	b.n	8006598 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006576:	4b0e      	ldr	r3, [pc, #56]	@ (80065b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7fe f9eb 	bl	800495e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006588:	4b0a      	ldr	r3, [pc, #40]	@ (80065b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	d202      	bcs.n	8006598 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006592:	4a08      	ldr	r2, [pc, #32]	@ (80065b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6013      	str	r3, [r2, #0]
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000d84 	.word	0x20000d84
 80065a4:	200008ac 	.word	0x200008ac
 80065a8:	20000d6c 	.word	0x20000d6c
 80065ac:	20000d3c 	.word	0x20000d3c
 80065b0:	20000d38 	.word	0x20000d38
 80065b4:	20000da0 	.word	0x20000da0

080065b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	@ 0x28
 80065bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065c2:	f000 fb13 	bl	8006bec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065c6:	4b1d      	ldr	r3, [pc, #116]	@ (800663c <xTimerCreateTimerTask+0x84>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d021      	beq.n	8006612 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065d6:	1d3a      	adds	r2, r7, #4
 80065d8:	f107 0108 	add.w	r1, r7, #8
 80065dc:	f107 030c 	add.w	r3, r7, #12
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fd ff5b 	bl	800449c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	9202      	str	r2, [sp, #8]
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	2302      	movs	r3, #2
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	460a      	mov	r2, r1
 80065f8:	4911      	ldr	r1, [pc, #68]	@ (8006640 <xTimerCreateTimerTask+0x88>)
 80065fa:	4812      	ldr	r0, [pc, #72]	@ (8006644 <xTimerCreateTimerTask+0x8c>)
 80065fc:	f7ff f816 	bl	800562c <xTaskCreateStatic>
 8006600:	4603      	mov	r3, r0
 8006602:	4a11      	ldr	r2, [pc, #68]	@ (8006648 <xTimerCreateTimerTask+0x90>)
 8006604:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006606:	4b10      	ldr	r3, [pc, #64]	@ (8006648 <xTimerCreateTimerTask+0x90>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800660e:	2301      	movs	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10b      	bne.n	8006630 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	613b      	str	r3, [r7, #16]
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	e7fd      	b.n	800662c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006630:	697b      	ldr	r3, [r7, #20]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000ddc 	.word	0x20000ddc
 8006640:	080080d4 	.word	0x080080d4
 8006644:	08006785 	.word	0x08006785
 8006648:	20000de0 	.word	0x20000de0

0800664c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	@ 0x28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800665a:	2300      	movs	r3, #0
 800665c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <xTimerGenericCommand+0x30>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	623b      	str	r3, [r7, #32]
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	e7fd      	b.n	8006678 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800667c:	4b19      	ldr	r3, [pc, #100]	@ (80066e4 <xTimerGenericCommand+0x98>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d02a      	beq.n	80066da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b05      	cmp	r3, #5
 8006694:	dc18      	bgt.n	80066c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006696:	f7ff fe95 	bl	80063c4 <xTaskGetSchedulerState>
 800669a:	4603      	mov	r3, r0
 800669c:	2b02      	cmp	r3, #2
 800669e:	d109      	bne.n	80066b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066a0:	4b10      	ldr	r3, [pc, #64]	@ (80066e4 <xTimerGenericCommand+0x98>)
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	f107 0110 	add.w	r1, r7, #16
 80066a8:	2300      	movs	r3, #0
 80066aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ac:	f7fe fb4c 	bl	8004d48 <xQueueGenericSend>
 80066b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80066b2:	e012      	b.n	80066da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066b4:	4b0b      	ldr	r3, [pc, #44]	@ (80066e4 <xTimerGenericCommand+0x98>)
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	f107 0110 	add.w	r1, r7, #16
 80066bc:	2300      	movs	r3, #0
 80066be:	2200      	movs	r2, #0
 80066c0:	f7fe fb42 	bl	8004d48 <xQueueGenericSend>
 80066c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80066c6:	e008      	b.n	80066da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066c8:	4b06      	ldr	r3, [pc, #24]	@ (80066e4 <xTimerGenericCommand+0x98>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	f107 0110 	add.w	r1, r7, #16
 80066d0:	2300      	movs	r3, #0
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	f7fe fc3a 	bl	8004f4c <xQueueGenericSendFromISR>
 80066d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3728      	adds	r7, #40	@ 0x28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20000ddc 	.word	0x20000ddc

080066e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f2:	4b23      	ldr	r3, [pc, #140]	@ (8006780 <prvProcessExpiredTimer+0x98>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	3304      	adds	r3, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe f965 	bl	80049d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d023      	beq.n	800675c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	699a      	ldr	r2, [r3, #24]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	18d1      	adds	r1, r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	6978      	ldr	r0, [r7, #20]
 8006722:	f000 f8d5 	bl	80068d0 <prvInsertTimerInActiveList>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d020      	beq.n	800676e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800672c:	2300      	movs	r3, #0
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	2300      	movs	r3, #0
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	2100      	movs	r1, #0
 8006736:	6978      	ldr	r0, [r7, #20]
 8006738:	f7ff ff88 	bl	800664c <xTimerGenericCommand>
 800673c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d114      	bne.n	800676e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	60fb      	str	r3, [r7, #12]
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	e7fd      	b.n	8006758 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	b2da      	uxtb	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	6978      	ldr	r0, [r7, #20]
 8006774:	4798      	blx	r3
}
 8006776:	bf00      	nop
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000dd4 	.word	0x20000dd4

08006784 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800678c:	f107 0308 	add.w	r3, r7, #8
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f859 	bl	8006848 <prvGetNextExpireTime>
 8006796:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4619      	mov	r1, r3
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f805 	bl	80067ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067a2:	f000 f8d7 	bl	8006954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067a6:	bf00      	nop
 80067a8:	e7f0      	b.n	800678c <prvTimerTask+0x8>
	...

080067ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067b6:	f7ff f97d 	bl	8005ab4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067ba:	f107 0308 	add.w	r3, r7, #8
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 f866 	bl	8006890 <prvSampleTimeNow>
 80067c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d130      	bne.n	800682e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <prvProcessTimerOrBlockTask+0x3c>
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d806      	bhi.n	80067e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067da:	f7ff f979 	bl	8005ad0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ff81 	bl	80066e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067e6:	e024      	b.n	8006832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d008      	beq.n	8006800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067ee:	4b13      	ldr	r3, [pc, #76]	@ (800683c <prvProcessTimerOrBlockTask+0x90>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <prvProcessTimerOrBlockTask+0x50>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <prvProcessTimerOrBlockTask+0x52>
 80067fc:	2300      	movs	r3, #0
 80067fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006800:	4b0f      	ldr	r3, [pc, #60]	@ (8006840 <prvProcessTimerOrBlockTask+0x94>)
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	4619      	mov	r1, r3
 800680e:	f7fe fed9 	bl	80055c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006812:	f7ff f95d 	bl	8005ad0 <xTaskResumeAll>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800681c:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <prvProcessTimerOrBlockTask+0x98>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
}
 800682c:	e001      	b.n	8006832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800682e:	f7ff f94f 	bl	8005ad0 <xTaskResumeAll>
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000dd8 	.word	0x20000dd8
 8006840:	20000ddc 	.word	0x20000ddc
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006850:	4b0e      	ldr	r3, [pc, #56]	@ (800688c <prvGetNextExpireTime+0x44>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <prvGetNextExpireTime+0x16>
 800685a:	2201      	movs	r2, #1
 800685c:	e000      	b.n	8006860 <prvGetNextExpireTime+0x18>
 800685e:	2200      	movs	r2, #0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d105      	bne.n	8006878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800686c:	4b07      	ldr	r3, [pc, #28]	@ (800688c <prvGetNextExpireTime+0x44>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	e001      	b.n	800687c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800687c:	68fb      	ldr	r3, [r7, #12]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	20000dd4 	.word	0x20000dd4

08006890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006898:	f7ff f9b8 	bl	8005c0c <xTaskGetTickCount>
 800689c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <prvSampleTimeNow+0x3c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d205      	bcs.n	80068b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068a8:	f000 f93a 	bl	8006b20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	e002      	b.n	80068ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068ba:	4a04      	ldr	r2, [pc, #16]	@ (80068cc <prvSampleTimeNow+0x3c>)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068c0:	68fb      	ldr	r3, [r7, #12]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000de4 	.word	0x20000de4

080068d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d812      	bhi.n	800691c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	429a      	cmp	r2, r3
 8006902:	d302      	bcc.n	800690a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e01b      	b.n	8006942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800690a:	4b10      	ldr	r3, [pc, #64]	@ (800694c <prvInsertTimerInActiveList+0x7c>)
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3304      	adds	r3, #4
 8006912:	4619      	mov	r1, r3
 8006914:	4610      	mov	r0, r2
 8006916:	f7fe f822 	bl	800495e <vListInsert>
 800691a:	e012      	b.n	8006942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d206      	bcs.n	8006932 <prvInsertTimerInActiveList+0x62>
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d302      	bcc.n	8006932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800692c:	2301      	movs	r3, #1
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	e007      	b.n	8006942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006932:	4b07      	ldr	r3, [pc, #28]	@ (8006950 <prvInsertTimerInActiveList+0x80>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3304      	adds	r3, #4
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f7fe f80e 	bl	800495e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006942:	697b      	ldr	r3, [r7, #20]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20000dd8 	.word	0x20000dd8
 8006950:	20000dd4 	.word	0x20000dd4

08006954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08e      	sub	sp, #56	@ 0x38
 8006958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800695a:	e0ce      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	da19      	bge.n	8006996 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	3304      	adds	r3, #4
 8006966:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	61fb      	str	r3, [r7, #28]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800698c:	6850      	ldr	r0, [r2, #4]
 800698e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006990:	6892      	ldr	r2, [r2, #8]
 8006992:	4611      	mov	r1, r2
 8006994:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f2c0 80ae 	blt.w	8006afa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ac:	3304      	adds	r3, #4
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe f80e 	bl	80049d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069b4:	463b      	mov	r3, r7
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff ff6a 	bl	8006890 <prvSampleTimeNow>
 80069bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b09      	cmp	r3, #9
 80069c2:	f200 8097 	bhi.w	8006af4 <prvProcessReceivedCommands+0x1a0>
 80069c6:	a201      	add	r2, pc, #4	@ (adr r2, 80069cc <prvProcessReceivedCommands+0x78>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069f5 	.word	0x080069f5
 80069d4:	080069f5 	.word	0x080069f5
 80069d8:	08006a6b 	.word	0x08006a6b
 80069dc:	08006a7f 	.word	0x08006a7f
 80069e0:	08006acb 	.word	0x08006acb
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	080069f5 	.word	0x080069f5
 80069ec:	08006a6b 	.word	0x08006a6b
 80069f0:	08006a7f 	.word	0x08006a7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	18d1      	adds	r1, r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a14:	f7ff ff5c 	bl	80068d0 <prvInsertTimerInActiveList>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d06c      	beq.n	8006af8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d061      	beq.n	8006af8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	441a      	add	r2, r3
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	2100      	movs	r1, #0
 8006a44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a46:	f7ff fe01 	bl	800664c <xTimerGenericCommand>
 8006a4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d152      	bne.n	8006af8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	61bb      	str	r3, [r7, #24]
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	e7fd      	b.n	8006a66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a7c:	e03d      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	617b      	str	r3, [r7, #20]
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	e7fd      	b.n	8006ab2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	18d1      	adds	r1, r2, r3
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ac4:	f7ff ff04 	bl	80068d0 <prvInsertTimerInActiveList>
					break;
 8006ac8:	e017      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006ad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ada:	f000 fc05 	bl	80072e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ade:	e00c      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006af2:	e002      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006af4:	bf00      	nop
 8006af6:	e000      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>
					break;
 8006af8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006afa:	4b08      	ldr	r3, [pc, #32]	@ (8006b1c <prvProcessReceivedCommands+0x1c8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	1d39      	adds	r1, r7, #4
 8006b00:	2200      	movs	r2, #0
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fac0 	bl	8005088 <xQueueReceive>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f47f af26 	bne.w	800695c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	3730      	adds	r7, #48	@ 0x30
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000ddc 	.word	0x20000ddc

08006b20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b26:	e049      	b.n	8006bbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b28:	4b2e      	ldr	r3, [pc, #184]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b32:	4b2c      	ldr	r3, [pc, #176]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fd ff45 	bl	80049d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d02f      	beq.n	8006bbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4413      	add	r3, r2
 8006b64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d90e      	bls.n	8006b8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7fd feea 	bl	800495e <vListInsert>
 8006b8a:	e017      	b.n	8006bbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	2100      	movs	r1, #0
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f7ff fd58 	bl	800664c <xTimerGenericCommand>
 8006b9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10b      	bne.n	8006bbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	603b      	str	r3, [r7, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bbc:	4b09      	ldr	r3, [pc, #36]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1b0      	bne.n	8006b28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bc6:	4b07      	ldr	r3, [pc, #28]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bcc:	4b06      	ldr	r3, [pc, #24]	@ (8006be8 <prvSwitchTimerLists+0xc8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a04      	ldr	r2, [pc, #16]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006bd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bd4:	4a04      	ldr	r2, [pc, #16]	@ (8006be8 <prvSwitchTimerLists+0xc8>)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	6013      	str	r3, [r2, #0]
}
 8006bda:	bf00      	nop
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000dd4 	.word	0x20000dd4
 8006be8:	20000dd8 	.word	0x20000dd8

08006bec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bf2:	f000 f989 	bl	8006f08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bf6:	4b15      	ldr	r3, [pc, #84]	@ (8006c4c <prvCheckForValidListAndQueue+0x60>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d120      	bne.n	8006c40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bfe:	4814      	ldr	r0, [pc, #80]	@ (8006c50 <prvCheckForValidListAndQueue+0x64>)
 8006c00:	f7fd fe5c 	bl	80048bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c04:	4813      	ldr	r0, [pc, #76]	@ (8006c54 <prvCheckForValidListAndQueue+0x68>)
 8006c06:	f7fd fe59 	bl	80048bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c0a:	4b13      	ldr	r3, [pc, #76]	@ (8006c58 <prvCheckForValidListAndQueue+0x6c>)
 8006c0c:	4a10      	ldr	r2, [pc, #64]	@ (8006c50 <prvCheckForValidListAndQueue+0x64>)
 8006c0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c10:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <prvCheckForValidListAndQueue+0x70>)
 8006c12:	4a10      	ldr	r2, [pc, #64]	@ (8006c54 <prvCheckForValidListAndQueue+0x68>)
 8006c14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c16:	2300      	movs	r3, #0
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	4b11      	ldr	r3, [pc, #68]	@ (8006c60 <prvCheckForValidListAndQueue+0x74>)
 8006c1c:	4a11      	ldr	r2, [pc, #68]	@ (8006c64 <prvCheckForValidListAndQueue+0x78>)
 8006c1e:	2110      	movs	r1, #16
 8006c20:	200a      	movs	r0, #10
 8006c22:	f7fd ff69 	bl	8004af8 <xQueueGenericCreateStatic>
 8006c26:	4603      	mov	r3, r0
 8006c28:	4a08      	ldr	r2, [pc, #32]	@ (8006c4c <prvCheckForValidListAndQueue+0x60>)
 8006c2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <prvCheckForValidListAndQueue+0x60>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c34:	4b05      	ldr	r3, [pc, #20]	@ (8006c4c <prvCheckForValidListAndQueue+0x60>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	490b      	ldr	r1, [pc, #44]	@ (8006c68 <prvCheckForValidListAndQueue+0x7c>)
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fc98 	bl	8005570 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c40:	f000 f994 	bl	8006f6c <vPortExitCritical>
}
 8006c44:	bf00      	nop
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000ddc 	.word	0x20000ddc
 8006c50:	20000dac 	.word	0x20000dac
 8006c54:	20000dc0 	.word	0x20000dc0
 8006c58:	20000dd4 	.word	0x20000dd4
 8006c5c:	20000dd8 	.word	0x20000dd8
 8006c60:	20000e88 	.word	0x20000e88
 8006c64:	20000de8 	.word	0x20000de8
 8006c68:	080080dc 	.word	0x080080dc

08006c6c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08a      	sub	sp, #40	@ 0x28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006c7a:	f06f 0301 	mvn.w	r3, #1
 8006c7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <xTimerPendFunctionCallFromISR+0x3c>)
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	f107 0114 	add.w	r1, r7, #20
 8006c94:	2300      	movs	r3, #0
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	f7fe f958 	bl	8004f4c <xQueueGenericSendFromISR>
 8006c9c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3728      	adds	r7, #40	@ 0x28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	20000ddc 	.word	0x20000ddc

08006cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3b04      	subs	r3, #4
 8006cbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3b04      	subs	r3, #4
 8006cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f023 0201 	bic.w	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3b04      	subs	r3, #4
 8006cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8006d10 <pxPortInitialiseStack+0x64>)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3b14      	subs	r3, #20
 8006ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3b04      	subs	r3, #4
 8006cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f06f 0202 	mvn.w	r2, #2
 8006cfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3b20      	subs	r3, #32
 8006d00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d02:	68fb      	ldr	r3, [r7, #12]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	08006d15 	.word	0x08006d15

08006d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d1e:	4b13      	ldr	r3, [pc, #76]	@ (8006d6c <prvTaskExitError+0x58>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d26:	d00b      	beq.n	8006d40 <prvTaskExitError+0x2c>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	60fb      	str	r3, [r7, #12]
}
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
 8006d3e:	e7fd      	b.n	8006d3c <prvTaskExitError+0x28>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60bb      	str	r3, [r7, #8]
}
 8006d52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d54:	bf00      	nop
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0fc      	beq.n	8006d56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000010 	.word	0x20000010

08006d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d70:	4b07      	ldr	r3, [pc, #28]	@ (8006d90 <pxCurrentTCBConst2>)
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	6808      	ldr	r0, [r1, #0]
 8006d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	f380 8809 	msr	PSP, r0
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8811 	msr	BASEPRI, r0
 8006d8a:	4770      	bx	lr
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst2>:
 8006d90:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop

08006d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d98:	4808      	ldr	r0, [pc, #32]	@ (8006dbc <prvPortStartFirstTask+0x24>)
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	6800      	ldr	r0, [r0, #0]
 8006d9e:	f380 8808 	msr	MSP, r0
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8814 	msr	CONTROL, r0
 8006daa:	b662      	cpsie	i
 8006dac:	b661      	cpsie	f
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	df00      	svc	0
 8006db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dba:	bf00      	nop
 8006dbc:	e000ed08 	.word	0xe000ed08

08006dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006dc6:	4b47      	ldr	r3, [pc, #284]	@ (8006ee4 <xPortStartScheduler+0x124>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a47      	ldr	r2, [pc, #284]	@ (8006ee8 <xPortStartScheduler+0x128>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d10b      	bne.n	8006de8 <xPortStartScheduler+0x28>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	613b      	str	r3, [r7, #16]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006de8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee4 <xPortStartScheduler+0x124>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a3f      	ldr	r2, [pc, #252]	@ (8006eec <xPortStartScheduler+0x12c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10b      	bne.n	8006e0a <xPortStartScheduler+0x4a>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	60fb      	str	r3, [r7, #12]
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	e7fd      	b.n	8006e06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e0a:	4b39      	ldr	r3, [pc, #228]	@ (8006ef0 <xPortStartScheduler+0x130>)
 8006e0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	22ff      	movs	r2, #255	@ 0xff
 8006e1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	4b31      	ldr	r3, [pc, #196]	@ (8006ef4 <xPortStartScheduler+0x134>)
 8006e30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e32:	4b31      	ldr	r3, [pc, #196]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e34:	2207      	movs	r2, #7
 8006e36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e38:	e009      	b.n	8006e4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e56:	2b80      	cmp	r3, #128	@ 0x80
 8006e58:	d0ef      	beq.n	8006e3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e5a:	4b27      	ldr	r3, [pc, #156]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f1c3 0307 	rsb	r3, r3, #7
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d00b      	beq.n	8006e7e <xPortStartScheduler+0xbe>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60bb      	str	r3, [r7, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e88:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e90:	4a19      	ldr	r2, [pc, #100]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e9c:	4b17      	ldr	r3, [pc, #92]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a16      	ldr	r2, [pc, #88]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ea8:	4b14      	ldr	r3, [pc, #80]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a13      	ldr	r2, [pc, #76]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006eb4:	f000 f8da 	bl	800706c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006eb8:	4b11      	ldr	r3, [pc, #68]	@ (8006f00 <xPortStartScheduler+0x140>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ebe:	f000 f8f9 	bl	80070b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ec2:	4b10      	ldr	r3, [pc, #64]	@ (8006f04 <xPortStartScheduler+0x144>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8006f04 <xPortStartScheduler+0x144>)
 8006ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ece:	f7ff ff63 	bl	8006d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ed2:	f7fe ff65 	bl	8005da0 <vTaskSwitchContext>
	prvTaskExitError();
 8006ed6:	f7ff ff1d 	bl	8006d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	e000ed00 	.word	0xe000ed00
 8006ee8:	410fc271 	.word	0x410fc271
 8006eec:	410fc270 	.word	0x410fc270
 8006ef0:	e000e400 	.word	0xe000e400
 8006ef4:	20000ed8 	.word	0x20000ed8
 8006ef8:	20000edc 	.word	0x20000edc
 8006efc:	e000ed20 	.word	0xe000ed20
 8006f00:	20000010 	.word	0x20000010
 8006f04:	e000ef34 	.word	0xe000ef34

08006f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	607b      	str	r3, [r7, #4]
}
 8006f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f22:	4b10      	ldr	r3, [pc, #64]	@ (8006f64 <vPortEnterCritical+0x5c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3301      	adds	r3, #1
 8006f28:	4a0e      	ldr	r2, [pc, #56]	@ (8006f64 <vPortEnterCritical+0x5c>)
 8006f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <vPortEnterCritical+0x5c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d110      	bne.n	8006f56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f34:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <vPortEnterCritical+0x60>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <vPortEnterCritical+0x4e>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	603b      	str	r3, [r7, #0]
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	e7fd      	b.n	8006f52 <vPortEnterCritical+0x4a>
	}
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000010 	.word	0x20000010
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f72:	4b12      	ldr	r3, [pc, #72]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10b      	bne.n	8006f92 <vPortExitCritical+0x26>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	607b      	str	r3, [r7, #4]
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	e7fd      	b.n	8006f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f92:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	4a08      	ldr	r2, [pc, #32]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f9c:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d105      	bne.n	8006fb0 <vPortExitCritical+0x44>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f383 8811 	msr	BASEPRI, r3
}
 8006fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	20000010 	.word	0x20000010

08006fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fc0:	f3ef 8009 	mrs	r0, PSP
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	4b15      	ldr	r3, [pc, #84]	@ (8007020 <pxCurrentTCBConst>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	f01e 0f10 	tst.w	lr, #16
 8006fd0:	bf08      	it	eq
 8006fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fda:	6010      	str	r0, [r2, #0]
 8006fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006fe4:	f380 8811 	msr	BASEPRI, r0
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f7fe fed6 	bl	8005da0 <vTaskSwitchContext>
 8006ff4:	f04f 0000 	mov.w	r0, #0
 8006ff8:	f380 8811 	msr	BASEPRI, r0
 8006ffc:	bc09      	pop	{r0, r3}
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	6808      	ldr	r0, [r1, #0]
 8007002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007006:	f01e 0f10 	tst.w	lr, #16
 800700a:	bf08      	it	eq
 800700c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007010:	f380 8809 	msr	PSP, r0
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	f3af 8000 	nop.w

08007020 <pxCurrentTCBConst>:
 8007020:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop

08007028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	607b      	str	r3, [r7, #4]
}
 8007040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007042:	f7fe fdf3 	bl	8005c2c <xTaskIncrementTick>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800704c:	4b06      	ldr	r3, [pc, #24]	@ (8007068 <xPortSysTickHandler+0x40>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	f383 8811 	msr	BASEPRI, r3
}
 800705e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007070:	4b0b      	ldr	r3, [pc, #44]	@ (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007076:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <vPortSetupTimerInterrupt+0x38>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800707c:	4b0a      	ldr	r3, [pc, #40]	@ (80070a8 <vPortSetupTimerInterrupt+0x3c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0a      	ldr	r2, [pc, #40]	@ (80070ac <vPortSetupTimerInterrupt+0x40>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	4a09      	ldr	r2, [pc, #36]	@ (80070b0 <vPortSetupTimerInterrupt+0x44>)
 800708a:	3b01      	subs	r3, #1
 800708c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800708e:	4b04      	ldr	r3, [pc, #16]	@ (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007090:	2207      	movs	r2, #7
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	e000e010 	.word	0xe000e010
 80070a4:	e000e018 	.word	0xe000e018
 80070a8:	20000004 	.word	0x20000004
 80070ac:	10624dd3 	.word	0x10624dd3
 80070b0:	e000e014 	.word	0xe000e014

080070b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80070c4 <vPortEnableVFP+0x10>
 80070b8:	6801      	ldr	r1, [r0, #0]
 80070ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80070be:	6001      	str	r1, [r0, #0]
 80070c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070c2:	bf00      	nop
 80070c4:	e000ed88 	.word	0xe000ed88

080070c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070ce:	f3ef 8305 	mrs	r3, IPSR
 80070d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b0f      	cmp	r3, #15
 80070d8:	d915      	bls.n	8007106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070da:	4a18      	ldr	r2, [pc, #96]	@ (800713c <vPortValidateInterruptPriority+0x74>)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070e4:	4b16      	ldr	r3, [pc, #88]	@ (8007140 <vPortValidateInterruptPriority+0x78>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	7afa      	ldrb	r2, [r7, #11]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d20b      	bcs.n	8007106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	607b      	str	r3, [r7, #4]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007106:	4b0f      	ldr	r3, [pc, #60]	@ (8007144 <vPortValidateInterruptPriority+0x7c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800710e:	4b0e      	ldr	r3, [pc, #56]	@ (8007148 <vPortValidateInterruptPriority+0x80>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d90b      	bls.n	800712e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	603b      	str	r3, [r7, #0]
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	e7fd      	b.n	800712a <vPortValidateInterruptPriority+0x62>
	}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	e000e3f0 	.word	0xe000e3f0
 8007140:	20000ed8 	.word	0x20000ed8
 8007144:	e000ed0c 	.word	0xe000ed0c
 8007148:	20000edc 	.word	0x20000edc

0800714c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	@ 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007154:	2300      	movs	r3, #0
 8007156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007158:	f7fe fcac 	bl	8005ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800715c:	4b5c      	ldr	r3, [pc, #368]	@ (80072d0 <pvPortMalloc+0x184>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007164:	f000 f924 	bl	80073b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007168:	4b5a      	ldr	r3, [pc, #360]	@ (80072d4 <pvPortMalloc+0x188>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	f040 8095 	bne.w	80072a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01e      	beq.n	80071ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800717c:	2208      	movs	r2, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	2b00      	cmp	r3, #0
 800718c:	d015      	beq.n	80071ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f023 0307 	bic.w	r3, r3, #7
 8007194:	3308      	adds	r3, #8
 8007196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <pvPortMalloc+0x6e>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	617b      	str	r3, [r7, #20]
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d06f      	beq.n	80072a0 <pvPortMalloc+0x154>
 80071c0:	4b45      	ldr	r3, [pc, #276]	@ (80072d8 <pvPortMalloc+0x18c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d86a      	bhi.n	80072a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071ca:	4b44      	ldr	r3, [pc, #272]	@ (80072dc <pvPortMalloc+0x190>)
 80071cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071ce:	4b43      	ldr	r3, [pc, #268]	@ (80072dc <pvPortMalloc+0x190>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071d4:	e004      	b.n	80071e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d903      	bls.n	80071f2 <pvPortMalloc+0xa6>
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f1      	bne.n	80071d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071f2:	4b37      	ldr	r3, [pc, #220]	@ (80072d0 <pvPortMalloc+0x184>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d051      	beq.n	80072a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2208      	movs	r2, #8
 8007202:	4413      	add	r3, r2
 8007204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	2308      	movs	r3, #8
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	429a      	cmp	r2, r3
 800721c:	d920      	bls.n	8007260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800721e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4413      	add	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <pvPortMalloc+0xfc>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	613b      	str	r3, [r7, #16]
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	e7fd      	b.n	8007244 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800725a:	69b8      	ldr	r0, [r7, #24]
 800725c:	f000 f90a 	bl	8007474 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007260:	4b1d      	ldr	r3, [pc, #116]	@ (80072d8 <pvPortMalloc+0x18c>)
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	4a1b      	ldr	r2, [pc, #108]	@ (80072d8 <pvPortMalloc+0x18c>)
 800726c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800726e:	4b1a      	ldr	r3, [pc, #104]	@ (80072d8 <pvPortMalloc+0x18c>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b1b      	ldr	r3, [pc, #108]	@ (80072e0 <pvPortMalloc+0x194>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d203      	bcs.n	8007282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800727a:	4b17      	ldr	r3, [pc, #92]	@ (80072d8 <pvPortMalloc+0x18c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a18      	ldr	r2, [pc, #96]	@ (80072e0 <pvPortMalloc+0x194>)
 8007280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	4b13      	ldr	r3, [pc, #76]	@ (80072d4 <pvPortMalloc+0x188>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	431a      	orrs	r2, r3
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007296:	4b13      	ldr	r3, [pc, #76]	@ (80072e4 <pvPortMalloc+0x198>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3301      	adds	r3, #1
 800729c:	4a11      	ldr	r2, [pc, #68]	@ (80072e4 <pvPortMalloc+0x198>)
 800729e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072a0:	f7fe fc16 	bl	8005ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00b      	beq.n	80072c6 <pvPortMalloc+0x17a>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	60fb      	str	r3, [r7, #12]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <pvPortMalloc+0x176>
	return pvReturn;
 80072c6:	69fb      	ldr	r3, [r7, #28]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3728      	adds	r7, #40	@ 0x28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20004ae8 	.word	0x20004ae8
 80072d4:	20004afc 	.word	0x20004afc
 80072d8:	20004aec 	.word	0x20004aec
 80072dc:	20004ae0 	.word	0x20004ae0
 80072e0:	20004af0 	.word	0x20004af0
 80072e4:	20004af4 	.word	0x20004af4

080072e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d04f      	beq.n	800739a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072fa:	2308      	movs	r3, #8
 80072fc:	425b      	negs	r3, r3
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4413      	add	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	4b25      	ldr	r3, [pc, #148]	@ (80073a4 <vPortFree+0xbc>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4013      	ands	r3, r2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10b      	bne.n	800732e <vPortFree+0x46>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	60fb      	str	r3, [r7, #12]
}
 8007328:	bf00      	nop
 800732a:	bf00      	nop
 800732c:	e7fd      	b.n	800732a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00b      	beq.n	800734e <vPortFree+0x66>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	60bb      	str	r3, [r7, #8]
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	e7fd      	b.n	800734a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	4b14      	ldr	r3, [pc, #80]	@ (80073a4 <vPortFree+0xbc>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4013      	ands	r3, r2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01e      	beq.n	800739a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11a      	bne.n	800739a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	4b0e      	ldr	r3, [pc, #56]	@ (80073a4 <vPortFree+0xbc>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	43db      	mvns	r3, r3
 800736e:	401a      	ands	r2, r3
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007374:	f7fe fb9e 	bl	8005ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <vPortFree+0xc0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4413      	add	r3, r2
 8007382:	4a09      	ldr	r2, [pc, #36]	@ (80073a8 <vPortFree+0xc0>)
 8007384:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007386:	6938      	ldr	r0, [r7, #16]
 8007388:	f000 f874 	bl	8007474 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800738c:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <vPortFree+0xc4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	4a06      	ldr	r2, [pc, #24]	@ (80073ac <vPortFree+0xc4>)
 8007394:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007396:	f7fe fb9b 	bl	8005ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800739a:	bf00      	nop
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20004afc 	.word	0x20004afc
 80073a8:	20004aec 	.word	0x20004aec
 80073ac:	20004af8 	.word	0x20004af8

080073b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80073ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073bc:	4b27      	ldr	r3, [pc, #156]	@ (800745c <prvHeapInit+0xac>)
 80073be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00c      	beq.n	80073e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3307      	adds	r3, #7
 80073ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0307 	bic.w	r3, r3, #7
 80073d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	4a1f      	ldr	r2, [pc, #124]	@ (800745c <prvHeapInit+0xac>)
 80073e0:	4413      	add	r3, r2
 80073e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007460 <prvHeapInit+0xb0>)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007460 <prvHeapInit+0xb0>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	4413      	add	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073fc:	2208      	movs	r2, #8
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	1a9b      	subs	r3, r3, r2
 8007402:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4a15      	ldr	r2, [pc, #84]	@ (8007464 <prvHeapInit+0xb4>)
 8007410:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007412:	4b14      	ldr	r3, [pc, #80]	@ (8007464 <prvHeapInit+0xb4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2200      	movs	r2, #0
 8007418:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800741a:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <prvHeapInit+0xb4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	1ad2      	subs	r2, r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007430:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <prvHeapInit+0xb4>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	4a0a      	ldr	r2, [pc, #40]	@ (8007468 <prvHeapInit+0xb8>)
 800743e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4a09      	ldr	r2, [pc, #36]	@ (800746c <prvHeapInit+0xbc>)
 8007446:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007448:	4b09      	ldr	r3, [pc, #36]	@ (8007470 <prvHeapInit+0xc0>)
 800744a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800744e:	601a      	str	r2, [r3, #0]
}
 8007450:	bf00      	nop
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	20000ee0 	.word	0x20000ee0
 8007460:	20004ae0 	.word	0x20004ae0
 8007464:	20004ae8 	.word	0x20004ae8
 8007468:	20004af0 	.word	0x20004af0
 800746c:	20004aec 	.word	0x20004aec
 8007470:	20004afc 	.word	0x20004afc

08007474 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800747c:	4b28      	ldr	r3, [pc, #160]	@ (8007520 <prvInsertBlockIntoFreeList+0xac>)
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	e002      	b.n	8007488 <prvInsertBlockIntoFreeList+0x14>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d8f7      	bhi.n	8007482 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d108      	bne.n	80074b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	441a      	add	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	441a      	add	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d118      	bne.n	80074fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	4b15      	ldr	r3, [pc, #84]	@ (8007524 <prvInsertBlockIntoFreeList+0xb0>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d00d      	beq.n	80074f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	441a      	add	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e008      	b.n	8007504 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007524 <prvInsertBlockIntoFreeList+0xb0>)
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	e003      	b.n	8007504 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	429a      	cmp	r2, r3
 800750a:	d002      	beq.n	8007512 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007512:	bf00      	nop
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20004ae0 	.word	0x20004ae0
 8007524:	20004ae8 	.word	0x20004ae8

08007528 <atoi>:
 8007528:	220a      	movs	r2, #10
 800752a:	2100      	movs	r1, #0
 800752c:	f000 b87a 	b.w	8007624 <strtol>

08007530 <_strtol_l.constprop.0>:
 8007530:	2b24      	cmp	r3, #36	@ 0x24
 8007532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007536:	4686      	mov	lr, r0
 8007538:	4690      	mov	r8, r2
 800753a:	d801      	bhi.n	8007540 <_strtol_l.constprop.0+0x10>
 800753c:	2b01      	cmp	r3, #1
 800753e:	d106      	bne.n	800754e <_strtol_l.constprop.0+0x1e>
 8007540:	f000 f8b4 	bl	80076ac <__errno>
 8007544:	2316      	movs	r3, #22
 8007546:	6003      	str	r3, [r0, #0]
 8007548:	2000      	movs	r0, #0
 800754a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754e:	4834      	ldr	r0, [pc, #208]	@ (8007620 <_strtol_l.constprop.0+0xf0>)
 8007550:	460d      	mov	r5, r1
 8007552:	462a      	mov	r2, r5
 8007554:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007558:	5d06      	ldrb	r6, [r0, r4]
 800755a:	f016 0608 	ands.w	r6, r6, #8
 800755e:	d1f8      	bne.n	8007552 <_strtol_l.constprop.0+0x22>
 8007560:	2c2d      	cmp	r4, #45	@ 0x2d
 8007562:	d12d      	bne.n	80075c0 <_strtol_l.constprop.0+0x90>
 8007564:	782c      	ldrb	r4, [r5, #0]
 8007566:	2601      	movs	r6, #1
 8007568:	1c95      	adds	r5, r2, #2
 800756a:	f033 0210 	bics.w	r2, r3, #16
 800756e:	d109      	bne.n	8007584 <_strtol_l.constprop.0+0x54>
 8007570:	2c30      	cmp	r4, #48	@ 0x30
 8007572:	d12a      	bne.n	80075ca <_strtol_l.constprop.0+0x9a>
 8007574:	782a      	ldrb	r2, [r5, #0]
 8007576:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800757a:	2a58      	cmp	r2, #88	@ 0x58
 800757c:	d125      	bne.n	80075ca <_strtol_l.constprop.0+0x9a>
 800757e:	786c      	ldrb	r4, [r5, #1]
 8007580:	2310      	movs	r3, #16
 8007582:	3502      	adds	r5, #2
 8007584:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007588:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800758c:	2200      	movs	r2, #0
 800758e:	fbbc f9f3 	udiv	r9, ip, r3
 8007592:	4610      	mov	r0, r2
 8007594:	fb03 ca19 	mls	sl, r3, r9, ip
 8007598:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800759c:	2f09      	cmp	r7, #9
 800759e:	d81b      	bhi.n	80075d8 <_strtol_l.constprop.0+0xa8>
 80075a0:	463c      	mov	r4, r7
 80075a2:	42a3      	cmp	r3, r4
 80075a4:	dd27      	ble.n	80075f6 <_strtol_l.constprop.0+0xc6>
 80075a6:	1c57      	adds	r7, r2, #1
 80075a8:	d007      	beq.n	80075ba <_strtol_l.constprop.0+0x8a>
 80075aa:	4581      	cmp	r9, r0
 80075ac:	d320      	bcc.n	80075f0 <_strtol_l.constprop.0+0xc0>
 80075ae:	d101      	bne.n	80075b4 <_strtol_l.constprop.0+0x84>
 80075b0:	45a2      	cmp	sl, r4
 80075b2:	db1d      	blt.n	80075f0 <_strtol_l.constprop.0+0xc0>
 80075b4:	fb00 4003 	mla	r0, r0, r3, r4
 80075b8:	2201      	movs	r2, #1
 80075ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075be:	e7eb      	b.n	8007598 <_strtol_l.constprop.0+0x68>
 80075c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80075c2:	bf04      	itt	eq
 80075c4:	782c      	ldrbeq	r4, [r5, #0]
 80075c6:	1c95      	addeq	r5, r2, #2
 80075c8:	e7cf      	b.n	800756a <_strtol_l.constprop.0+0x3a>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1da      	bne.n	8007584 <_strtol_l.constprop.0+0x54>
 80075ce:	2c30      	cmp	r4, #48	@ 0x30
 80075d0:	bf0c      	ite	eq
 80075d2:	2308      	moveq	r3, #8
 80075d4:	230a      	movne	r3, #10
 80075d6:	e7d5      	b.n	8007584 <_strtol_l.constprop.0+0x54>
 80075d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80075dc:	2f19      	cmp	r7, #25
 80075de:	d801      	bhi.n	80075e4 <_strtol_l.constprop.0+0xb4>
 80075e0:	3c37      	subs	r4, #55	@ 0x37
 80075e2:	e7de      	b.n	80075a2 <_strtol_l.constprop.0+0x72>
 80075e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80075e8:	2f19      	cmp	r7, #25
 80075ea:	d804      	bhi.n	80075f6 <_strtol_l.constprop.0+0xc6>
 80075ec:	3c57      	subs	r4, #87	@ 0x57
 80075ee:	e7d8      	b.n	80075a2 <_strtol_l.constprop.0+0x72>
 80075f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075f4:	e7e1      	b.n	80075ba <_strtol_l.constprop.0+0x8a>
 80075f6:	1c53      	adds	r3, r2, #1
 80075f8:	d108      	bne.n	800760c <_strtol_l.constprop.0+0xdc>
 80075fa:	2322      	movs	r3, #34	@ 0x22
 80075fc:	f8ce 3000 	str.w	r3, [lr]
 8007600:	4660      	mov	r0, ip
 8007602:	f1b8 0f00 	cmp.w	r8, #0
 8007606:	d0a0      	beq.n	800754a <_strtol_l.constprop.0+0x1a>
 8007608:	1e69      	subs	r1, r5, #1
 800760a:	e006      	b.n	800761a <_strtol_l.constprop.0+0xea>
 800760c:	b106      	cbz	r6, 8007610 <_strtol_l.constprop.0+0xe0>
 800760e:	4240      	negs	r0, r0
 8007610:	f1b8 0f00 	cmp.w	r8, #0
 8007614:	d099      	beq.n	800754a <_strtol_l.constprop.0+0x1a>
 8007616:	2a00      	cmp	r2, #0
 8007618:	d1f6      	bne.n	8007608 <_strtol_l.constprop.0+0xd8>
 800761a:	f8c8 1000 	str.w	r1, [r8]
 800761e:	e794      	b.n	800754a <_strtol_l.constprop.0+0x1a>
 8007620:	08008255 	.word	0x08008255

08007624 <strtol>:
 8007624:	4613      	mov	r3, r2
 8007626:	460a      	mov	r2, r1
 8007628:	4601      	mov	r1, r0
 800762a:	4802      	ldr	r0, [pc, #8]	@ (8007634 <strtol+0x10>)
 800762c:	6800      	ldr	r0, [r0, #0]
 800762e:	f7ff bf7f 	b.w	8007530 <_strtol_l.constprop.0>
 8007632:	bf00      	nop
 8007634:	20000014 	.word	0x20000014

08007638 <siprintf>:
 8007638:	b40e      	push	{r1, r2, r3}
 800763a:	b500      	push	{lr}
 800763c:	b09c      	sub	sp, #112	@ 0x70
 800763e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007640:	9002      	str	r0, [sp, #8]
 8007642:	9006      	str	r0, [sp, #24]
 8007644:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007648:	4809      	ldr	r0, [pc, #36]	@ (8007670 <siprintf+0x38>)
 800764a:	9107      	str	r1, [sp, #28]
 800764c:	9104      	str	r1, [sp, #16]
 800764e:	4909      	ldr	r1, [pc, #36]	@ (8007674 <siprintf+0x3c>)
 8007650:	f853 2b04 	ldr.w	r2, [r3], #4
 8007654:	9105      	str	r1, [sp, #20]
 8007656:	6800      	ldr	r0, [r0, #0]
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	a902      	add	r1, sp, #8
 800765c:	f000 f9b4 	bl	80079c8 <_svfiprintf_r>
 8007660:	9b02      	ldr	r3, [sp, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	b01c      	add	sp, #112	@ 0x70
 8007668:	f85d eb04 	ldr.w	lr, [sp], #4
 800766c:	b003      	add	sp, #12
 800766e:	4770      	bx	lr
 8007670:	20000014 	.word	0x20000014
 8007674:	ffff0208 	.word	0xffff0208

08007678 <memset>:
 8007678:	4402      	add	r2, r0
 800767a:	4603      	mov	r3, r0
 800767c:	4293      	cmp	r3, r2
 800767e:	d100      	bne.n	8007682 <memset+0xa>
 8007680:	4770      	bx	lr
 8007682:	f803 1b01 	strb.w	r1, [r3], #1
 8007686:	e7f9      	b.n	800767c <memset+0x4>

08007688 <strncmp>:
 8007688:	b510      	push	{r4, lr}
 800768a:	b16a      	cbz	r2, 80076a8 <strncmp+0x20>
 800768c:	3901      	subs	r1, #1
 800768e:	1884      	adds	r4, r0, r2
 8007690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007694:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007698:	429a      	cmp	r2, r3
 800769a:	d103      	bne.n	80076a4 <strncmp+0x1c>
 800769c:	42a0      	cmp	r0, r4
 800769e:	d001      	beq.n	80076a4 <strncmp+0x1c>
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	d1f5      	bne.n	8007690 <strncmp+0x8>
 80076a4:	1ad0      	subs	r0, r2, r3
 80076a6:	bd10      	pop	{r4, pc}
 80076a8:	4610      	mov	r0, r2
 80076aa:	e7fc      	b.n	80076a6 <strncmp+0x1e>

080076ac <__errno>:
 80076ac:	4b01      	ldr	r3, [pc, #4]	@ (80076b4 <__errno+0x8>)
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000014 	.word	0x20000014

080076b8 <__libc_init_array>:
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	4d0d      	ldr	r5, [pc, #52]	@ (80076f0 <__libc_init_array+0x38>)
 80076bc:	4c0d      	ldr	r4, [pc, #52]	@ (80076f4 <__libc_init_array+0x3c>)
 80076be:	1b64      	subs	r4, r4, r5
 80076c0:	10a4      	asrs	r4, r4, #2
 80076c2:	2600      	movs	r6, #0
 80076c4:	42a6      	cmp	r6, r4
 80076c6:	d109      	bne.n	80076dc <__libc_init_array+0x24>
 80076c8:	4d0b      	ldr	r5, [pc, #44]	@ (80076f8 <__libc_init_array+0x40>)
 80076ca:	4c0c      	ldr	r4, [pc, #48]	@ (80076fc <__libc_init_array+0x44>)
 80076cc:	f000 fc66 	bl	8007f9c <_init>
 80076d0:	1b64      	subs	r4, r4, r5
 80076d2:	10a4      	asrs	r4, r4, #2
 80076d4:	2600      	movs	r6, #0
 80076d6:	42a6      	cmp	r6, r4
 80076d8:	d105      	bne.n	80076e6 <__libc_init_array+0x2e>
 80076da:	bd70      	pop	{r4, r5, r6, pc}
 80076dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e0:	4798      	blx	r3
 80076e2:	3601      	adds	r6, #1
 80076e4:	e7ee      	b.n	80076c4 <__libc_init_array+0xc>
 80076e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ea:	4798      	blx	r3
 80076ec:	3601      	adds	r6, #1
 80076ee:	e7f2      	b.n	80076d6 <__libc_init_array+0x1e>
 80076f0:	08008390 	.word	0x08008390
 80076f4:	08008390 	.word	0x08008390
 80076f8:	08008390 	.word	0x08008390
 80076fc:	08008394 	.word	0x08008394

08007700 <__retarget_lock_acquire_recursive>:
 8007700:	4770      	bx	lr

08007702 <__retarget_lock_release_recursive>:
 8007702:	4770      	bx	lr

08007704 <memcpy>:
 8007704:	440a      	add	r2, r1
 8007706:	4291      	cmp	r1, r2
 8007708:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800770c:	d100      	bne.n	8007710 <memcpy+0xc>
 800770e:	4770      	bx	lr
 8007710:	b510      	push	{r4, lr}
 8007712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800771a:	4291      	cmp	r1, r2
 800771c:	d1f9      	bne.n	8007712 <memcpy+0xe>
 800771e:	bd10      	pop	{r4, pc}

08007720 <_free_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4605      	mov	r5, r0
 8007724:	2900      	cmp	r1, #0
 8007726:	d041      	beq.n	80077ac <_free_r+0x8c>
 8007728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800772c:	1f0c      	subs	r4, r1, #4
 800772e:	2b00      	cmp	r3, #0
 8007730:	bfb8      	it	lt
 8007732:	18e4      	addlt	r4, r4, r3
 8007734:	f000 f8e0 	bl	80078f8 <__malloc_lock>
 8007738:	4a1d      	ldr	r2, [pc, #116]	@ (80077b0 <_free_r+0x90>)
 800773a:	6813      	ldr	r3, [r2, #0]
 800773c:	b933      	cbnz	r3, 800774c <_free_r+0x2c>
 800773e:	6063      	str	r3, [r4, #4]
 8007740:	6014      	str	r4, [r2, #0]
 8007742:	4628      	mov	r0, r5
 8007744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007748:	f000 b8dc 	b.w	8007904 <__malloc_unlock>
 800774c:	42a3      	cmp	r3, r4
 800774e:	d908      	bls.n	8007762 <_free_r+0x42>
 8007750:	6820      	ldr	r0, [r4, #0]
 8007752:	1821      	adds	r1, r4, r0
 8007754:	428b      	cmp	r3, r1
 8007756:	bf01      	itttt	eq
 8007758:	6819      	ldreq	r1, [r3, #0]
 800775a:	685b      	ldreq	r3, [r3, #4]
 800775c:	1809      	addeq	r1, r1, r0
 800775e:	6021      	streq	r1, [r4, #0]
 8007760:	e7ed      	b.n	800773e <_free_r+0x1e>
 8007762:	461a      	mov	r2, r3
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	b10b      	cbz	r3, 800776c <_free_r+0x4c>
 8007768:	42a3      	cmp	r3, r4
 800776a:	d9fa      	bls.n	8007762 <_free_r+0x42>
 800776c:	6811      	ldr	r1, [r2, #0]
 800776e:	1850      	adds	r0, r2, r1
 8007770:	42a0      	cmp	r0, r4
 8007772:	d10b      	bne.n	800778c <_free_r+0x6c>
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	4401      	add	r1, r0
 8007778:	1850      	adds	r0, r2, r1
 800777a:	4283      	cmp	r3, r0
 800777c:	6011      	str	r1, [r2, #0]
 800777e:	d1e0      	bne.n	8007742 <_free_r+0x22>
 8007780:	6818      	ldr	r0, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	6053      	str	r3, [r2, #4]
 8007786:	4408      	add	r0, r1
 8007788:	6010      	str	r0, [r2, #0]
 800778a:	e7da      	b.n	8007742 <_free_r+0x22>
 800778c:	d902      	bls.n	8007794 <_free_r+0x74>
 800778e:	230c      	movs	r3, #12
 8007790:	602b      	str	r3, [r5, #0]
 8007792:	e7d6      	b.n	8007742 <_free_r+0x22>
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	1821      	adds	r1, r4, r0
 8007798:	428b      	cmp	r3, r1
 800779a:	bf04      	itt	eq
 800779c:	6819      	ldreq	r1, [r3, #0]
 800779e:	685b      	ldreq	r3, [r3, #4]
 80077a0:	6063      	str	r3, [r4, #4]
 80077a2:	bf04      	itt	eq
 80077a4:	1809      	addeq	r1, r1, r0
 80077a6:	6021      	streq	r1, [r4, #0]
 80077a8:	6054      	str	r4, [r2, #4]
 80077aa:	e7ca      	b.n	8007742 <_free_r+0x22>
 80077ac:	bd38      	pop	{r3, r4, r5, pc}
 80077ae:	bf00      	nop
 80077b0:	20004c44 	.word	0x20004c44

080077b4 <sbrk_aligned>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	4e0f      	ldr	r6, [pc, #60]	@ (80077f4 <sbrk_aligned+0x40>)
 80077b8:	460c      	mov	r4, r1
 80077ba:	6831      	ldr	r1, [r6, #0]
 80077bc:	4605      	mov	r5, r0
 80077be:	b911      	cbnz	r1, 80077c6 <sbrk_aligned+0x12>
 80077c0:	f000 fba6 	bl	8007f10 <_sbrk_r>
 80077c4:	6030      	str	r0, [r6, #0]
 80077c6:	4621      	mov	r1, r4
 80077c8:	4628      	mov	r0, r5
 80077ca:	f000 fba1 	bl	8007f10 <_sbrk_r>
 80077ce:	1c43      	adds	r3, r0, #1
 80077d0:	d103      	bne.n	80077da <sbrk_aligned+0x26>
 80077d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80077d6:	4620      	mov	r0, r4
 80077d8:	bd70      	pop	{r4, r5, r6, pc}
 80077da:	1cc4      	adds	r4, r0, #3
 80077dc:	f024 0403 	bic.w	r4, r4, #3
 80077e0:	42a0      	cmp	r0, r4
 80077e2:	d0f8      	beq.n	80077d6 <sbrk_aligned+0x22>
 80077e4:	1a21      	subs	r1, r4, r0
 80077e6:	4628      	mov	r0, r5
 80077e8:	f000 fb92 	bl	8007f10 <_sbrk_r>
 80077ec:	3001      	adds	r0, #1
 80077ee:	d1f2      	bne.n	80077d6 <sbrk_aligned+0x22>
 80077f0:	e7ef      	b.n	80077d2 <sbrk_aligned+0x1e>
 80077f2:	bf00      	nop
 80077f4:	20004c40 	.word	0x20004c40

080077f8 <_malloc_r>:
 80077f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077fc:	1ccd      	adds	r5, r1, #3
 80077fe:	f025 0503 	bic.w	r5, r5, #3
 8007802:	3508      	adds	r5, #8
 8007804:	2d0c      	cmp	r5, #12
 8007806:	bf38      	it	cc
 8007808:	250c      	movcc	r5, #12
 800780a:	2d00      	cmp	r5, #0
 800780c:	4606      	mov	r6, r0
 800780e:	db01      	blt.n	8007814 <_malloc_r+0x1c>
 8007810:	42a9      	cmp	r1, r5
 8007812:	d904      	bls.n	800781e <_malloc_r+0x26>
 8007814:	230c      	movs	r3, #12
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	2000      	movs	r0, #0
 800781a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800781e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078f4 <_malloc_r+0xfc>
 8007822:	f000 f869 	bl	80078f8 <__malloc_lock>
 8007826:	f8d8 3000 	ldr.w	r3, [r8]
 800782a:	461c      	mov	r4, r3
 800782c:	bb44      	cbnz	r4, 8007880 <_malloc_r+0x88>
 800782e:	4629      	mov	r1, r5
 8007830:	4630      	mov	r0, r6
 8007832:	f7ff ffbf 	bl	80077b4 <sbrk_aligned>
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	4604      	mov	r4, r0
 800783a:	d158      	bne.n	80078ee <_malloc_r+0xf6>
 800783c:	f8d8 4000 	ldr.w	r4, [r8]
 8007840:	4627      	mov	r7, r4
 8007842:	2f00      	cmp	r7, #0
 8007844:	d143      	bne.n	80078ce <_malloc_r+0xd6>
 8007846:	2c00      	cmp	r4, #0
 8007848:	d04b      	beq.n	80078e2 <_malloc_r+0xea>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	4639      	mov	r1, r7
 800784e:	4630      	mov	r0, r6
 8007850:	eb04 0903 	add.w	r9, r4, r3
 8007854:	f000 fb5c 	bl	8007f10 <_sbrk_r>
 8007858:	4581      	cmp	r9, r0
 800785a:	d142      	bne.n	80078e2 <_malloc_r+0xea>
 800785c:	6821      	ldr	r1, [r4, #0]
 800785e:	1a6d      	subs	r5, r5, r1
 8007860:	4629      	mov	r1, r5
 8007862:	4630      	mov	r0, r6
 8007864:	f7ff ffa6 	bl	80077b4 <sbrk_aligned>
 8007868:	3001      	adds	r0, #1
 800786a:	d03a      	beq.n	80078e2 <_malloc_r+0xea>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	442b      	add	r3, r5
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	f8d8 3000 	ldr.w	r3, [r8]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	bb62      	cbnz	r2, 80078d4 <_malloc_r+0xdc>
 800787a:	f8c8 7000 	str.w	r7, [r8]
 800787e:	e00f      	b.n	80078a0 <_malloc_r+0xa8>
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	1b52      	subs	r2, r2, r5
 8007884:	d420      	bmi.n	80078c8 <_malloc_r+0xd0>
 8007886:	2a0b      	cmp	r2, #11
 8007888:	d917      	bls.n	80078ba <_malloc_r+0xc2>
 800788a:	1961      	adds	r1, r4, r5
 800788c:	42a3      	cmp	r3, r4
 800788e:	6025      	str	r5, [r4, #0]
 8007890:	bf18      	it	ne
 8007892:	6059      	strne	r1, [r3, #4]
 8007894:	6863      	ldr	r3, [r4, #4]
 8007896:	bf08      	it	eq
 8007898:	f8c8 1000 	streq.w	r1, [r8]
 800789c:	5162      	str	r2, [r4, r5]
 800789e:	604b      	str	r3, [r1, #4]
 80078a0:	4630      	mov	r0, r6
 80078a2:	f000 f82f 	bl	8007904 <__malloc_unlock>
 80078a6:	f104 000b 	add.w	r0, r4, #11
 80078aa:	1d23      	adds	r3, r4, #4
 80078ac:	f020 0007 	bic.w	r0, r0, #7
 80078b0:	1ac2      	subs	r2, r0, r3
 80078b2:	bf1c      	itt	ne
 80078b4:	1a1b      	subne	r3, r3, r0
 80078b6:	50a3      	strne	r3, [r4, r2]
 80078b8:	e7af      	b.n	800781a <_malloc_r+0x22>
 80078ba:	6862      	ldr	r2, [r4, #4]
 80078bc:	42a3      	cmp	r3, r4
 80078be:	bf0c      	ite	eq
 80078c0:	f8c8 2000 	streq.w	r2, [r8]
 80078c4:	605a      	strne	r2, [r3, #4]
 80078c6:	e7eb      	b.n	80078a0 <_malloc_r+0xa8>
 80078c8:	4623      	mov	r3, r4
 80078ca:	6864      	ldr	r4, [r4, #4]
 80078cc:	e7ae      	b.n	800782c <_malloc_r+0x34>
 80078ce:	463c      	mov	r4, r7
 80078d0:	687f      	ldr	r7, [r7, #4]
 80078d2:	e7b6      	b.n	8007842 <_malloc_r+0x4a>
 80078d4:	461a      	mov	r2, r3
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	42a3      	cmp	r3, r4
 80078da:	d1fb      	bne.n	80078d4 <_malloc_r+0xdc>
 80078dc:	2300      	movs	r3, #0
 80078de:	6053      	str	r3, [r2, #4]
 80078e0:	e7de      	b.n	80078a0 <_malloc_r+0xa8>
 80078e2:	230c      	movs	r3, #12
 80078e4:	6033      	str	r3, [r6, #0]
 80078e6:	4630      	mov	r0, r6
 80078e8:	f000 f80c 	bl	8007904 <__malloc_unlock>
 80078ec:	e794      	b.n	8007818 <_malloc_r+0x20>
 80078ee:	6005      	str	r5, [r0, #0]
 80078f0:	e7d6      	b.n	80078a0 <_malloc_r+0xa8>
 80078f2:	bf00      	nop
 80078f4:	20004c44 	.word	0x20004c44

080078f8 <__malloc_lock>:
 80078f8:	4801      	ldr	r0, [pc, #4]	@ (8007900 <__malloc_lock+0x8>)
 80078fa:	f7ff bf01 	b.w	8007700 <__retarget_lock_acquire_recursive>
 80078fe:	bf00      	nop
 8007900:	20004c3c 	.word	0x20004c3c

08007904 <__malloc_unlock>:
 8007904:	4801      	ldr	r0, [pc, #4]	@ (800790c <__malloc_unlock+0x8>)
 8007906:	f7ff befc 	b.w	8007702 <__retarget_lock_release_recursive>
 800790a:	bf00      	nop
 800790c:	20004c3c 	.word	0x20004c3c

08007910 <__ssputs_r>:
 8007910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007914:	688e      	ldr	r6, [r1, #8]
 8007916:	461f      	mov	r7, r3
 8007918:	42be      	cmp	r6, r7
 800791a:	680b      	ldr	r3, [r1, #0]
 800791c:	4682      	mov	sl, r0
 800791e:	460c      	mov	r4, r1
 8007920:	4690      	mov	r8, r2
 8007922:	d82d      	bhi.n	8007980 <__ssputs_r+0x70>
 8007924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007928:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800792c:	d026      	beq.n	800797c <__ssputs_r+0x6c>
 800792e:	6965      	ldr	r5, [r4, #20]
 8007930:	6909      	ldr	r1, [r1, #16]
 8007932:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007936:	eba3 0901 	sub.w	r9, r3, r1
 800793a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800793e:	1c7b      	adds	r3, r7, #1
 8007940:	444b      	add	r3, r9
 8007942:	106d      	asrs	r5, r5, #1
 8007944:	429d      	cmp	r5, r3
 8007946:	bf38      	it	cc
 8007948:	461d      	movcc	r5, r3
 800794a:	0553      	lsls	r3, r2, #21
 800794c:	d527      	bpl.n	800799e <__ssputs_r+0x8e>
 800794e:	4629      	mov	r1, r5
 8007950:	f7ff ff52 	bl	80077f8 <_malloc_r>
 8007954:	4606      	mov	r6, r0
 8007956:	b360      	cbz	r0, 80079b2 <__ssputs_r+0xa2>
 8007958:	6921      	ldr	r1, [r4, #16]
 800795a:	464a      	mov	r2, r9
 800795c:	f7ff fed2 	bl	8007704 <memcpy>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	6126      	str	r6, [r4, #16]
 800796e:	6165      	str	r5, [r4, #20]
 8007970:	444e      	add	r6, r9
 8007972:	eba5 0509 	sub.w	r5, r5, r9
 8007976:	6026      	str	r6, [r4, #0]
 8007978:	60a5      	str	r5, [r4, #8]
 800797a:	463e      	mov	r6, r7
 800797c:	42be      	cmp	r6, r7
 800797e:	d900      	bls.n	8007982 <__ssputs_r+0x72>
 8007980:	463e      	mov	r6, r7
 8007982:	6820      	ldr	r0, [r4, #0]
 8007984:	4632      	mov	r2, r6
 8007986:	4641      	mov	r1, r8
 8007988:	f000 faa8 	bl	8007edc <memmove>
 800798c:	68a3      	ldr	r3, [r4, #8]
 800798e:	1b9b      	subs	r3, r3, r6
 8007990:	60a3      	str	r3, [r4, #8]
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	4433      	add	r3, r6
 8007996:	6023      	str	r3, [r4, #0]
 8007998:	2000      	movs	r0, #0
 800799a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799e:	462a      	mov	r2, r5
 80079a0:	f000 fac6 	bl	8007f30 <_realloc_r>
 80079a4:	4606      	mov	r6, r0
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d1e0      	bne.n	800796c <__ssputs_r+0x5c>
 80079aa:	6921      	ldr	r1, [r4, #16]
 80079ac:	4650      	mov	r0, sl
 80079ae:	f7ff feb7 	bl	8007720 <_free_r>
 80079b2:	230c      	movs	r3, #12
 80079b4:	f8ca 3000 	str.w	r3, [sl]
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079c4:	e7e9      	b.n	800799a <__ssputs_r+0x8a>
	...

080079c8 <_svfiprintf_r>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	4698      	mov	r8, r3
 80079ce:	898b      	ldrh	r3, [r1, #12]
 80079d0:	061b      	lsls	r3, r3, #24
 80079d2:	b09d      	sub	sp, #116	@ 0x74
 80079d4:	4607      	mov	r7, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	4614      	mov	r4, r2
 80079da:	d510      	bpl.n	80079fe <_svfiprintf_r+0x36>
 80079dc:	690b      	ldr	r3, [r1, #16]
 80079de:	b973      	cbnz	r3, 80079fe <_svfiprintf_r+0x36>
 80079e0:	2140      	movs	r1, #64	@ 0x40
 80079e2:	f7ff ff09 	bl	80077f8 <_malloc_r>
 80079e6:	6028      	str	r0, [r5, #0]
 80079e8:	6128      	str	r0, [r5, #16]
 80079ea:	b930      	cbnz	r0, 80079fa <_svfiprintf_r+0x32>
 80079ec:	230c      	movs	r3, #12
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079f4:	b01d      	add	sp, #116	@ 0x74
 80079f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fa:	2340      	movs	r3, #64	@ 0x40
 80079fc:	616b      	str	r3, [r5, #20]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a02:	2320      	movs	r3, #32
 8007a04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a0c:	2330      	movs	r3, #48	@ 0x30
 8007a0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007bac <_svfiprintf_r+0x1e4>
 8007a12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a16:	f04f 0901 	mov.w	r9, #1
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	469a      	mov	sl, r3
 8007a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a22:	b10a      	cbz	r2, 8007a28 <_svfiprintf_r+0x60>
 8007a24:	2a25      	cmp	r2, #37	@ 0x25
 8007a26:	d1f9      	bne.n	8007a1c <_svfiprintf_r+0x54>
 8007a28:	ebba 0b04 	subs.w	fp, sl, r4
 8007a2c:	d00b      	beq.n	8007a46 <_svfiprintf_r+0x7e>
 8007a2e:	465b      	mov	r3, fp
 8007a30:	4622      	mov	r2, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	4638      	mov	r0, r7
 8007a36:	f7ff ff6b 	bl	8007910 <__ssputs_r>
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f000 80a7 	beq.w	8007b8e <_svfiprintf_r+0x1c6>
 8007a40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a42:	445a      	add	r2, fp
 8007a44:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a46:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 809f 	beq.w	8007b8e <_svfiprintf_r+0x1c6>
 8007a50:	2300      	movs	r3, #0
 8007a52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a5a:	f10a 0a01 	add.w	sl, sl, #1
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	9307      	str	r3, [sp, #28]
 8007a62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a66:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a68:	4654      	mov	r4, sl
 8007a6a:	2205      	movs	r2, #5
 8007a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a70:	484e      	ldr	r0, [pc, #312]	@ (8007bac <_svfiprintf_r+0x1e4>)
 8007a72:	f7f8 fbb5 	bl	80001e0 <memchr>
 8007a76:	9a04      	ldr	r2, [sp, #16]
 8007a78:	b9d8      	cbnz	r0, 8007ab2 <_svfiprintf_r+0xea>
 8007a7a:	06d0      	lsls	r0, r2, #27
 8007a7c:	bf44      	itt	mi
 8007a7e:	2320      	movmi	r3, #32
 8007a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a84:	0711      	lsls	r1, r2, #28
 8007a86:	bf44      	itt	mi
 8007a88:	232b      	movmi	r3, #43	@ 0x2b
 8007a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a92:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a94:	d015      	beq.n	8007ac2 <_svfiprintf_r+0xfa>
 8007a96:	9a07      	ldr	r2, [sp, #28]
 8007a98:	4654      	mov	r4, sl
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f04f 0c0a 	mov.w	ip, #10
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aa6:	3b30      	subs	r3, #48	@ 0x30
 8007aa8:	2b09      	cmp	r3, #9
 8007aaa:	d94b      	bls.n	8007b44 <_svfiprintf_r+0x17c>
 8007aac:	b1b0      	cbz	r0, 8007adc <_svfiprintf_r+0x114>
 8007aae:	9207      	str	r2, [sp, #28]
 8007ab0:	e014      	b.n	8007adc <_svfiprintf_r+0x114>
 8007ab2:	eba0 0308 	sub.w	r3, r0, r8
 8007ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aba:	4313      	orrs	r3, r2
 8007abc:	9304      	str	r3, [sp, #16]
 8007abe:	46a2      	mov	sl, r4
 8007ac0:	e7d2      	b.n	8007a68 <_svfiprintf_r+0xa0>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	1d19      	adds	r1, r3, #4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	9103      	str	r1, [sp, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bfbb      	ittet	lt
 8007ace:	425b      	neglt	r3, r3
 8007ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ad4:	9307      	strge	r3, [sp, #28]
 8007ad6:	9307      	strlt	r3, [sp, #28]
 8007ad8:	bfb8      	it	lt
 8007ada:	9204      	strlt	r2, [sp, #16]
 8007adc:	7823      	ldrb	r3, [r4, #0]
 8007ade:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ae0:	d10a      	bne.n	8007af8 <_svfiprintf_r+0x130>
 8007ae2:	7863      	ldrb	r3, [r4, #1]
 8007ae4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ae6:	d132      	bne.n	8007b4e <_svfiprintf_r+0x186>
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	1d1a      	adds	r2, r3, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	9203      	str	r2, [sp, #12]
 8007af0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007af4:	3402      	adds	r4, #2
 8007af6:	9305      	str	r3, [sp, #20]
 8007af8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007bbc <_svfiprintf_r+0x1f4>
 8007afc:	7821      	ldrb	r1, [r4, #0]
 8007afe:	2203      	movs	r2, #3
 8007b00:	4650      	mov	r0, sl
 8007b02:	f7f8 fb6d 	bl	80001e0 <memchr>
 8007b06:	b138      	cbz	r0, 8007b18 <_svfiprintf_r+0x150>
 8007b08:	9b04      	ldr	r3, [sp, #16]
 8007b0a:	eba0 000a 	sub.w	r0, r0, sl
 8007b0e:	2240      	movs	r2, #64	@ 0x40
 8007b10:	4082      	lsls	r2, r0
 8007b12:	4313      	orrs	r3, r2
 8007b14:	3401      	adds	r4, #1
 8007b16:	9304      	str	r3, [sp, #16]
 8007b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b1c:	4824      	ldr	r0, [pc, #144]	@ (8007bb0 <_svfiprintf_r+0x1e8>)
 8007b1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b22:	2206      	movs	r2, #6
 8007b24:	f7f8 fb5c 	bl	80001e0 <memchr>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d036      	beq.n	8007b9a <_svfiprintf_r+0x1d2>
 8007b2c:	4b21      	ldr	r3, [pc, #132]	@ (8007bb4 <_svfiprintf_r+0x1ec>)
 8007b2e:	bb1b      	cbnz	r3, 8007b78 <_svfiprintf_r+0x1b0>
 8007b30:	9b03      	ldr	r3, [sp, #12]
 8007b32:	3307      	adds	r3, #7
 8007b34:	f023 0307 	bic.w	r3, r3, #7
 8007b38:	3308      	adds	r3, #8
 8007b3a:	9303      	str	r3, [sp, #12]
 8007b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b3e:	4433      	add	r3, r6
 8007b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b42:	e76a      	b.n	8007a1a <_svfiprintf_r+0x52>
 8007b44:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b48:	460c      	mov	r4, r1
 8007b4a:	2001      	movs	r0, #1
 8007b4c:	e7a8      	b.n	8007aa0 <_svfiprintf_r+0xd8>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	3401      	adds	r4, #1
 8007b52:	9305      	str	r3, [sp, #20]
 8007b54:	4619      	mov	r1, r3
 8007b56:	f04f 0c0a 	mov.w	ip, #10
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b60:	3a30      	subs	r2, #48	@ 0x30
 8007b62:	2a09      	cmp	r2, #9
 8007b64:	d903      	bls.n	8007b6e <_svfiprintf_r+0x1a6>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0c6      	beq.n	8007af8 <_svfiprintf_r+0x130>
 8007b6a:	9105      	str	r1, [sp, #20]
 8007b6c:	e7c4      	b.n	8007af8 <_svfiprintf_r+0x130>
 8007b6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b72:	4604      	mov	r4, r0
 8007b74:	2301      	movs	r3, #1
 8007b76:	e7f0      	b.n	8007b5a <_svfiprintf_r+0x192>
 8007b78:	ab03      	add	r3, sp, #12
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	462a      	mov	r2, r5
 8007b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb8 <_svfiprintf_r+0x1f0>)
 8007b80:	a904      	add	r1, sp, #16
 8007b82:	4638      	mov	r0, r7
 8007b84:	f3af 8000 	nop.w
 8007b88:	1c42      	adds	r2, r0, #1
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	d1d6      	bne.n	8007b3c <_svfiprintf_r+0x174>
 8007b8e:	89ab      	ldrh	r3, [r5, #12]
 8007b90:	065b      	lsls	r3, r3, #25
 8007b92:	f53f af2d 	bmi.w	80079f0 <_svfiprintf_r+0x28>
 8007b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b98:	e72c      	b.n	80079f4 <_svfiprintf_r+0x2c>
 8007b9a:	ab03      	add	r3, sp, #12
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	4b05      	ldr	r3, [pc, #20]	@ (8007bb8 <_svfiprintf_r+0x1f0>)
 8007ba2:	a904      	add	r1, sp, #16
 8007ba4:	4638      	mov	r0, r7
 8007ba6:	f000 f879 	bl	8007c9c <_printf_i>
 8007baa:	e7ed      	b.n	8007b88 <_svfiprintf_r+0x1c0>
 8007bac:	08008355 	.word	0x08008355
 8007bb0:	0800835f 	.word	0x0800835f
 8007bb4:	00000000 	.word	0x00000000
 8007bb8:	08007911 	.word	0x08007911
 8007bbc:	0800835b 	.word	0x0800835b

08007bc0 <_printf_common>:
 8007bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc4:	4616      	mov	r6, r2
 8007bc6:	4698      	mov	r8, r3
 8007bc8:	688a      	ldr	r2, [r1, #8]
 8007bca:	690b      	ldr	r3, [r1, #16]
 8007bcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	bfb8      	it	lt
 8007bd4:	4613      	movlt	r3, r2
 8007bd6:	6033      	str	r3, [r6, #0]
 8007bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bdc:	4607      	mov	r7, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	b10a      	cbz	r2, 8007be6 <_printf_common+0x26>
 8007be2:	3301      	adds	r3, #1
 8007be4:	6033      	str	r3, [r6, #0]
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	0699      	lsls	r1, r3, #26
 8007bea:	bf42      	ittt	mi
 8007bec:	6833      	ldrmi	r3, [r6, #0]
 8007bee:	3302      	addmi	r3, #2
 8007bf0:	6033      	strmi	r3, [r6, #0]
 8007bf2:	6825      	ldr	r5, [r4, #0]
 8007bf4:	f015 0506 	ands.w	r5, r5, #6
 8007bf8:	d106      	bne.n	8007c08 <_printf_common+0x48>
 8007bfa:	f104 0a19 	add.w	sl, r4, #25
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	6832      	ldr	r2, [r6, #0]
 8007c02:	1a9b      	subs	r3, r3, r2
 8007c04:	42ab      	cmp	r3, r5
 8007c06:	dc26      	bgt.n	8007c56 <_printf_common+0x96>
 8007c08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c0c:	6822      	ldr	r2, [r4, #0]
 8007c0e:	3b00      	subs	r3, #0
 8007c10:	bf18      	it	ne
 8007c12:	2301      	movne	r3, #1
 8007c14:	0692      	lsls	r2, r2, #26
 8007c16:	d42b      	bmi.n	8007c70 <_printf_common+0xb0>
 8007c18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c1c:	4641      	mov	r1, r8
 8007c1e:	4638      	mov	r0, r7
 8007c20:	47c8      	blx	r9
 8007c22:	3001      	adds	r0, #1
 8007c24:	d01e      	beq.n	8007c64 <_printf_common+0xa4>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	6922      	ldr	r2, [r4, #16]
 8007c2a:	f003 0306 	and.w	r3, r3, #6
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	bf02      	ittt	eq
 8007c32:	68e5      	ldreq	r5, [r4, #12]
 8007c34:	6833      	ldreq	r3, [r6, #0]
 8007c36:	1aed      	subeq	r5, r5, r3
 8007c38:	68a3      	ldr	r3, [r4, #8]
 8007c3a:	bf0c      	ite	eq
 8007c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c40:	2500      	movne	r5, #0
 8007c42:	4293      	cmp	r3, r2
 8007c44:	bfc4      	itt	gt
 8007c46:	1a9b      	subgt	r3, r3, r2
 8007c48:	18ed      	addgt	r5, r5, r3
 8007c4a:	2600      	movs	r6, #0
 8007c4c:	341a      	adds	r4, #26
 8007c4e:	42b5      	cmp	r5, r6
 8007c50:	d11a      	bne.n	8007c88 <_printf_common+0xc8>
 8007c52:	2000      	movs	r0, #0
 8007c54:	e008      	b.n	8007c68 <_printf_common+0xa8>
 8007c56:	2301      	movs	r3, #1
 8007c58:	4652      	mov	r2, sl
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	47c8      	blx	r9
 8007c60:	3001      	adds	r0, #1
 8007c62:	d103      	bne.n	8007c6c <_printf_common+0xac>
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6c:	3501      	adds	r5, #1
 8007c6e:	e7c6      	b.n	8007bfe <_printf_common+0x3e>
 8007c70:	18e1      	adds	r1, r4, r3
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	2030      	movs	r0, #48	@ 0x30
 8007c76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c7a:	4422      	add	r2, r4
 8007c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c84:	3302      	adds	r3, #2
 8007c86:	e7c7      	b.n	8007c18 <_printf_common+0x58>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	4641      	mov	r1, r8
 8007c8e:	4638      	mov	r0, r7
 8007c90:	47c8      	blx	r9
 8007c92:	3001      	adds	r0, #1
 8007c94:	d0e6      	beq.n	8007c64 <_printf_common+0xa4>
 8007c96:	3601      	adds	r6, #1
 8007c98:	e7d9      	b.n	8007c4e <_printf_common+0x8e>
	...

08007c9c <_printf_i>:
 8007c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca0:	7e0f      	ldrb	r7, [r1, #24]
 8007ca2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ca4:	2f78      	cmp	r7, #120	@ 0x78
 8007ca6:	4691      	mov	r9, r2
 8007ca8:	4680      	mov	r8, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	469a      	mov	sl, r3
 8007cae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cb2:	d807      	bhi.n	8007cc4 <_printf_i+0x28>
 8007cb4:	2f62      	cmp	r7, #98	@ 0x62
 8007cb6:	d80a      	bhi.n	8007cce <_printf_i+0x32>
 8007cb8:	2f00      	cmp	r7, #0
 8007cba:	f000 80d2 	beq.w	8007e62 <_printf_i+0x1c6>
 8007cbe:	2f58      	cmp	r7, #88	@ 0x58
 8007cc0:	f000 80b9 	beq.w	8007e36 <_printf_i+0x19a>
 8007cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ccc:	e03a      	b.n	8007d44 <_printf_i+0xa8>
 8007cce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cd2:	2b15      	cmp	r3, #21
 8007cd4:	d8f6      	bhi.n	8007cc4 <_printf_i+0x28>
 8007cd6:	a101      	add	r1, pc, #4	@ (adr r1, 8007cdc <_printf_i+0x40>)
 8007cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cdc:	08007d35 	.word	0x08007d35
 8007ce0:	08007d49 	.word	0x08007d49
 8007ce4:	08007cc5 	.word	0x08007cc5
 8007ce8:	08007cc5 	.word	0x08007cc5
 8007cec:	08007cc5 	.word	0x08007cc5
 8007cf0:	08007cc5 	.word	0x08007cc5
 8007cf4:	08007d49 	.word	0x08007d49
 8007cf8:	08007cc5 	.word	0x08007cc5
 8007cfc:	08007cc5 	.word	0x08007cc5
 8007d00:	08007cc5 	.word	0x08007cc5
 8007d04:	08007cc5 	.word	0x08007cc5
 8007d08:	08007e49 	.word	0x08007e49
 8007d0c:	08007d73 	.word	0x08007d73
 8007d10:	08007e03 	.word	0x08007e03
 8007d14:	08007cc5 	.word	0x08007cc5
 8007d18:	08007cc5 	.word	0x08007cc5
 8007d1c:	08007e6b 	.word	0x08007e6b
 8007d20:	08007cc5 	.word	0x08007cc5
 8007d24:	08007d73 	.word	0x08007d73
 8007d28:	08007cc5 	.word	0x08007cc5
 8007d2c:	08007cc5 	.word	0x08007cc5
 8007d30:	08007e0b 	.word	0x08007e0b
 8007d34:	6833      	ldr	r3, [r6, #0]
 8007d36:	1d1a      	adds	r2, r3, #4
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6032      	str	r2, [r6, #0]
 8007d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d44:	2301      	movs	r3, #1
 8007d46:	e09d      	b.n	8007e84 <_printf_i+0x1e8>
 8007d48:	6833      	ldr	r3, [r6, #0]
 8007d4a:	6820      	ldr	r0, [r4, #0]
 8007d4c:	1d19      	adds	r1, r3, #4
 8007d4e:	6031      	str	r1, [r6, #0]
 8007d50:	0606      	lsls	r6, r0, #24
 8007d52:	d501      	bpl.n	8007d58 <_printf_i+0xbc>
 8007d54:	681d      	ldr	r5, [r3, #0]
 8007d56:	e003      	b.n	8007d60 <_printf_i+0xc4>
 8007d58:	0645      	lsls	r5, r0, #25
 8007d5a:	d5fb      	bpl.n	8007d54 <_printf_i+0xb8>
 8007d5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d60:	2d00      	cmp	r5, #0
 8007d62:	da03      	bge.n	8007d6c <_printf_i+0xd0>
 8007d64:	232d      	movs	r3, #45	@ 0x2d
 8007d66:	426d      	negs	r5, r5
 8007d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d6c:	4859      	ldr	r0, [pc, #356]	@ (8007ed4 <_printf_i+0x238>)
 8007d6e:	230a      	movs	r3, #10
 8007d70:	e011      	b.n	8007d96 <_printf_i+0xfa>
 8007d72:	6821      	ldr	r1, [r4, #0]
 8007d74:	6833      	ldr	r3, [r6, #0]
 8007d76:	0608      	lsls	r0, r1, #24
 8007d78:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d7c:	d402      	bmi.n	8007d84 <_printf_i+0xe8>
 8007d7e:	0649      	lsls	r1, r1, #25
 8007d80:	bf48      	it	mi
 8007d82:	b2ad      	uxthmi	r5, r5
 8007d84:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d86:	4853      	ldr	r0, [pc, #332]	@ (8007ed4 <_printf_i+0x238>)
 8007d88:	6033      	str	r3, [r6, #0]
 8007d8a:	bf14      	ite	ne
 8007d8c:	230a      	movne	r3, #10
 8007d8e:	2308      	moveq	r3, #8
 8007d90:	2100      	movs	r1, #0
 8007d92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d96:	6866      	ldr	r6, [r4, #4]
 8007d98:	60a6      	str	r6, [r4, #8]
 8007d9a:	2e00      	cmp	r6, #0
 8007d9c:	bfa2      	ittt	ge
 8007d9e:	6821      	ldrge	r1, [r4, #0]
 8007da0:	f021 0104 	bicge.w	r1, r1, #4
 8007da4:	6021      	strge	r1, [r4, #0]
 8007da6:	b90d      	cbnz	r5, 8007dac <_printf_i+0x110>
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	d04b      	beq.n	8007e44 <_printf_i+0x1a8>
 8007dac:	4616      	mov	r6, r2
 8007dae:	fbb5 f1f3 	udiv	r1, r5, r3
 8007db2:	fb03 5711 	mls	r7, r3, r1, r5
 8007db6:	5dc7      	ldrb	r7, [r0, r7]
 8007db8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dbc:	462f      	mov	r7, r5
 8007dbe:	42bb      	cmp	r3, r7
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	d9f4      	bls.n	8007dae <_printf_i+0x112>
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d10b      	bne.n	8007de0 <_printf_i+0x144>
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	07df      	lsls	r7, r3, #31
 8007dcc:	d508      	bpl.n	8007de0 <_printf_i+0x144>
 8007dce:	6923      	ldr	r3, [r4, #16]
 8007dd0:	6861      	ldr	r1, [r4, #4]
 8007dd2:	4299      	cmp	r1, r3
 8007dd4:	bfde      	ittt	le
 8007dd6:	2330      	movle	r3, #48	@ 0x30
 8007dd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ddc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007de0:	1b92      	subs	r2, r2, r6
 8007de2:	6122      	str	r2, [r4, #16]
 8007de4:	f8cd a000 	str.w	sl, [sp]
 8007de8:	464b      	mov	r3, r9
 8007dea:	aa03      	add	r2, sp, #12
 8007dec:	4621      	mov	r1, r4
 8007dee:	4640      	mov	r0, r8
 8007df0:	f7ff fee6 	bl	8007bc0 <_printf_common>
 8007df4:	3001      	adds	r0, #1
 8007df6:	d14a      	bne.n	8007e8e <_printf_i+0x1f2>
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dfc:	b004      	add	sp, #16
 8007dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	f043 0320 	orr.w	r3, r3, #32
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	4833      	ldr	r0, [pc, #204]	@ (8007ed8 <_printf_i+0x23c>)
 8007e0c:	2778      	movs	r7, #120	@ 0x78
 8007e0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	6831      	ldr	r1, [r6, #0]
 8007e16:	061f      	lsls	r7, r3, #24
 8007e18:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e1c:	d402      	bmi.n	8007e24 <_printf_i+0x188>
 8007e1e:	065f      	lsls	r7, r3, #25
 8007e20:	bf48      	it	mi
 8007e22:	b2ad      	uxthmi	r5, r5
 8007e24:	6031      	str	r1, [r6, #0]
 8007e26:	07d9      	lsls	r1, r3, #31
 8007e28:	bf44      	itt	mi
 8007e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e2e:	6023      	strmi	r3, [r4, #0]
 8007e30:	b11d      	cbz	r5, 8007e3a <_printf_i+0x19e>
 8007e32:	2310      	movs	r3, #16
 8007e34:	e7ac      	b.n	8007d90 <_printf_i+0xf4>
 8007e36:	4827      	ldr	r0, [pc, #156]	@ (8007ed4 <_printf_i+0x238>)
 8007e38:	e7e9      	b.n	8007e0e <_printf_i+0x172>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	f023 0320 	bic.w	r3, r3, #32
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	e7f6      	b.n	8007e32 <_printf_i+0x196>
 8007e44:	4616      	mov	r6, r2
 8007e46:	e7bd      	b.n	8007dc4 <_printf_i+0x128>
 8007e48:	6833      	ldr	r3, [r6, #0]
 8007e4a:	6825      	ldr	r5, [r4, #0]
 8007e4c:	6961      	ldr	r1, [r4, #20]
 8007e4e:	1d18      	adds	r0, r3, #4
 8007e50:	6030      	str	r0, [r6, #0]
 8007e52:	062e      	lsls	r6, r5, #24
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	d501      	bpl.n	8007e5c <_printf_i+0x1c0>
 8007e58:	6019      	str	r1, [r3, #0]
 8007e5a:	e002      	b.n	8007e62 <_printf_i+0x1c6>
 8007e5c:	0668      	lsls	r0, r5, #25
 8007e5e:	d5fb      	bpl.n	8007e58 <_printf_i+0x1bc>
 8007e60:	8019      	strh	r1, [r3, #0]
 8007e62:	2300      	movs	r3, #0
 8007e64:	6123      	str	r3, [r4, #16]
 8007e66:	4616      	mov	r6, r2
 8007e68:	e7bc      	b.n	8007de4 <_printf_i+0x148>
 8007e6a:	6833      	ldr	r3, [r6, #0]
 8007e6c:	1d1a      	adds	r2, r3, #4
 8007e6e:	6032      	str	r2, [r6, #0]
 8007e70:	681e      	ldr	r6, [r3, #0]
 8007e72:	6862      	ldr	r2, [r4, #4]
 8007e74:	2100      	movs	r1, #0
 8007e76:	4630      	mov	r0, r6
 8007e78:	f7f8 f9b2 	bl	80001e0 <memchr>
 8007e7c:	b108      	cbz	r0, 8007e82 <_printf_i+0x1e6>
 8007e7e:	1b80      	subs	r0, r0, r6
 8007e80:	6060      	str	r0, [r4, #4]
 8007e82:	6863      	ldr	r3, [r4, #4]
 8007e84:	6123      	str	r3, [r4, #16]
 8007e86:	2300      	movs	r3, #0
 8007e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e8c:	e7aa      	b.n	8007de4 <_printf_i+0x148>
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	4632      	mov	r2, r6
 8007e92:	4649      	mov	r1, r9
 8007e94:	4640      	mov	r0, r8
 8007e96:	47d0      	blx	sl
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d0ad      	beq.n	8007df8 <_printf_i+0x15c>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	079b      	lsls	r3, r3, #30
 8007ea0:	d413      	bmi.n	8007eca <_printf_i+0x22e>
 8007ea2:	68e0      	ldr	r0, [r4, #12]
 8007ea4:	9b03      	ldr	r3, [sp, #12]
 8007ea6:	4298      	cmp	r0, r3
 8007ea8:	bfb8      	it	lt
 8007eaa:	4618      	movlt	r0, r3
 8007eac:	e7a6      	b.n	8007dfc <_printf_i+0x160>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	4632      	mov	r2, r6
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	47d0      	blx	sl
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d09d      	beq.n	8007df8 <_printf_i+0x15c>
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	68e3      	ldr	r3, [r4, #12]
 8007ec0:	9903      	ldr	r1, [sp, #12]
 8007ec2:	1a5b      	subs	r3, r3, r1
 8007ec4:	42ab      	cmp	r3, r5
 8007ec6:	dcf2      	bgt.n	8007eae <_printf_i+0x212>
 8007ec8:	e7eb      	b.n	8007ea2 <_printf_i+0x206>
 8007eca:	2500      	movs	r5, #0
 8007ecc:	f104 0619 	add.w	r6, r4, #25
 8007ed0:	e7f5      	b.n	8007ebe <_printf_i+0x222>
 8007ed2:	bf00      	nop
 8007ed4:	08008366 	.word	0x08008366
 8007ed8:	08008377 	.word	0x08008377

08007edc <memmove>:
 8007edc:	4288      	cmp	r0, r1
 8007ede:	b510      	push	{r4, lr}
 8007ee0:	eb01 0402 	add.w	r4, r1, r2
 8007ee4:	d902      	bls.n	8007eec <memmove+0x10>
 8007ee6:	4284      	cmp	r4, r0
 8007ee8:	4623      	mov	r3, r4
 8007eea:	d807      	bhi.n	8007efc <memmove+0x20>
 8007eec:	1e43      	subs	r3, r0, #1
 8007eee:	42a1      	cmp	r1, r4
 8007ef0:	d008      	beq.n	8007f04 <memmove+0x28>
 8007ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007efa:	e7f8      	b.n	8007eee <memmove+0x12>
 8007efc:	4402      	add	r2, r0
 8007efe:	4601      	mov	r1, r0
 8007f00:	428a      	cmp	r2, r1
 8007f02:	d100      	bne.n	8007f06 <memmove+0x2a>
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f0e:	e7f7      	b.n	8007f00 <memmove+0x24>

08007f10 <_sbrk_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4d06      	ldr	r5, [pc, #24]	@ (8007f2c <_sbrk_r+0x1c>)
 8007f14:	2300      	movs	r3, #0
 8007f16:	4604      	mov	r4, r0
 8007f18:	4608      	mov	r0, r1
 8007f1a:	602b      	str	r3, [r5, #0]
 8007f1c:	f7f9 f92e 	bl	800117c <_sbrk>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	d102      	bne.n	8007f2a <_sbrk_r+0x1a>
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	b103      	cbz	r3, 8007f2a <_sbrk_r+0x1a>
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	20004c38 	.word	0x20004c38

08007f30 <_realloc_r>:
 8007f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f34:	4680      	mov	r8, r0
 8007f36:	4615      	mov	r5, r2
 8007f38:	460c      	mov	r4, r1
 8007f3a:	b921      	cbnz	r1, 8007f46 <_realloc_r+0x16>
 8007f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f40:	4611      	mov	r1, r2
 8007f42:	f7ff bc59 	b.w	80077f8 <_malloc_r>
 8007f46:	b92a      	cbnz	r2, 8007f54 <_realloc_r+0x24>
 8007f48:	f7ff fbea 	bl	8007720 <_free_r>
 8007f4c:	2400      	movs	r4, #0
 8007f4e:	4620      	mov	r0, r4
 8007f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f54:	f000 f81a 	bl	8007f8c <_malloc_usable_size_r>
 8007f58:	4285      	cmp	r5, r0
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	d802      	bhi.n	8007f64 <_realloc_r+0x34>
 8007f5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f62:	d8f4      	bhi.n	8007f4e <_realloc_r+0x1e>
 8007f64:	4629      	mov	r1, r5
 8007f66:	4640      	mov	r0, r8
 8007f68:	f7ff fc46 	bl	80077f8 <_malloc_r>
 8007f6c:	4607      	mov	r7, r0
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d0ec      	beq.n	8007f4c <_realloc_r+0x1c>
 8007f72:	42b5      	cmp	r5, r6
 8007f74:	462a      	mov	r2, r5
 8007f76:	4621      	mov	r1, r4
 8007f78:	bf28      	it	cs
 8007f7a:	4632      	movcs	r2, r6
 8007f7c:	f7ff fbc2 	bl	8007704 <memcpy>
 8007f80:	4621      	mov	r1, r4
 8007f82:	4640      	mov	r0, r8
 8007f84:	f7ff fbcc 	bl	8007720 <_free_r>
 8007f88:	463c      	mov	r4, r7
 8007f8a:	e7e0      	b.n	8007f4e <_realloc_r+0x1e>

08007f8c <_malloc_usable_size_r>:
 8007f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f90:	1f18      	subs	r0, r3, #4
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	bfbc      	itt	lt
 8007f96:	580b      	ldrlt	r3, [r1, r0]
 8007f98:	18c0      	addlt	r0, r0, r3
 8007f9a:	4770      	bx	lr

08007f9c <_init>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	bf00      	nop
 8007fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa2:	bc08      	pop	{r3}
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	4770      	bx	lr

08007fa8 <_fini>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	bf00      	nop
 8007fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fae:	bc08      	pop	{r3}
 8007fb0:	469e      	mov	lr, r3
 8007fb2:	4770      	bx	lr
