
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08007198  08007198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007414  08007414  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007414  08007414  00008414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800741c  0800741c  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800741c  0800741c  0000841c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007420  08007420  00008420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007424  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c04  20000064  08007488  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c68  08007488  00009c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ea5  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331d  00000000  00000000  0001ff39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00023258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff1  00000000  00000000  000246d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d7c  00000000  00000000  000256c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016047  00000000  00000000  0002943d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000989b7  00000000  00000000  0003f484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7e3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba0  00000000  00000000  000d7e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000dda20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007180 	.word	0x08007180

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08007180 	.word	0x08007180

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fd48 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f888 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f9b8 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f98c 	bl	80008ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000594:	f000 f8ec 	bl	8000770 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000598:	f000 f93a 	bl	8000810 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059c:	f002 fd44 	bl	8003028 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex */
  MutexHandle = osMutexNew(&Mutex_attributes);
 80005a0:	4826      	ldr	r0, [pc, #152]	@ (800063c <main+0xbc>)
 80005a2:	f002 ff1e 	bl	80033e2 <osMutexNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a25      	ldr	r2, [pc, #148]	@ (8000640 <main+0xc0>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Frecuencia */
  FrecuenciaHandle = osMessageQueueNew (16, sizeof(uint16_t), &Frecuencia_attributes);
 80005ac:	4a25      	ldr	r2, [pc, #148]	@ (8000644 <main+0xc4>)
 80005ae:	2102      	movs	r1, #2
 80005b0:	2010      	movs	r0, #16
 80005b2:	f002 ff9c 	bl	80034ee <osMessageQueueNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a23      	ldr	r2, [pc, #140]	@ (8000648 <main+0xc8>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005bc:	4a23      	ldr	r2, [pc, #140]	@ (800064c <main+0xcc>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4823      	ldr	r0, [pc, #140]	@ (8000650 <main+0xd0>)
 80005c2:	f002 fd7b 	bl	80030bc <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a22      	ldr	r2, [pc, #136]	@ (8000654 <main+0xd4>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of LecturaPulsador */
  LecturaPulsadorHandle = osThreadNew(LecturaPines, NULL, &LecturaPulsador_attributes);
 80005cc:	4a22      	ldr	r2, [pc, #136]	@ (8000658 <main+0xd8>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4822      	ldr	r0, [pc, #136]	@ (800065c <main+0xdc>)
 80005d2:	f002 fd73 	bl	80030bc <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <main+0xe0>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of ultrasound */
  ultrasoundHandle = osThreadNew(Ultrasound, NULL, &ultrasound_attributes);
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <main+0xe4>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4821      	ldr	r0, [pc, #132]	@ (8000668 <main+0xe8>)
 80005e2:	f002 fd6b 	bl	80030bc <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a20      	ldr	r2, [pc, #128]	@ (800066c <main+0xec>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of Buzzer */
  BuzzerHandle = osThreadNew(BuzzerA, NULL, &Buzzer_attributes);
 80005ec:	4a20      	ldr	r2, [pc, #128]	@ (8000670 <main+0xf0>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4820      	ldr	r0, [pc, #128]	@ (8000674 <main+0xf4>)
 80005f2:	f002 fd63 	bl	80030bc <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000678 <main+0xf8>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of CambioModo */
  CambioModoHandle = osThreadNew(BotonModo, NULL, &CambioModo_attributes);
 80005fc:	4a1f      	ldr	r2, [pc, #124]	@ (800067c <main+0xfc>)
 80005fe:	2100      	movs	r1, #0
 8000600:	481f      	ldr	r0, [pc, #124]	@ (8000680 <main+0x100>)
 8000602:	f002 fd5b 	bl	80030bc <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a1e      	ldr	r2, [pc, #120]	@ (8000684 <main+0x104>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of LecturaMicrofon */
  LecturaMicrofonHandle = osThreadNew(LeerMicro, NULL, &LecturaMicrofon_attributes);
 800060c:	4a1e      	ldr	r2, [pc, #120]	@ (8000688 <main+0x108>)
 800060e:	2100      	movs	r1, #0
 8000610:	481e      	ldr	r0, [pc, #120]	@ (800068c <main+0x10c>)
 8000612:	f002 fd53 	bl	80030bc <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a1d      	ldr	r2, [pc, #116]	@ (8000690 <main+0x110>)
 800061a:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of PinPolling */
  PinPollingHandle = osEventFlagsNew(&PinPolling_attributes);
 800061c:	481d      	ldr	r0, [pc, #116]	@ (8000694 <main+0x114>)
 800061e:	f002 fdfa 	bl	8003216 <osEventFlagsNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a1c      	ldr	r2, [pc, #112]	@ (8000698 <main+0x118>)
 8000626:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  osEventFlagsSet(PinPollingHandle,0x0002U);
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <main+0x118>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fe30 	bl	8003294 <osEventFlagsSet>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f002 fd1c 	bl	8003070 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <main+0xb8>
 800063c:	080073a8 	.word	0x080073a8
 8000640:	20000170 	.word	0x20000170
 8000644:	08007390 	.word	0x08007390
 8000648:	2000016c 	.word	0x2000016c
 800064c:	080072b8 	.word	0x080072b8
 8000650:	08000b05 	.word	0x08000b05
 8000654:	20000154 	.word	0x20000154
 8000658:	080072dc 	.word	0x080072dc
 800065c:	08000b29 	.word	0x08000b29
 8000660:	20000158 	.word	0x20000158
 8000664:	08007300 	.word	0x08007300
 8000668:	08000bb5 	.word	0x08000bb5
 800066c:	2000015c 	.word	0x2000015c
 8000670:	08007324 	.word	0x08007324
 8000674:	08000c05 	.word	0x08000c05
 8000678:	20000160 	.word	0x20000160
 800067c:	08007348 	.word	0x08007348
 8000680:	08000ca5 	.word	0x08000ca5
 8000684:	20000164 	.word	0x20000164
 8000688:	0800736c 	.word	0x0800736c
 800068c:	08000d2d 	.word	0x08000d2d
 8000690:	20000168 	.word	0x20000168
 8000694:	080073b8 	.word	0x080073b8
 8000698:	20000174 	.word	0x20000174

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 f8e8 	bl	8006880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800070c:	2310      	movs	r3, #16
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000710:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000716:	2304      	movs	r3, #4
 8000718:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	4618      	mov	r0, r3
 8000724:	f000 ffcc 	bl	80016c0 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800072e:	f000 fb05 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fa2e 	bl	8001bb0 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075a:	f000 faef 	bl	8000d3c <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800078c:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <MX_TIM1_Init+0x98>)
 800078e:	4a1f      	ldr	r2, [pc, #124]	@ (800080c <MX_TIM1_Init+0x9c>)
 8000790:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <MX_TIM1_Init+0x98>)
 8000794:	2254      	movs	r2, #84	@ 0x54
 8000796:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_TIM1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <MX_TIM1_Init+0x98>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_TIM1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007aa:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <MX_TIM1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_TIM1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b6:	4814      	ldr	r0, [pc, #80]	@ (8000808 <MX_TIM1_Init+0x98>)
 80007b8:	f001 fc1a 	bl	8001ff0 <HAL_TIM_Base_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80007c2:	f000 fabb 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	4619      	mov	r1, r3
 80007d2:	480d      	ldr	r0, [pc, #52]	@ (8000808 <MX_TIM1_Init+0x98>)
 80007d4:	f001 fdf5 	bl	80023c2 <HAL_TIM_ConfigClockSource>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80007de:	f000 faad 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <MX_TIM1_Init+0x98>)
 80007f0:	f001 fff0 	bl	80027d4 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80007fa:	f000 fa9f 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000080 	.word	0x20000080
 800080c:	40010000 	.word	0x40010000

08000810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800082c:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <MX_TIM3_Init+0x94>)
 800082e:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <MX_TIM3_Init+0x98>)
 8000830:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_TIM3_Init+0x94>)
 8000834:	2229      	movs	r2, #41	@ 0x29
 8000836:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_TIM3_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_TIM3_Init+0x94>)
 8000840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000844:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_TIM3_Init+0x94>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_TIM3_Init+0x94>)
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000852:	4814      	ldr	r0, [pc, #80]	@ (80008a4 <MX_TIM3_Init+0x94>)
 8000854:	f001 fbcc 	bl	8001ff0 <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 fa6d 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000866:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	4619      	mov	r1, r3
 800086e:	480d      	ldr	r0, [pc, #52]	@ (80008a4 <MX_TIM3_Init+0x94>)
 8000870:	f001 fda7 	bl	80023c2 <HAL_TIM_ConfigClockSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800087a:	f000 fa5f 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	@ (80008a4 <MX_TIM3_Init+0x94>)
 800088c:	f001 ffa2 	bl	80027d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000896:	f000 fa51 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000c8 	.word	0x200000c8
 80008a8:	40000400 	.word	0x40000400

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <MX_USART2_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f001 fff8 	bl	80028d8 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 fa25 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000110 	.word	0x20000110
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b43      	ldr	r3, [pc, #268]	@ (8000a28 <MX_GPIO_Init+0x128>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a42      	ldr	r2, [pc, #264]	@ (8000a28 <MX_GPIO_Init+0x128>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b40      	ldr	r3, [pc, #256]	@ (8000a28 <MX_GPIO_Init+0x128>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b3c      	ldr	r3, [pc, #240]	@ (8000a28 <MX_GPIO_Init+0x128>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a3b      	ldr	r2, [pc, #236]	@ (8000a28 <MX_GPIO_Init+0x128>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b39      	ldr	r3, [pc, #228]	@ (8000a28 <MX_GPIO_Init+0x128>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <MX_GPIO_Init+0x128>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a34      	ldr	r2, [pc, #208]	@ (8000a28 <MX_GPIO_Init+0x128>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b32      	ldr	r3, [pc, #200]	@ (8000a28 <MX_GPIO_Init+0x128>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a28 <MX_GPIO_Init+0x128>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a2d      	ldr	r2, [pc, #180]	@ (8000a28 <MX_GPIO_Init+0x128>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <MX_GPIO_Init+0x128>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	21a0      	movs	r1, #160	@ 0xa0
 800098a:	4828      	ldr	r0, [pc, #160]	@ (8000a2c <MX_GPIO_Init+0x12c>)
 800098c:	f000 fe64 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_ultrasonido_GPIO_Port, Trigger_ultrasonido_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2110      	movs	r1, #16
 8000994:	4826      	ldr	r0, [pc, #152]	@ (8000a30 <MX_GPIO_Init+0x130>)
 8000996:	f000 fe5f 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4820      	ldr	r0, [pc, #128]	@ (8000a34 <MX_GPIO_Init+0x134>)
 80009b2:	f000 fcb5 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 80009b6:	23a0      	movs	r3, #160	@ 0xa0
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <MX_GPIO_Init+0x12c>)
 80009ce:	f000 fca7 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pin : Entrada_bot_n_modo_Pin */
  GPIO_InitStruct.Pin = Entrada_bot_n_modo_Pin;
 80009d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Entrada_bot_n_modo_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4811      	ldr	r0, [pc, #68]	@ (8000a2c <MX_GPIO_Init+0x12c>)
 80009e8:	f000 fc9a 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_ultrasonido_Pin */
  GPIO_InitStruct.Pin = Echo_ultrasonido_Pin;
 80009ec:	2308      	movs	r3, #8
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_ultrasonido_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <MX_GPIO_Init+0x130>)
 8000a00:	f000 fc8e 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_ultrasonido_Pin */
  GPIO_InitStruct.Pin = Trigger_ultrasonido_Pin;
 8000a04:	2310      	movs	r3, #16
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_ultrasonido_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_GPIO_Init+0x130>)
 8000a1c:	f000 fc80 	bl	8001320 <HAL_GPIO_Init>

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	@ 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400
 8000a34:	40020800 	.word	0x40020800

08000a38 <TiempoaFrecuencia>:
uint8_t uartRxBuffer[20];  // Buffer to hold incoming UART data
uint16_t FrecuenciaBuzzer = 2000;  // Frecue(Hz)
uint8_t EntradaBuzzer = 1;         // Controla la entrada del buzzer

//Funcion de generacion de frecuencias para el buzzer
uint32_t TiempoaFrecuencia(uint32_t us) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
    // Limitar el tiempo a los valores mínimos y máximos
    if (us < TIME_MIN_US) us = TIME_MIN_US;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b41      	cmp	r3, #65	@ 0x41
 8000a44:	d801      	bhi.n	8000a4a <TiempoaFrecuencia+0x12>
 8000a46:	2342      	movs	r3, #66	@ 0x42
 8000a48:	607b      	str	r3, [r7, #4]
    if (us > TIME_MAX_US) us = TIME_MAX_US;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8000a4e:	d901      	bls.n	8000a54 <TiempoaFrecuencia+0x1c>
 8000a50:	23c8      	movs	r3, #200	@ 0xc8
 8000a52:	607b      	str	r3, [r7, #4]

    // Aplicar la fórmula de interpolación lineal
    uint32_t frecuencia = FREQ_MIN_HZ + (us - TIME_MIN_US) * (FREQ_MAX_HZ - FREQ_MIN_HZ) / (TIME_MAX_US - TIME_MIN_US);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000a5a:	fb02 f303 	mul.w	r3, r2, r3
 8000a5e:	f5a3 3341 	sub.w	r3, r3, #197632	@ 0x30400
 8000a62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8000a66:	4a07      	ldr	r2, [pc, #28]	@ (8000a84 <TiempoaFrecuencia+0x4c>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000a72:	60fb      	str	r3, [r7, #12]

    return frecuencia;
 8000a74:	68fb      	ldr	r3, [r7, #12]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	07a44c6b 	.word	0x07a44c6b

08000a88 <delay_us>:


void delay_us(uint16_t us)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim1);
 8000a92:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <delay_us+0x38>)
 8000a94:	f001 fafc 	bl	8002090 <HAL_TIM_Base_Start_IT>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <delay_us+0x38>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    while(timcounter<us);
 8000aa0:	bf00      	nop
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <delay_us+0x3c>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8fa      	bhi.n	8000aa2 <delay_us+0x1a>

    HAL_TIM_Base_Stop_IT(&htim1);
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <delay_us+0x38>)
 8000aae:	f001 fb51 	bl	8002154 <HAL_TIM_Base_Stop_IT>
    timcounter = 0;
 8000ab2:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <delay_us+0x3c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	801a      	strh	r2, [r3, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000080 	.word	0x20000080
 8000ac4:	20000178 	.word	0x20000178

08000ac8 <HAL_TIM_PeriodElapsedCallback>:

/*Callback TIM*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d106      	bne.n	8000ae8 <HAL_TIM_PeriodElapsedCallback+0x20>
	timcounter++;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ae4:	801a      	strh	r2, [r3, #0]
	}

	else {
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
	}
}
 8000ae6:	e003      	b.n	8000af0 <HAL_TIM_PeriodElapsedCallback+0x28>
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 8000ae8:	2180      	movs	r1, #128	@ 0x80
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000aec:	f000 fdcd 	bl	800168a <HAL_GPIO_TogglePin>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40010000 	.word	0x40010000
 8000afc:	20000178 	.word	0x20000178
 8000b00:	40020000 	.word	0x40020000

08000b04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, sizeof(uartRxBuffer));
 8000b0c:	2214      	movs	r2, #20
 8000b0e:	4904      	ldr	r1, [pc, #16]	@ (8000b20 <StartDefaultTask+0x1c>)
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <StartDefaultTask+0x20>)
 8000b12:	f001 ff73 	bl	80029fc <HAL_UART_Receive_IT>
    osDelay(1);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f002 fb62 	bl	80031e0 <osDelay>
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, sizeof(uartRxBuffer));
 8000b1c:	bf00      	nop
 8000b1e:	e7f5      	b.n	8000b0c <StartDefaultTask+0x8>
 8000b20:	2000017c 	.word	0x2000017c
 8000b24:	20000110 	.word	0x20000110

08000b28 <LecturaPines>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LecturaPines */
void LecturaPines(void *argument)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LecturaPines */
	uint8_t pulso;
  /* Infinite loop */
  for(;;)
  {
	PinEstado = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 8000b30:	2108      	movs	r1, #8
 8000b32:	481a      	ldr	r0, [pc, #104]	@ (8000b9c <LecturaPines+0x74>)
 8000b34:	f000 fd78 	bl	8001628 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <LecturaPines+0x78>)
 8000b3e:	701a      	strb	r2, [r3, #0]
	  if(PinEstado == 1){
 8000b40:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <LecturaPines+0x78>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d107      	bne.n	8000b58 <LecturaPines+0x30>
		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <LecturaPines+0x7c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_TIM_Base_Start_IT(&htim1);
 8000b50:	4814      	ldr	r0, [pc, #80]	@ (8000ba4 <LecturaPines+0x7c>)
 8000b52:	f001 fa9d 	bl	8002090 <HAL_TIM_Base_Start_IT>
 8000b56:	e00b      	b.n	8000b70 <LecturaPines+0x48>
	  }else{
	  	  HAL_TIM_Base_Stop_IT(&htim1);
 8000b58:	4812      	ldr	r0, [pc, #72]	@ (8000ba4 <LecturaPines+0x7c>)
 8000b5a:	f001 fafb 	bl	8002154 <HAL_TIM_Base_Stop_IT>
	  	  pulso = timcounter;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <LecturaPines+0x80>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	73fb      	strb	r3, [r7, #15]
	  	  osEventFlagsSet(PinPollingHandle,0x0002U);
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <LecturaPines+0x84>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fb92 	bl	8003294 <osEventFlagsSet>
	  }
	  if(pulso != 0){
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00e      	beq.n	8000b94 <LecturaPines+0x6c>
		  uint16_t frecuencia = TiempoaFrecuencia(pulso);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <TiempoaFrecuencia>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	81bb      	strh	r3, [r7, #12]
		  osMessageQueuePut(FrecuenciaHandle,&frecuencia,NULL,NULL);
 8000b84:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <LecturaPines+0x88>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	f107 010c 	add.w	r1, r7, #12
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f002 fd20 	bl	80035d4 <osMessageQueuePut>
	  }
	  osDelay(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f002 fb23 	bl	80031e0 <osDelay>
	PinEstado = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 8000b9a:	e7c9      	b.n	8000b30 <LecturaPines+0x8>
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	20000190 	.word	0x20000190
 8000ba4:	20000080 	.word	0x20000080
 8000ba8:	20000178 	.word	0x20000178
 8000bac:	20000174 	.word	0x20000174
 8000bb0:	2000016c 	.word	0x2000016c

08000bb4 <Ultrasound>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ultrasound */
void Ultrasound(void *argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ultrasound */
	/* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(PinPollingHandle,0x0002U,NULL,osWaitForever);
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <Ultrasound+0x44>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	f002 fba6 	bl	8003318 <osEventFlagsWait>
	  /*Reconfigura el pin como output */
	  timcounter = 0;
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <Ultrasound+0x48>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	480a      	ldr	r0, [pc, #40]	@ (8000c00 <Ultrasound+0x4c>)
 8000bd8:	f000 fd3e 	bl	8001658 <HAL_GPIO_WritePin>
	  /* funcion de delay de 5us*/
	  delay_us(10);
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f7ff ff53 	bl	8000a88 <delay_us>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2110      	movs	r1, #16
 8000be6:	4806      	ldr	r0, [pc, #24]	@ (8000c00 <Ultrasound+0x4c>)
 8000be8:	f000 fd36 	bl	8001658 <HAL_GPIO_WritePin>

    osDelay(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f002 faf7 	bl	80031e0 <osDelay>
	  osEventFlagsWait(PinPollingHandle,0x0002U,NULL,osWaitForever);
 8000bf2:	bf00      	nop
 8000bf4:	e7e2      	b.n	8000bbc <Ultrasound+0x8>
 8000bf6:	bf00      	nop
 8000bf8:	20000174 	.word	0x20000174
 8000bfc:	20000178 	.word	0x20000178
 8000c00:	40020400 	.word	0x40020400

08000c04 <BuzzerA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BuzzerA */
void BuzzerA(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BuzzerA */
	uint16_t frecuencia;
  /* Infinite loop */
  for(;;)
  {
	  if(EntradaBuzzer == 1){
 8000c0c:	4b21      	ldr	r3, [pc, #132]	@ (8000c94 <BuzzerA+0x90>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d109      	bne.n	8000c28 <BuzzerA+0x24>
	  		  osMessageQueueGet(FrecuenciaHandle,&frecuencia,NULL,osWaitForever);
 8000c14:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <BuzzerA+0x94>)
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	f107 010e 	add.w	r1, r7, #14
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	2200      	movs	r2, #0
 8000c22:	f002 fd37 	bl	8003694 <osMessageQueueGet>
 8000c26:	e006      	b.n	8000c36 <BuzzerA+0x32>
	  	  }else if (EntradaBuzzer == 2){
 8000c28:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <BuzzerA+0x90>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d102      	bne.n	8000c36 <BuzzerA+0x32>
	  		  frecuencia = FrecuenciaBuzzer;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <BuzzerA+0x98>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	81fb      	strh	r3, [r7, #14]
	  	  }
	  HAL_TIM_Base_Stop_IT(&htim3);
 8000c36:	481a      	ldr	r0, [pc, #104]	@ (8000ca0 <BuzzerA+0x9c>)
 8000c38:	f001 fa8c 	bl	8002154 <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <BuzzerA+0x9c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	@ 0x24

	  uint32_t timerPeripherals = HAL_RCC_GetPCLK1Freq(); // Frecuencia del reloj del temporizador
 8000c44:	f001 f9ac 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8000c48:	61f8      	str	r0, [r7, #28]
	  uint32_t timerClock = timerPeripherals*2;
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
	      uint32_t prescaler = (timerClock / (frecuencia * 1000)) - 1; // Ajustar prescaler
 8000c50:	89fb      	ldrh	r3, [r7, #14]
 8000c52:	461a      	mov	r2, r3
 8000c54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c64:	3b01      	subs	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
	      uint32_t arr = 1000; // Mantén ARR fijo en este caso para un duty cycle del 0-100%
 8000c68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6c:	613b      	str	r3, [r7, #16]

	      __HAL_TIM_SET_PRESCALER(&htim3, prescaler); // Cambia el prescaler
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <BuzzerA+0x9c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	629a      	str	r2, [r3, #40]	@ 0x28
	      __HAL_TIM_SET_AUTORELOAD(&htim3, arr);     // Cambia el ARR
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <BuzzerA+0x9c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ca0 <BuzzerA+0x9c>)
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	60d3      	str	r3, [r2, #12]

	      HAL_TIM_Base_Start_IT(&htim3);        // Reinicia el Timer3
 8000c84:	4806      	ldr	r0, [pc, #24]	@ (8000ca0 <BuzzerA+0x9c>)
 8000c86:	f001 fa03 	bl	8002090 <HAL_TIM_Base_Start_IT>

    osDelay(1);
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f002 faa8 	bl	80031e0 <osDelay>
  {
 8000c90:	e7bc      	b.n	8000c0c <BuzzerA+0x8>
 8000c92:	bf00      	nop
 8000c94:	20000002 	.word	0x20000002
 8000c98:	2000016c 	.word	0x2000016c
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	200000c8 	.word	0x200000c8

08000ca4 <BotonModo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BotonModo */
void BotonModo(void *argument)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BotonModo */
	uint8_t estadoAnterior = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]
	uint8_t estadoActual;
    const uint16_t debounceDelay = 50;
 8000cb0:	2332      	movs	r3, #50	@ 0x32
 8000cb2:	81bb      	strh	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {

          estadoActual = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000cb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cb8:	4817      	ldr	r0, [pc, #92]	@ (8000d18 <BotonModo+0x74>)
 8000cba:	f000 fcb5 	bl	8001628 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	72fb      	strb	r3, [r7, #11]

          if (estadoActual == 1 && estadoAnterior == 0)
 8000cc2:	7afb      	ldrb	r3, [r7, #11]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d11f      	bne.n	8000d08 <BotonModo+0x64>
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d11c      	bne.n	8000d08 <BotonModo+0x64>
          {
                  modo = !modo; // Alternar entre 0 y 1
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <BotonModo+0x78>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf0c      	ite	eq
 8000cd8:	2301      	moveq	r3, #1
 8000cda:	2300      	movne	r3, #0
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <BotonModo+0x78>)
 8000ce2:	701a      	strb	r2, [r3, #0]

                  snprintf(txBuffer, sizeof(txBuffer), "Modo cambiado a: %d\r\n", modo);
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <BotonModo+0x78>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <BotonModo+0x7c>)
 8000cec:	2132      	movs	r1, #50	@ 0x32
 8000cee:	480d      	ldr	r0, [pc, #52]	@ (8000d24 <BotonModo+0x80>)
 8000cf0:	f005 fd92 	bl	8006818 <sniprintf>

                  HAL_UART_Transmit_IT(&huart2, (uint8_t *)txBuffer, strlen(txBuffer));
 8000cf4:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <BotonModo+0x80>)
 8000cf6:	f7ff fa73 	bl	80001e0 <strlen>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4908      	ldr	r1, [pc, #32]	@ (8000d24 <BotonModo+0x80>)
 8000d02:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <BotonModo+0x84>)
 8000d04:	f001 fe35 	bl	8002972 <HAL_UART_Transmit_IT>

          }

          estadoAnterior = estadoActual;
 8000d08:	7afb      	ldrb	r3, [r7, #11]
 8000d0a:	73fb      	strb	r3, [r7, #15]
    osDelay(debounceDelay);
 8000d0c:	89bb      	ldrh	r3, [r7, #12]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 fa66 	bl	80031e0 <osDelay>
          estadoActual = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000d14:	e7ce      	b.n	8000cb4 <BotonModo+0x10>
 8000d16:	bf00      	nop
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	20000191 	.word	0x20000191
 8000d20:	08007288 	.word	0x08007288
 8000d24:	20000194 	.word	0x20000194
 8000d28:	20000110 	.word	0x20000110

08000d2c <LeerMicro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LeerMicro */
void LeerMicro(void *argument)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LeerMicro */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f002 fa53 	bl	80031e0 <osDelay>
 8000d3a:	e7fb      	b.n	8000d34 <LeerMicro+0x8>

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <Error_Handler+0x8>

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_MspInit+0x54>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	4a11      	ldr	r2, [pc, #68]	@ (8000d9c <HAL_MspInit+0x54>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_MspInit+0x54>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <HAL_MspInit+0x54>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_MspInit+0x54>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_MspInit+0x54>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	210f      	movs	r1, #15
 8000d8a:	f06f 0001 	mvn.w	r0, #1
 8000d8e:	f000 fa90 	bl	80012b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <HAL_TIM_Base_MspInit+0x80>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d116      	bne.n	8000de0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	4a1a      	ldr	r2, [pc, #104]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	2019      	movs	r0, #25
 8000dd4:	f000 fa6d 	bl	80012b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dd8:	2019      	movs	r0, #25
 8000dda:	f000 fa86 	bl	80012ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dde:	e01a      	b.n	8000e16 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <HAL_TIM_Base_MspInit+0x88>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d115      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2105      	movs	r1, #5
 8000e0a:	201d      	movs	r0, #29
 8000e0c:	f000 fa51 	bl	80012b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e10:	201d      	movs	r0, #29
 8000e12:	f000 fa6a 	bl	80012ea <HAL_NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40010000 	.word	0x40010000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40000400 	.word	0x40000400

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	@ 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a19      	ldr	r2, [pc, #100]	@ (8000eb0 <HAL_UART_MspInit+0x84>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12b      	bne.n	8000ea6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	4a17      	ldr	r2, [pc, #92]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e86:	230c      	movs	r3, #12
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e96:	2307      	movs	r3, #7
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <HAL_UART_MspInit+0x8c>)
 8000ea2:	f000 fa3d 	bl	8001320 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	@ 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40004400 	.word	0x40004400
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef6:	f000 f8e1 	bl	80010bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000efa:	f004 fbd7 	bl	80056ac <xTaskGetSchedulerState>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d001      	beq.n	8000f08 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f04:	f005 fa08 	bl	8006318 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f12:	f001 f94e 	bl	80021b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000080 	.word	0x20000080

08000f20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <TIM3_IRQHandler+0x10>)
 8000f26:	f001 f944 	bl	80021b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000c8 	.word	0x200000c8

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f005 fc94 	bl	8006890 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20020000 	.word	0x20020000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	200001c8 	.word	0x200001c8
 8000f9c:	20004c68 	.word	0x20004c68

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fca:	490e      	ldr	r1, [pc, #56]	@ (8001004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe0:	4c0b      	ldr	r4, [pc, #44]	@ (8001010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fee:	f7ff ffd7 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f005 fc53 	bl	800689c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fac3 	bl	8000580 <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001008:	08007424 	.word	0x08007424
  ldr r2, =_sbss
 800100c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001010:	20004c68 	.word	0x20004c68

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f92b 	bl	800129c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fe7c 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f943 	bl	8001306 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f90b 	bl	80012b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000004 	.word	0x20000004
 80010b4:	2000000c 	.word	0x2000000c
 80010b8:	20000008 	.word	0x20000008

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2000000c 	.word	0x2000000c
 80010e0:	200001cc 	.word	0x200001cc

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200001cc 	.word	0x200001cc

080010fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4907      	ldr	r1, [pc, #28]	@ (8001198 <__NVIC_EnableIRQ+0x38>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	@ (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	@ (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	@ 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	4313      	orrs	r3, r2
         );
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	@ 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001268:	d301      	bcc.n	800126e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126a:	2301      	movs	r3, #1
 800126c:	e00f      	b.n	800128e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <SysTick_Config+0x40>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001276:	210f      	movs	r1, #15
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f7ff ff8e 	bl	800119c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <SysTick_Config+0x40>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001286:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <SysTick_Config+0x40>)
 8001288:	2207      	movs	r2, #7
 800128a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	e000e010 	.word	0xe000e010

0800129c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff29 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c4:	f7ff ff3e 	bl	8001144 <__NVIC_GetPriorityGrouping>
 80012c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff ff8e 	bl	80011f0 <NVIC_EncodePriority>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff5d 	bl	800119c <__NVIC_SetPriority>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff31 	bl	8001160 <__NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffa2 	bl	8001258 <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	e159      	b.n	80015f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800133c:	2201      	movs	r2, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	429a      	cmp	r2, r3
 8001356:	f040 8148 	bne.w	80015ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d005      	beq.n	8001372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136e:	2b02      	cmp	r3, #2
 8001370:	d130      	bne.n	80013d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f003 0201 	and.w	r2, r3, #1
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d017      	beq.n	8001410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d123      	bne.n	8001464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	08da      	lsrs	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	220f      	movs	r2, #15
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	08da      	lsrs	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3208      	adds	r2, #8
 800145e:	69b9      	ldr	r1, [r7, #24]
 8001460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0203 	and.w	r2, r3, #3
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a2 	beq.w	80015ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b57      	ldr	r3, [pc, #348]	@ (8001608 <HAL_GPIO_Init+0x2e8>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	4a56      	ldr	r2, [pc, #344]	@ (8001608 <HAL_GPIO_Init+0x2e8>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b6:	4b54      	ldr	r3, [pc, #336]	@ (8001608 <HAL_GPIO_Init+0x2e8>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c2:	4a52      	ldr	r2, [pc, #328]	@ (800160c <HAL_GPIO_Init+0x2ec>)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	3302      	adds	r3, #2
 80014ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a49      	ldr	r2, [pc, #292]	@ (8001610 <HAL_GPIO_Init+0x2f0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x202>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a48      	ldr	r2, [pc, #288]	@ (8001614 <HAL_GPIO_Init+0x2f4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x1fe>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a47      	ldr	r2, [pc, #284]	@ (8001618 <HAL_GPIO_Init+0x2f8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x1fa>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a46      	ldr	r2, [pc, #280]	@ (800161c <HAL_GPIO_Init+0x2fc>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x1f6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a45      	ldr	r2, [pc, #276]	@ (8001620 <HAL_GPIO_Init+0x300>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x1f2>
 800150e:	2304      	movs	r3, #4
 8001510:	e008      	b.n	8001524 <HAL_GPIO_Init+0x204>
 8001512:	2307      	movs	r3, #7
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x204>
 8001516:	2303      	movs	r3, #3
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x204>
 800151a:	2302      	movs	r3, #2
 800151c:	e002      	b.n	8001524 <HAL_GPIO_Init+0x204>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x204>
 8001522:	2300      	movs	r3, #0
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	f002 0203 	and.w	r2, r2, #3
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	4093      	lsls	r3, r2
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001534:	4935      	ldr	r1, [pc, #212]	@ (800160c <HAL_GPIO_Init+0x2ec>)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001542:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <HAL_GPIO_Init+0x304>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001566:	4a2f      	ldr	r2, [pc, #188]	@ (8001624 <HAL_GPIO_Init+0x304>)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800156c:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <HAL_GPIO_Init+0x304>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001590:	4a24      	ldr	r2, [pc, #144]	@ (8001624 <HAL_GPIO_Init+0x304>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001596:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <HAL_GPIO_Init+0x304>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001624 <HAL_GPIO_Init+0x304>)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <HAL_GPIO_Init+0x304>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001624 <HAL_GPIO_Init+0x304>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3301      	adds	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	2b0f      	cmp	r3, #15
 80015f4:	f67f aea2 	bls.w	800133c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3724      	adds	r7, #36	@ 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40013800 	.word	0x40013800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400
 8001618:	40020800 	.word	0x40020800
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40021000 	.word	0x40021000
 8001624:	40013c00 	.word	0x40013c00

08001628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e001      	b.n	800164a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800169c:	887a      	ldrh	r2, [r7, #2]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	041a      	lsls	r2, r3, #16
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	400b      	ands	r3, r1
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	619a      	str	r2, [r3, #24]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e267      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d075      	beq.n	80017ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016de:	4b88      	ldr	r3, [pc, #544]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d00c      	beq.n	8001704 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ea:	4b85      	ldr	r3, [pc, #532]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d112      	bne.n	800171c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f6:	4b82      	ldr	r3, [pc, #520]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001702:	d10b      	bne.n	800171c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	4b7e      	ldr	r3, [pc, #504]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d05b      	beq.n	80017c8 <HAL_RCC_OscConfig+0x108>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d157      	bne.n	80017c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e242      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001724:	d106      	bne.n	8001734 <HAL_RCC_OscConfig+0x74>
 8001726:	4b76      	ldr	r3, [pc, #472]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a75      	ldr	r2, [pc, #468]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e01d      	b.n	8001770 <HAL_RCC_OscConfig+0xb0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x98>
 800173e:	4b70      	ldr	r3, [pc, #448]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6f      	ldr	r2, [pc, #444]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b6d      	ldr	r3, [pc, #436]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6c      	ldr	r2, [pc, #432]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0xb0>
 8001758:	4b69      	ldr	r3, [pc, #420]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a68      	ldr	r2, [pc, #416]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800175e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b66      	ldr	r3, [pc, #408]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a65      	ldr	r2, [pc, #404]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800176a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fcb4 	bl	80010e4 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fcb0 	bl	80010e4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	@ 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e207      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b5b      	ldr	r3, [pc, #364]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0xc0>
 800179e:	e014      	b.n	80017ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fca0 	bl	80010e4 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fc9c 	bl	80010e4 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	@ 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1f3      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	4b51      	ldr	r3, [pc, #324]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0xe8>
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d063      	beq.n	800189e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d11c      	bne.n	8001828 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ee:	4b44      	ldr	r3, [pc, #272]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d116      	bne.n	8001828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	4b41      	ldr	r3, [pc, #260]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x152>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e1c7      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4937      	ldr	r1, [pc, #220]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	e03a      	b.n	800189e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001830:	4b34      	ldr	r3, [pc, #208]	@ (8001904 <HAL_RCC_OscConfig+0x244>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fc55 	bl	80010e4 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fc51 	bl	80010e4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1a8      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4925      	ldr	r1, [pc, #148]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <HAL_RCC_OscConfig+0x244>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fc34 	bl	80010e4 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001880:	f7ff fc30 	bl	80010e4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e187      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d036      	beq.n	8001918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d016      	beq.n	80018e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <HAL_RCC_OscConfig+0x248>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fc14 	bl	80010e4 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c0:	f7ff fc10 	bl	80010e4 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e167      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <HAL_RCC_OscConfig+0x240>)
 80018d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x200>
 80018de:	e01b      	b.n	8001918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_RCC_OscConfig+0x248>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fbfd 	bl	80010e4 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	e00e      	b.n	800190c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ee:	f7ff fbf9 	bl	80010e4 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d907      	bls.n	800190c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e150      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
 8001900:	40023800 	.word	0x40023800
 8001904:	42470000 	.word	0x42470000
 8001908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	4b88      	ldr	r3, [pc, #544]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 800190e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ea      	bne.n	80018ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 8097 	beq.w	8001a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b81      	ldr	r3, [pc, #516]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10f      	bne.n	8001956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	@ 0x40
 8001946:	4b7a      	ldr	r3, [pc, #488]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b77      	ldr	r3, [pc, #476]	@ (8001b34 <HAL_RCC_OscConfig+0x474>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d118      	bne.n	8001994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001962:	4b74      	ldr	r3, [pc, #464]	@ (8001b34 <HAL_RCC_OscConfig+0x474>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a73      	ldr	r2, [pc, #460]	@ (8001b34 <HAL_RCC_OscConfig+0x474>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196e:	f7ff fbb9 	bl	80010e4 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001976:	f7ff fbb5 	bl	80010e4 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e10c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <HAL_RCC_OscConfig+0x474>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x2ea>
 800199c:	4b64      	ldr	r3, [pc, #400]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a0:	4a63      	ldr	r2, [pc, #396]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a8:	e01c      	b.n	80019e4 <HAL_RCC_OscConfig+0x324>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x30c>
 80019b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80019be:	4b5c      	ldr	r3, [pc, #368]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0x324>
 80019cc:	4b58      	ldr	r3, [pc, #352]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d0:	4a57      	ldr	r2, [pc, #348]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d8:	4b55      	ldr	r3, [pc, #340]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019dc:	4a54      	ldr	r2, [pc, #336]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 80019de:	f023 0304 	bic.w	r3, r3, #4
 80019e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d015      	beq.n	8001a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ec:	f7ff fb7a 	bl	80010e4 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f7ff fb76 	bl	80010e4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e0cb      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0a:	4b49      	ldr	r3, [pc, #292]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0ee      	beq.n	80019f4 <HAL_RCC_OscConfig+0x334>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff fb64 	bl	80010e4 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff fb60 	bl	80010e4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0b5      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a36:	4b3e      	ldr	r3, [pc, #248]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ee      	bne.n	8001a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a48:	4b39      	ldr	r3, [pc, #228]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	4a38      	ldr	r2, [pc, #224]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80a1 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a5e:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d05c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d141      	bne.n	8001af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	4b31      	ldr	r3, [pc, #196]	@ (8001b38 <HAL_RCC_OscConfig+0x478>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fb34 	bl	80010e4 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff fb30 	bl	80010e4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e087      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a92:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	019b      	lsls	r3, r3, #6
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	041b      	lsls	r3, r3, #16
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	491b      	ldr	r1, [pc, #108]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_RCC_OscConfig+0x478>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff fb09 	bl	80010e4 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff fb05 	bl	80010e4 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e05c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x416>
 8001af4:	e054      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_RCC_OscConfig+0x478>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff faf2 	bl	80010e4 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff faee 	bl	80010e4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e045      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_RCC_OscConfig+0x470>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x444>
 8001b22:	e03d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e038      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40007000 	.word	0x40007000
 8001b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_RCC_OscConfig+0x4ec>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d028      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d121      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d11a      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d111      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	3b01      	subs	r3, #1
 8001b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0cc      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b68      	ldr	r3, [pc, #416]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d90c      	bls.n	8001bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b65      	ldr	r3, [pc, #404]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b63      	ldr	r3, [pc, #396]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0b8      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c04:	4b59      	ldr	r3, [pc, #356]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a58      	ldr	r2, [pc, #352]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c1c:	4b53      	ldr	r3, [pc, #332]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a52      	ldr	r2, [pc, #328]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b50      	ldr	r3, [pc, #320]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	494d      	ldr	r1, [pc, #308]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d044      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b47      	ldr	r3, [pc, #284]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d119      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e07f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e06f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e067      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	4b37      	ldr	r3, [pc, #220]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4934      	ldr	r1, [pc, #208]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff fa20 	bl	80010e4 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7ff fa1c 	bl	80010e4 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e04f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1eb      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d20c      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e032      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4916      	ldr	r1, [pc, #88]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	490e      	ldr	r1, [pc, #56]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d36:	f000 f821 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	490a      	ldr	r1, [pc, #40]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	5ccb      	ldrb	r3, [r1, r3]
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a09      	ldr	r2, [pc, #36]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d52:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f980 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	080073c8 	.word	0x080073c8
 8001d74:	20000004 	.word	0x20000004
 8001d78:	20000008 	.word	0x20000008

08001d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d80:	b094      	sub	sp, #80	@ 0x50
 8001d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d88:	2300      	movs	r3, #0
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d94:	4b79      	ldr	r3, [pc, #484]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d00d      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x40>
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	f200 80e1 	bhi.w	8001f68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x34>
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d003      	beq.n	8001db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dae:	e0db      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b73      	ldr	r3, [pc, #460]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001db2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001db4:	e0db      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001db6:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x208>)
 8001db8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dba:	e0d8      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001dc4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d063      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	2200      	movs	r2, #0
 8001dda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ddc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dee:	4622      	mov	r2, r4
 8001df0:	462b      	mov	r3, r5
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	0159      	lsls	r1, r3, #5
 8001dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e00:	0150      	lsls	r0, r2, #5
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4621      	mov	r1, r4
 8001e08:	1a51      	subs	r1, r2, r1
 8001e0a:	6139      	str	r1, [r7, #16]
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e20:	4659      	mov	r1, fp
 8001e22:	018b      	lsls	r3, r1, #6
 8001e24:	4651      	mov	r1, sl
 8001e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e2a:	4651      	mov	r1, sl
 8001e2c:	018a      	lsls	r2, r1, #6
 8001e2e:	4651      	mov	r1, sl
 8001e30:	ebb2 0801 	subs.w	r8, r2, r1
 8001e34:	4659      	mov	r1, fp
 8001e36:	eb63 0901 	sbc.w	r9, r3, r1
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e4e:	4690      	mov	r8, r2
 8001e50:	4699      	mov	r9, r3
 8001e52:	4623      	mov	r3, r4
 8001e54:	eb18 0303 	adds.w	r3, r8, r3
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	462b      	mov	r3, r5
 8001e5c:	eb49 0303 	adc.w	r3, r9, r3
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e6e:	4629      	mov	r1, r5
 8001e70:	024b      	lsls	r3, r1, #9
 8001e72:	4621      	mov	r1, r4
 8001e74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e78:	4621      	mov	r1, r4
 8001e7a:	024a      	lsls	r2, r1, #9
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e82:	2200      	movs	r2, #0
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e8c:	f7fe fa00 	bl	8000290 <__aeabi_uldivmod>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4613      	mov	r3, r2
 8001e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e98:	e058      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9a:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	099b      	lsrs	r3, r3, #6
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001eb4:	4642      	mov	r2, r8
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	f04f 0000 	mov.w	r0, #0
 8001ebc:	f04f 0100 	mov.w	r1, #0
 8001ec0:	0159      	lsls	r1, r3, #5
 8001ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec6:	0150      	lsls	r0, r2, #5
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4641      	mov	r1, r8
 8001ece:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ee4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ee8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eec:	ebb2 040a 	subs.w	r4, r2, sl
 8001ef0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	00eb      	lsls	r3, r5, #3
 8001efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f02:	00e2      	lsls	r2, r4, #3
 8001f04:	4614      	mov	r4, r2
 8001f06:	461d      	mov	r5, r3
 8001f08:	4643      	mov	r3, r8
 8001f0a:	18e3      	adds	r3, r4, r3
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	464b      	mov	r3, r9
 8001f10:	eb45 0303 	adc.w	r3, r5, r3
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f22:	4629      	mov	r1, r5
 8001f24:	028b      	lsls	r3, r1, #10
 8001f26:	4621      	mov	r1, r4
 8001f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	028a      	lsls	r2, r1, #10
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f36:	2200      	movs	r2, #0
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	61fa      	str	r2, [r7, #28]
 8001f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f40:	f7fe f9a6 	bl	8000290 <__aeabi_uldivmod>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4613      	mov	r3, r2
 8001f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	3301      	adds	r3, #1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001f5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3750      	adds	r7, #80	@ 0x50
 8001f74:	46bd      	mov	sp, r7
 8001f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	00f42400 	.word	0x00f42400
 8001f84:	007a1200 	.word	0x007a1200

08001f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0a9b      	lsrs	r3, r3, #10
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	@ (8001fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	080073d8 	.word	0x080073d8

08001fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fcc:	f7ff ffdc 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0b5b      	lsrs	r3, r3, #13
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	@ (8001fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	080073d8 	.word	0x080073d8

08001ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e041      	b.n	8002086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fec2 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f000 fab6 	bl	80025a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d001      	beq.n	80020a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e044      	b.n	8002132 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002140 <HAL_TIM_Base_Start_IT+0xb0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d018      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x6c>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d2:	d013      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x6c>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002144 <HAL_TIM_Base_Start_IT+0xb4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x6c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a19      	ldr	r2, [pc, #100]	@ (8002148 <HAL_TIM_Base_Start_IT+0xb8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x6c>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a17      	ldr	r2, [pc, #92]	@ (800214c <HAL_TIM_Base_Start_IT+0xbc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x6c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a16      	ldr	r2, [pc, #88]	@ (8002150 <HAL_TIM_Base_Start_IT+0xc0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d111      	bne.n	8002120 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b06      	cmp	r3, #6
 800210c:	d010      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211e:	e007      	b.n	8002130 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40010000 	.word	0x40010000
 8002144:	40000400 	.word	0x40000400
 8002148:	40000800 	.word	0x40000800
 800214c:	40000c00 	.word	0x40000c00
 8002150:	40014000 	.word	0x40014000

08002154 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a1a      	ldr	r2, [r3, #32]
 8002172:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10f      	bne.n	800219c <HAL_TIM_Base_Stop_IT+0x48>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	f240 4344 	movw	r3, #1092	@ 0x444
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_TIM_Base_Stop_IT+0x48>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d122      	bne.n	800220e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d11b      	bne.n	800220e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f06f 0202 	mvn.w	r2, #2
 80021de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f9b5 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 80021fa:	e005      	b.n	8002208 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f9a7 	bl	8002550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f9b8 	bl	8002578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b04      	cmp	r3, #4
 800221a:	d122      	bne.n	8002262 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b04      	cmp	r3, #4
 8002228:	d11b      	bne.n	8002262 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f06f 0204 	mvn.w	r2, #4
 8002232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f98b 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 800224e:	e005      	b.n	800225c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f97d 	bl	8002550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f98e 	bl	8002578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b08      	cmp	r3, #8
 800226e:	d122      	bne.n	80022b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11b      	bne.n	80022b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f06f 0208 	mvn.w	r2, #8
 8002286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2204      	movs	r2, #4
 800228c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f961 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 80022a2:	e005      	b.n	80022b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f953 	bl	8002550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f964 	bl	8002578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d122      	bne.n	800230a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d11b      	bne.n	800230a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f06f 0210 	mvn.w	r2, #16
 80022da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2208      	movs	r2, #8
 80022e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f937 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 80022f6:	e005      	b.n	8002304 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f929 	bl	8002550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f93a 	bl	8002578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d10e      	bne.n	8002336 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f06f 0201 	mvn.w	r2, #1
 800232e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7fe fbc9 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002340:	2b80      	cmp	r3, #128	@ 0x80
 8002342:	d10e      	bne.n	8002362 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800234e:	2b80      	cmp	r3, #128	@ 0x80
 8002350:	d107      	bne.n	8002362 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800235a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fab1 	bl	80028c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236c:	2b40      	cmp	r3, #64	@ 0x40
 800236e:	d10e      	bne.n	800238e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800237a:	2b40      	cmp	r3, #64	@ 0x40
 800237c:	d107      	bne.n	800238e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f8ff 	bl	800258c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b20      	cmp	r3, #32
 800239a:	d10e      	bne.n	80023ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d107      	bne.n	80023ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f06f 0220 	mvn.w	r2, #32
 80023b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fa7b 	bl	80028b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_TIM_ConfigClockSource+0x1c>
 80023da:	2302      	movs	r3, #2
 80023dc:	e0b4      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x186>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002404:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002416:	d03e      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0xd4>
 8002418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800241c:	f200 8087 	bhi.w	800252e <HAL_TIM_ConfigClockSource+0x16c>
 8002420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002424:	f000 8086 	beq.w	8002534 <HAL_TIM_ConfigClockSource+0x172>
 8002428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800242c:	d87f      	bhi.n	800252e <HAL_TIM_ConfigClockSource+0x16c>
 800242e:	2b70      	cmp	r3, #112	@ 0x70
 8002430:	d01a      	beq.n	8002468 <HAL_TIM_ConfigClockSource+0xa6>
 8002432:	2b70      	cmp	r3, #112	@ 0x70
 8002434:	d87b      	bhi.n	800252e <HAL_TIM_ConfigClockSource+0x16c>
 8002436:	2b60      	cmp	r3, #96	@ 0x60
 8002438:	d050      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0x11a>
 800243a:	2b60      	cmp	r3, #96	@ 0x60
 800243c:	d877      	bhi.n	800252e <HAL_TIM_ConfigClockSource+0x16c>
 800243e:	2b50      	cmp	r3, #80	@ 0x50
 8002440:	d03c      	beq.n	80024bc <HAL_TIM_ConfigClockSource+0xfa>
 8002442:	2b50      	cmp	r3, #80	@ 0x50
 8002444:	d873      	bhi.n	800252e <HAL_TIM_ConfigClockSource+0x16c>
 8002446:	2b40      	cmp	r3, #64	@ 0x40
 8002448:	d058      	beq.n	80024fc <HAL_TIM_ConfigClockSource+0x13a>
 800244a:	2b40      	cmp	r3, #64	@ 0x40
 800244c:	d86f      	bhi.n	800252e <HAL_TIM_ConfigClockSource+0x16c>
 800244e:	2b30      	cmp	r3, #48	@ 0x30
 8002450:	d064      	beq.n	800251c <HAL_TIM_ConfigClockSource+0x15a>
 8002452:	2b30      	cmp	r3, #48	@ 0x30
 8002454:	d86b      	bhi.n	800252e <HAL_TIM_ConfigClockSource+0x16c>
 8002456:	2b20      	cmp	r3, #32
 8002458:	d060      	beq.n	800251c <HAL_TIM_ConfigClockSource+0x15a>
 800245a:	2b20      	cmp	r3, #32
 800245c:	d867      	bhi.n	800252e <HAL_TIM_ConfigClockSource+0x16c>
 800245e:	2b00      	cmp	r3, #0
 8002460:	d05c      	beq.n	800251c <HAL_TIM_ConfigClockSource+0x15a>
 8002462:	2b10      	cmp	r3, #16
 8002464:	d05a      	beq.n	800251c <HAL_TIM_ConfigClockSource+0x15a>
 8002466:	e062      	b.n	800252e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6899      	ldr	r1, [r3, #8]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f000 f98c 	bl	8002794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800248a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	609a      	str	r2, [r3, #8]
      break;
 8002494:	e04f      	b.n	8002536 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f000 f975 	bl	8002794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024b8:	609a      	str	r2, [r3, #8]
      break;
 80024ba:	e03c      	b.n	8002536 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f000 f8e9 	bl	80026a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2150      	movs	r1, #80	@ 0x50
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 f942 	bl	800275e <TIM_ITRx_SetConfig>
      break;
 80024da:	e02c      	b.n	8002536 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	461a      	mov	r2, r3
 80024ea:	f000 f908 	bl	80026fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2160      	movs	r1, #96	@ 0x60
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 f932 	bl	800275e <TIM_ITRx_SetConfig>
      break;
 80024fa:	e01c      	b.n	8002536 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	461a      	mov	r2, r3
 800250a:	f000 f8c9 	bl	80026a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2140      	movs	r1, #64	@ 0x40
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f922 	bl	800275e <TIM_ITRx_SetConfig>
      break;
 800251a:	e00c      	b.n	8002536 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f000 f919 	bl	800275e <TIM_ITRx_SetConfig>
      break;
 800252c:	e003      	b.n	8002536 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
      break;
 8002532:	e000      	b.n	8002536 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002534:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a34      	ldr	r2, [pc, #208]	@ (8002684 <TIM_Base_SetConfig+0xe4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00f      	beq.n	80025d8 <TIM_Base_SetConfig+0x38>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025be:	d00b      	beq.n	80025d8 <TIM_Base_SetConfig+0x38>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a31      	ldr	r2, [pc, #196]	@ (8002688 <TIM_Base_SetConfig+0xe8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <TIM_Base_SetConfig+0x38>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a30      	ldr	r2, [pc, #192]	@ (800268c <TIM_Base_SetConfig+0xec>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d003      	beq.n	80025d8 <TIM_Base_SetConfig+0x38>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002690 <TIM_Base_SetConfig+0xf0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d108      	bne.n	80025ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a25      	ldr	r2, [pc, #148]	@ (8002684 <TIM_Base_SetConfig+0xe4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01b      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f8:	d017      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <TIM_Base_SetConfig+0xe8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a21      	ldr	r2, [pc, #132]	@ (800268c <TIM_Base_SetConfig+0xec>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00f      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a20      	ldr	r2, [pc, #128]	@ (8002690 <TIM_Base_SetConfig+0xf0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00b      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1f      	ldr	r2, [pc, #124]	@ (8002694 <TIM_Base_SetConfig+0xf4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1e      	ldr	r2, [pc, #120]	@ (8002698 <TIM_Base_SetConfig+0xf8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a1d      	ldr	r2, [pc, #116]	@ (800269c <TIM_Base_SetConfig+0xfc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d108      	bne.n	800263c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a08      	ldr	r2, [pc, #32]	@ (8002684 <TIM_Base_SetConfig+0xe4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d103      	bne.n	8002670 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	615a      	str	r2, [r3, #20]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40010000 	.word	0x40010000
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
 8002690:	40000c00 	.word	0x40000c00
 8002694:	40014000 	.word	0x40014000
 8002698:	40014400 	.word	0x40014400
 800269c:	40014800 	.word	0x40014800

080026a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f023 0201 	bic.w	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f023 030a 	bic.w	r3, r3, #10
 80026dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	621a      	str	r2, [r3, #32]
}
 80026f2:	bf00      	nop
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026fe:	b480      	push	{r7}
 8002700:	b087      	sub	sp, #28
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	f023 0210 	bic.w	r2, r3, #16
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	031b      	lsls	r3, r3, #12
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800273a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	621a      	str	r2, [r3, #32]
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	f043 0307 	orr.w	r3, r3, #7
 8002780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	609a      	str	r2, [r3, #8]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	021a      	lsls	r2, r3, #8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e050      	b.n	800288e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1c      	ldr	r2, [pc, #112]	@ (800289c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d018      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002838:	d013      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a18      	ldr	r2, [pc, #96]	@ (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00e      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a16      	ldr	r2, [pc, #88]	@ (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a15      	ldr	r2, [pc, #84]	@ (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10c      	bne.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4313      	orrs	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40010000 	.word	0x40010000
 80028a0:	40000400 	.word	0x40000400
 80028a4:	40000800 	.word	0x40000800
 80028a8:	40000c00 	.word	0x40000c00
 80028ac:	40014000 	.word	0x40014000

080028b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e03f      	b.n	800296a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fa94 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	@ 0x24
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800291a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f8db 	bl	8002ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	4613      	mov	r3, r2
 800297e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b20      	cmp	r3, #32
 800298a:	d130      	bne.n	80029ee <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_UART_Transmit_IT+0x26>
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e029      	b.n	80029f0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Transmit_IT+0x38>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e022      	b.n	80029f0 <HAL_UART_Transmit_IT+0x7e>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2221      	movs	r2, #33	@ 0x21
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029e8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	d11d      	bne.n	8002a52 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HAL_UART_Receive_IT+0x26>
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e016      	b.n	8002a54 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_UART_Receive_IT+0x38>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e00f      	b.n	8002a54 <HAL_UART_Receive_IT+0x58>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f807 	bl	8002a5c <UART_Start_Receive_IT>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	e000      	b.n	8002a54 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	88fa      	ldrh	r2, [r7, #6]
 8002a74:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2222      	movs	r2, #34	@ 0x22
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aa8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0220 	orr.w	r2, r2, #32
 8002ac8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002adc:	b0c0      	sub	sp, #256	@ 0x100
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af4:	68d9      	ldr	r1, [r3, #12]
 8002af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	ea40 0301 	orr.w	r3, r0, r1
 8002b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b30:	f021 010c 	bic.w	r1, r1, #12
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b52:	6999      	ldr	r1, [r3, #24]
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	ea40 0301 	orr.w	r3, r0, r1
 8002b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b8f      	ldr	r3, [pc, #572]	@ (8002da4 <UART_SetConfig+0x2cc>)
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d005      	beq.n	8002b78 <UART_SetConfig+0xa0>
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b8d      	ldr	r3, [pc, #564]	@ (8002da8 <UART_SetConfig+0x2d0>)
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d104      	bne.n	8002b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b78:	f7ff fa26 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8002b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b80:	e003      	b.n	8002b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b82:	f7ff fa0d 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8002b86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b94:	f040 810c 	bne.w	8002db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002baa:	4622      	mov	r2, r4
 8002bac:	462b      	mov	r3, r5
 8002bae:	1891      	adds	r1, r2, r2
 8002bb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bb2:	415b      	adcs	r3, r3
 8002bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bba:	4621      	mov	r1, r4
 8002bbc:	eb12 0801 	adds.w	r8, r2, r1
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	eb43 0901 	adc.w	r9, r3, r1
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bda:	4690      	mov	r8, r2
 8002bdc:	4699      	mov	r9, r3
 8002bde:	4623      	mov	r3, r4
 8002be0:	eb18 0303 	adds.w	r3, r8, r3
 8002be4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002be8:	462b      	mov	r3, r5
 8002bea:	eb49 0303 	adc.w	r3, r9, r3
 8002bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c06:	460b      	mov	r3, r1
 8002c08:	18db      	adds	r3, r3, r3
 8002c0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	eb42 0303 	adc.w	r3, r2, r3
 8002c12:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c1c:	f7fd fb38 	bl	8000290 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4b61      	ldr	r3, [pc, #388]	@ (8002dac <UART_SetConfig+0x2d4>)
 8002c26:	fba3 2302 	umull	r2, r3, r3, r2
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	011c      	lsls	r4, r3, #4
 8002c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c40:	4642      	mov	r2, r8
 8002c42:	464b      	mov	r3, r9
 8002c44:	1891      	adds	r1, r2, r2
 8002c46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c48:	415b      	adcs	r3, r3
 8002c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c50:	4641      	mov	r1, r8
 8002c52:	eb12 0a01 	adds.w	sl, r2, r1
 8002c56:	4649      	mov	r1, r9
 8002c58:	eb43 0b01 	adc.w	fp, r3, r1
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c70:	4692      	mov	sl, r2
 8002c72:	469b      	mov	fp, r3
 8002c74:	4643      	mov	r3, r8
 8002c76:	eb1a 0303 	adds.w	r3, sl, r3
 8002c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c7e:	464b      	mov	r3, r9
 8002c80:	eb4b 0303 	adc.w	r3, fp, r3
 8002c84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	18db      	adds	r3, r3, r3
 8002ca0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	eb42 0303 	adc.w	r3, r2, r3
 8002ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cb2:	f7fd faed 	bl	8000290 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <UART_SetConfig+0x2d4>)
 8002cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	2264      	movs	r2, #100	@ 0x64
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	1acb      	subs	r3, r1, r3
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cd2:	4b36      	ldr	r3, [pc, #216]	@ (8002dac <UART_SetConfig+0x2d4>)
 8002cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ce0:	441c      	add	r4, r3
 8002ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	1891      	adds	r1, r2, r2
 8002cfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cfc:	415b      	adcs	r3, r3
 8002cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d04:	4641      	mov	r1, r8
 8002d06:	1851      	adds	r1, r2, r1
 8002d08:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	414b      	adcs	r3, r1
 8002d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d1c:	4659      	mov	r1, fp
 8002d1e:	00cb      	lsls	r3, r1, #3
 8002d20:	4651      	mov	r1, sl
 8002d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d26:	4651      	mov	r1, sl
 8002d28:	00ca      	lsls	r2, r1, #3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4642      	mov	r2, r8
 8002d32:	189b      	adds	r3, r3, r2
 8002d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d38:	464b      	mov	r3, r9
 8002d3a:	460a      	mov	r2, r1
 8002d3c:	eb42 0303 	adc.w	r3, r2, r3
 8002d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d58:	460b      	mov	r3, r1
 8002d5a:	18db      	adds	r3, r3, r3
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d5e:	4613      	mov	r3, r2
 8002d60:	eb42 0303 	adc.w	r3, r2, r3
 8002d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d6e:	f7fd fa8f 	bl	8000290 <__aeabi_uldivmod>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <UART_SetConfig+0x2d4>)
 8002d78:	fba3 1302 	umull	r1, r3, r3, r2
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	2164      	movs	r1, #100	@ 0x64
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	3332      	adds	r3, #50	@ 0x32
 8002d8a:	4a08      	ldr	r2, [pc, #32]	@ (8002dac <UART_SetConfig+0x2d4>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	f003 0207 	and.w	r2, r3, #7
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4422      	add	r2, r4
 8002d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002da0:	e106      	b.n	8002fb0 <UART_SetConfig+0x4d8>
 8002da2:	bf00      	nop
 8002da4:	40011000 	.word	0x40011000
 8002da8:	40011400 	.word	0x40011400
 8002dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002dba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dc2:	4642      	mov	r2, r8
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	1891      	adds	r1, r2, r2
 8002dc8:	6239      	str	r1, [r7, #32]
 8002dca:	415b      	adcs	r3, r3
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	1854      	adds	r4, r2, r1
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	eb43 0501 	adc.w	r5, r3, r1
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	00eb      	lsls	r3, r5, #3
 8002de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dea:	00e2      	lsls	r2, r4, #3
 8002dec:	4614      	mov	r4, r2
 8002dee:	461d      	mov	r5, r3
 8002df0:	4643      	mov	r3, r8
 8002df2:	18e3      	adds	r3, r4, r3
 8002df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002df8:	464b      	mov	r3, r9
 8002dfa:	eb45 0303 	adc.w	r3, r5, r3
 8002dfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e1e:	4629      	mov	r1, r5
 8002e20:	008b      	lsls	r3, r1, #2
 8002e22:	4621      	mov	r1, r4
 8002e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e28:	4621      	mov	r1, r4
 8002e2a:	008a      	lsls	r2, r1, #2
 8002e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e30:	f7fd fa2e 	bl	8000290 <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4b60      	ldr	r3, [pc, #384]	@ (8002fbc <UART_SetConfig+0x4e4>)
 8002e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	011c      	lsls	r4, r3, #4
 8002e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e54:	4642      	mov	r2, r8
 8002e56:	464b      	mov	r3, r9
 8002e58:	1891      	adds	r1, r2, r2
 8002e5a:	61b9      	str	r1, [r7, #24]
 8002e5c:	415b      	adcs	r3, r3
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e64:	4641      	mov	r1, r8
 8002e66:	1851      	adds	r1, r2, r1
 8002e68:	6139      	str	r1, [r7, #16]
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	414b      	adcs	r3, r1
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e7c:	4659      	mov	r1, fp
 8002e7e:	00cb      	lsls	r3, r1, #3
 8002e80:	4651      	mov	r1, sl
 8002e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e86:	4651      	mov	r1, sl
 8002e88:	00ca      	lsls	r2, r1, #3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4642      	mov	r2, r8
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e98:	464b      	mov	r3, r9
 8002e9a:	460a      	mov	r2, r1
 8002e9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002eae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	008b      	lsls	r3, r1, #2
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ec6:	4641      	mov	r1, r8
 8002ec8:	008a      	lsls	r2, r1, #2
 8002eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ece:	f7fd f9df 	bl	8000290 <__aeabi_uldivmod>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4b38      	ldr	r3, [pc, #224]	@ (8002fbc <UART_SetConfig+0x4e4>)
 8002eda:	fba3 2301 	umull	r2, r3, r3, r1
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	2264      	movs	r2, #100	@ 0x64
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	1acb      	subs	r3, r1, r3
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	3332      	adds	r3, #50	@ 0x32
 8002eec:	4a33      	ldr	r2, [pc, #204]	@ (8002fbc <UART_SetConfig+0x4e4>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef8:	441c      	add	r4, r3
 8002efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002efe:	2200      	movs	r2, #0
 8002f00:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f02:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f08:	4642      	mov	r2, r8
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1891      	adds	r1, r2, r2
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	415b      	adcs	r3, r3
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f18:	4641      	mov	r1, r8
 8002f1a:	1851      	adds	r1, r2, r1
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	4649      	mov	r1, r9
 8002f20:	414b      	adcs	r3, r1
 8002f22:	607b      	str	r3, [r7, #4]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f30:	4659      	mov	r1, fp
 8002f32:	00cb      	lsls	r3, r1, #3
 8002f34:	4651      	mov	r1, sl
 8002f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	00ca      	lsls	r2, r1, #3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	4642      	mov	r2, r8
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	eb42 0303 	adc.w	r3, r2, r3
 8002f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	008b      	lsls	r3, r1, #2
 8002f70:	4641      	mov	r1, r8
 8002f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f76:	4641      	mov	r1, r8
 8002f78:	008a      	lsls	r2, r1, #2
 8002f7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f7e:	f7fd f987 	bl	8000290 <__aeabi_uldivmod>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4b0d      	ldr	r3, [pc, #52]	@ (8002fbc <UART_SetConfig+0x4e4>)
 8002f88:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	2164      	movs	r1, #100	@ 0x64
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	3332      	adds	r3, #50	@ 0x32
 8002f9a:	4a08      	ldr	r2, [pc, #32]	@ (8002fbc <UART_SetConfig+0x4e4>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	f003 020f 	and.w	r2, r3, #15
 8002fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4422      	add	r2, r4
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fbc:	51eb851f 	.word	0x51eb851f

08002fc0 <__NVIC_SetPriority>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db0a      	blt.n	8002fea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	490c      	ldr	r1, [pc, #48]	@ (800300c <__NVIC_SetPriority+0x4c>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002fe8:	e00a      	b.n	8003000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4908      	ldr	r1, [pc, #32]	@ (8003010 <__NVIC_SetPriority+0x50>)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	761a      	strb	r2, [r3, #24]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003018:	2100      	movs	r1, #0
 800301a:	f06f 0004 	mvn.w	r0, #4
 800301e:	f7ff ffcf 	bl	8002fc0 <__NVIC_SetPriority>
#endif
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800302e:	f3ef 8305 	mrs	r3, IPSR
 8003032:	603b      	str	r3, [r7, #0]
  return(result);
 8003034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800303a:	f06f 0305 	mvn.w	r3, #5
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	e00c      	b.n	800305c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <osKernelInitialize+0x44>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800304a:	4b08      	ldr	r3, [pc, #32]	@ (800306c <osKernelInitialize+0x44>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003050:	2300      	movs	r3, #0
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	e002      	b.n	800305c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800305c:	687b      	ldr	r3, [r7, #4]
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	200001d0 	.word	0x200001d0

08003070 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003076:	f3ef 8305 	mrs	r3, IPSR
 800307a:	603b      	str	r3, [r7, #0]
  return(result);
 800307c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003082:	f06f 0305 	mvn.w	r3, #5
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	e010      	b.n	80030ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800308a:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <osKernelStart+0x48>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d109      	bne.n	80030a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003092:	f7ff ffbf 	bl	8003014 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003096:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <osKernelStart+0x48>)
 8003098:	2202      	movs	r2, #2
 800309a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800309c:	f001 fe16 	bl	8004ccc <vTaskStartScheduler>
      stat = osOK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	e002      	b.n	80030ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030ac:	687b      	ldr	r3, [r7, #4]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200001d0 	.word	0x200001d0

080030bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08e      	sub	sp, #56	@ 0x38
 80030c0:	af04      	add	r7, sp, #16
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030cc:	f3ef 8305 	mrs	r3, IPSR
 80030d0:	617b      	str	r3, [r7, #20]
  return(result);
 80030d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d17e      	bne.n	80031d6 <osThreadNew+0x11a>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d07b      	beq.n	80031d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80030de:	2380      	movs	r3, #128	@ 0x80
 80030e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80030e2:	2318      	movs	r3, #24
 80030e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d045      	beq.n	8003182 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <osThreadNew+0x48>
        name = attr->name;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <osThreadNew+0x6e>
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b38      	cmp	r3, #56	@ 0x38
 800311c:	d805      	bhi.n	800312a <osThreadNew+0x6e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <osThreadNew+0x72>
        return (NULL);
 800312a:	2300      	movs	r3, #0
 800312c:	e054      	b.n	80031d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00e      	beq.n	8003164 <osThreadNew+0xa8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b5b      	cmp	r3, #91	@ 0x5b
 800314c:	d90a      	bls.n	8003164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003152:	2b00      	cmp	r3, #0
 8003154:	d006      	beq.n	8003164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <osThreadNew+0xa8>
        mem = 1;
 800315e:	2301      	movs	r3, #1
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	e010      	b.n	8003186 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <osThreadNew+0xca>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d108      	bne.n	8003186 <osThreadNew+0xca>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <osThreadNew+0xca>
          mem = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	e001      	b.n	8003186 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d110      	bne.n	80031ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003194:	9202      	str	r2, [sp, #8]
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	6a3a      	ldr	r2, [r7, #32]
 80031a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f001 fbb6 	bl	8004914 <xTaskCreateStatic>
 80031a8:	4603      	mov	r3, r0
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e013      	b.n	80031d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d110      	bne.n	80031d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	f107 0310 	add.w	r3, r7, #16
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f001 fc04 	bl	80049d4 <xTaskCreate>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <osThreadNew+0x11a>
            hTask = NULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031d6:	693b      	ldr	r3, [r7, #16]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3728      	adds	r7, #40	@ 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031e8:	f3ef 8305 	mrs	r3, IPSR
 80031ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80031ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <osDelay+0x1c>
    stat = osErrorISR;
 80031f4:	f06f 0305 	mvn.w	r3, #5
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e007      	b.n	800320c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f001 fd2a 	bl	8004c60 <vTaskDelay>
    }
  }

  return (stat);
 800320c:	68fb      	ldr	r3, [r7, #12]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003222:	f3ef 8305 	mrs	r3, IPSR
 8003226:	60fb      	str	r3, [r7, #12]
  return(result);
 8003228:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800322a:	2b00      	cmp	r3, #0
 800322c:	d12d      	bne.n	800328a <osEventFlagsNew+0x74>
    mem = -1;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d015      	beq.n	8003266 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <osEventFlagsNew+0x3a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b1f      	cmp	r3, #31
 8003248:	d902      	bls.n	8003250 <osEventFlagsNew+0x3a>
        mem = 1;
 800324a:	2301      	movs	r3, #1
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	e00c      	b.n	800326a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d108      	bne.n	800326a <osEventFlagsNew+0x54>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <osEventFlagsNew+0x54>
          mem = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e001      	b.n	800326a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d106      	bne.n	800327e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fa9f 	bl	80037b8 <xEventGroupCreateStatic>
 800327a:	6178      	str	r0, [r7, #20]
 800327c:	e005      	b.n	800328a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8003284:	f000 fad1 	bl	800382a <xEventGroupCreate>
 8003288:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800328a:	697b      	ldr	r3, [r7, #20]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <osEventFlagsSet+0x1c>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ae:	d303      	bcc.n	80032b8 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80032b0:	f06f 0303 	mvn.w	r3, #3
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	e028      	b.n	800330a <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032b8:	f3ef 8305 	mrs	r3, IPSR
 80032bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80032be:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01d      	beq.n	8003300 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80032c8:	f107 0308 	add.w	r3, r7, #8
 80032cc:	461a      	mov	r2, r3
 80032ce:	6839      	ldr	r1, [r7, #0]
 80032d0:	6938      	ldr	r0, [r7, #16]
 80032d2:	f000 fc53 	bl	8003b7c <xEventGroupSetBitsFromISR>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 80032dc:	f06f 0302 	mvn.w	r3, #2
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e012      	b.n	800330a <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00d      	beq.n	800330a <osEventFlagsSet+0x76>
 80032ee:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <osEventFlagsSet+0x80>)
 80032f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	e004      	b.n	800330a <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	6938      	ldr	r0, [r7, #16]
 8003304:	f000 fb7e 	bl	8003a04 <xEventGroupSetBits>
 8003308:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800330a:	697b      	ldr	r3, [r7, #20]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	e000ed04 	.word	0xe000ed04

08003318 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b08c      	sub	sp, #48	@ 0x30
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <osEventFlagsWait+0x20>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003336:	d303      	bcc.n	8003340 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8003338:	f06f 0303 	mvn.w	r3, #3
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e04b      	b.n	80033d8 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003340:	f3ef 8305 	mrs	r3, IPSR
 8003344:	617b      	str	r3, [r7, #20]
  return(result);
 8003346:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800334c:	f06f 0305 	mvn.w	r3, #5
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e041      	b.n	80033d8 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800335e:	2301      	movs	r3, #1
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
 8003362:	e001      	b.n	8003368 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8003364:	2300      	movs	r3, #0
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
 8003376:	e001      	b.n	800337c <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8003378:	2301      	movs	r3, #1
 800337a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	6a3a      	ldr	r2, [r7, #32]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	69b8      	ldr	r0, [r7, #24]
 8003388:	f000 fa6a 	bl	8003860 <xEventGroupWaitBits>
 800338c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4013      	ands	r3, r2
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d019      	beq.n	80033d8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 80033aa:	f06f 0301 	mvn.w	r3, #1
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e012      	b.n	80033d8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80033b2:	f06f 0302 	mvn.w	r3, #2
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	e00e      	b.n	80033d8 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 80033ca:	f06f 0301 	mvn.w	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e002      	b.n	80033d8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80033d2:	f06f 0302 	mvn.w	r3, #2
 80033d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80033d8:	69fb      	ldr	r3, [r7, #28]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3728      	adds	r7, #40	@ 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b088      	sub	sp, #32
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033ee:	f3ef 8305 	mrs	r3, IPSR
 80033f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80033f4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d174      	bne.n	80034e4 <osMutexNew+0x102>
    if (attr != NULL) {
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e001      	b.n	800340c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <osMutexNew+0x3a>
      rmtx = 1U;
 8003416:	2301      	movs	r3, #1
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e001      	b.n	8003420 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d15c      	bne.n	80034e4 <osMutexNew+0x102>
      mem = -1;
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
 800342e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d015      	beq.n	8003462 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <osMutexNew+0x6a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b4f      	cmp	r3, #79	@ 0x4f
 8003444:	d902      	bls.n	800344c <osMutexNew+0x6a>
          mem = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	e00c      	b.n	8003466 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d108      	bne.n	8003466 <osMutexNew+0x84>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <osMutexNew+0x84>
            mem = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e001      	b.n	8003466 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d112      	bne.n	8003492 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	4619      	mov	r1, r3
 8003478:	2004      	movs	r0, #4
 800347a:	f000 fdbe 	bl	8003ffa <xQueueCreateMutexStatic>
 800347e:	61f8      	str	r0, [r7, #28]
 8003480:	e016      	b.n	80034b0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	4619      	mov	r1, r3
 8003488:	2001      	movs	r0, #1
 800348a:	f000 fdb6 	bl	8003ffa <xQueueCreateMutexStatic>
 800348e:	61f8      	str	r0, [r7, #28]
 8003490:	e00e      	b.n	80034b0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10b      	bne.n	80034b0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800349e:	2004      	movs	r0, #4
 80034a0:	f000 fd93 	bl	8003fca <xQueueCreateMutex>
 80034a4:	61f8      	str	r0, [r7, #28]
 80034a6:	e003      	b.n	80034b0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80034a8:	2001      	movs	r0, #1
 80034aa:	f000 fd8e 	bl	8003fca <xQueueCreateMutex>
 80034ae:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <osMutexNew+0xee>
        if (attr != NULL) {
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <osMutexNew+0xe2>
          name = attr->name;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e001      	b.n	80034c8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80034c8:	68f9      	ldr	r1, [r7, #12]
 80034ca:	69f8      	ldr	r0, [r7, #28]
 80034cc:	f001 f9c4 	bl	8004858 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <osMutexNew+0x102>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80034e4:	69fb      	ldr	r3, [r7, #28]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b08a      	sub	sp, #40	@ 0x28
 80034f2:	af02      	add	r7, sp, #8
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034fe:	f3ef 8305 	mrs	r3, IPSR
 8003502:	613b      	str	r3, [r7, #16]
  return(result);
 8003504:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003506:	2b00      	cmp	r3, #0
 8003508:	d15f      	bne.n	80035ca <osMessageQueueNew+0xdc>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05c      	beq.n	80035ca <osMessageQueueNew+0xdc>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d059      	beq.n	80035ca <osMessageQueueNew+0xdc>
    mem = -1;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d029      	beq.n	8003576 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d012      	beq.n	8003550 <osMessageQueueNew+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b4f      	cmp	r3, #79	@ 0x4f
 8003530:	d90e      	bls.n	8003550 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <osMessageQueueNew+0x62>
        mem = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	e014      	b.n	800357a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d110      	bne.n	800357a <osMessageQueueNew+0x8c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10c      	bne.n	800357a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003564:	2b00      	cmp	r3, #0
 8003566:	d108      	bne.n	800357a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <osMessageQueueNew+0x8c>
          mem = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	e001      	b.n	800357a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10b      	bne.n	8003598 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2100      	movs	r1, #0
 800358a:	9100      	str	r1, [sp, #0]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fc26 	bl	8003de0 <xQueueGenericCreateStatic>
 8003594:	61f8      	str	r0, [r7, #28]
 8003596:	e008      	b.n	80035aa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800359e:	2200      	movs	r2, #0
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fc99 	bl	8003eda <xQueueGenericCreate>
 80035a8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00c      	beq.n	80035ca <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <osMessageQueueNew+0xd0>
        name = attr->name;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e001      	b.n	80035c2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80035c2:	6979      	ldr	r1, [r7, #20]
 80035c4:	69f8      	ldr	r0, [r7, #28]
 80035c6:	f001 f947 	bl	8004858 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80035ca:	69fb      	ldr	r3, [r7, #28]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ec:	f3ef 8305 	mrs	r3, IPSR
 80035f0:	617b      	str	r3, [r7, #20]
  return(result);
 80035f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d028      	beq.n	800364a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <osMessageQueuePut+0x36>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <osMessageQueuePut+0x36>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800360a:	f06f 0303 	mvn.w	r3, #3
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	e038      	b.n	8003684 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003616:	f107 0210 	add.w	r2, r7, #16
 800361a:	2300      	movs	r3, #0
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	69b8      	ldr	r0, [r7, #24]
 8003620:	f000 fe08 	bl	8004234 <xQueueGenericSendFromISR>
 8003624:	4603      	mov	r3, r0
 8003626:	2b01      	cmp	r3, #1
 8003628:	d003      	beq.n	8003632 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800362a:	f06f 0302 	mvn.w	r3, #2
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	e028      	b.n	8003684 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d025      	beq.n	8003684 <osMessageQueuePut+0xb0>
 8003638:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <osMessageQueuePut+0xbc>)
 800363a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	e01c      	b.n	8003684 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <osMessageQueuePut+0x82>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003656:	f06f 0303 	mvn.w	r3, #3
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	e012      	b.n	8003684 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800365e:	2300      	movs	r3, #0
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	69b8      	ldr	r0, [r7, #24]
 8003666:	f000 fce3 	bl	8004030 <xQueueGenericSend>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d009      	beq.n	8003684 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003676:	f06f 0301 	mvn.w	r3, #1
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	e002      	b.n	8003684 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800367e:	f06f 0302 	mvn.w	r3, #2
 8003682:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003684:	69fb      	ldr	r3, [r7, #28]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	e000ed04 	.word	0xe000ed04

08003694 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036aa:	f3ef 8305 	mrs	r3, IPSR
 80036ae:	617b      	str	r3, [r7, #20]
  return(result);
 80036b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d028      	beq.n	8003708 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <osMessageQueueGet+0x34>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <osMessageQueueGet+0x34>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80036c8:	f06f 0303 	mvn.w	r3, #3
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	e037      	b.n	8003740 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	461a      	mov	r2, r3
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	69b8      	ldr	r0, [r7, #24]
 80036de:	f000 ff29 	bl	8004534 <xQueueReceiveFromISR>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d003      	beq.n	80036f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80036e8:	f06f 0302 	mvn.w	r3, #2
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e027      	b.n	8003740 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d024      	beq.n	8003740 <osMessageQueueGet+0xac>
 80036f6:	4b15      	ldr	r3, [pc, #84]	@ (800374c <osMessageQueueGet+0xb8>)
 80036f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	e01b      	b.n	8003740 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <osMessageQueueGet+0x80>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003714:	f06f 0303 	mvn.w	r3, #3
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e011      	b.n	8003740 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	69b8      	ldr	r0, [r7, #24]
 8003722:	f000 fe25 	bl	8004370 <xQueueReceive>
 8003726:	4603      	mov	r3, r0
 8003728:	2b01      	cmp	r3, #1
 800372a:	d009      	beq.n	8003740 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003732:	f06f 0301 	mvn.w	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	e002      	b.n	8003740 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800373a:	f06f 0302 	mvn.w	r3, #2
 800373e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003740:	69fb      	ldr	r3, [r7, #28]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	e000ed04 	.word	0xe000ed04

08003750 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a07      	ldr	r2, [pc, #28]	@ (800377c <vApplicationGetIdleTaskMemory+0x2c>)
 8003760:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4a06      	ldr	r2, [pc, #24]	@ (8003780 <vApplicationGetIdleTaskMemory+0x30>)
 8003766:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2280      	movs	r2, #128	@ 0x80
 800376c:	601a      	str	r2, [r3, #0]
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	200001d4 	.word	0x200001d4
 8003780:	20000230 	.word	0x20000230

08003784 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a07      	ldr	r2, [pc, #28]	@ (80037b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003794:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4a06      	ldr	r2, [pc, #24]	@ (80037b4 <vApplicationGetTimerTaskMemory+0x30>)
 800379a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037a2:	601a      	str	r2, [r3, #0]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	20000430 	.word	0x20000430
 80037b4:	2000048c 	.word	0x2000048c

080037b8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80037de:	2320      	movs	r3, #32
 80037e0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d00b      	beq.n	8003800 <xEventGroupCreateStatic+0x48>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	60fb      	str	r3, [r7, #12]
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3304      	adds	r3, #4
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f9c5 	bl	8003ba4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2201      	movs	r2, #1
 800381e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003820:	697b      	ldr	r3, [r7, #20]
	}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003830:	2020      	movs	r0, #32
 8003832:	f002 fe03 	bl	800643c <pvPortMalloc>
 8003836:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	4618      	mov	r0, r3
 800384a:	f000 f9ab 	bl	8003ba4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003854:	687b      	ldr	r3, [r7, #4]
	}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b090      	sub	sp, #64	@ 0x40
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003876:	2300      	movs	r3, #0
 8003878:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <xEventGroupWaitBits+0x38>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	623b      	str	r3, [r7, #32]
}
 8003892:	bf00      	nop
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800389e:	d30b      	bcc.n	80038b8 <xEventGroupWaitBits+0x58>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	61fb      	str	r3, [r7, #28]
}
 80038b2:	bf00      	nop
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <xEventGroupWaitBits+0x76>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	61bb      	str	r3, [r7, #24]
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	e7fd      	b.n	80038d2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038d6:	f001 fee9 	bl	80056ac <xTaskGetSchedulerState>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <xEventGroupWaitBits+0x86>
 80038e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <xEventGroupWaitBits+0x8a>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <xEventGroupWaitBits+0x8c>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	617b      	str	r3, [r7, #20]
}
 8003902:	bf00      	nop
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8003908:	f001 fa48 	bl	8004d9c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800390c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003918:	f000 f90d 	bl	8003b36 <prvTestWaitCondition>
 800391c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00e      	beq.n	8003942 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003926:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003928:	2300      	movs	r3, #0
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d028      	beq.n	8003984 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	43db      	mvns	r3, r3
 800393a:	401a      	ands	r2, r3
 800393c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e020      	b.n	8003984 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003950:	e018      	b.n	8003984 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800395e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800396c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800396e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003970:	1d18      	adds	r0, r3, #4
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003976:	4313      	orrs	r3, r2
 8003978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800397a:	4619      	mov	r1, r3
 800397c:	f001 fc08 	bl	8005190 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003984:	f001 fa18 	bl	8004db8 <xTaskResumeAll>
 8003988:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800398a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800398c:	2b00      	cmp	r3, #0
 800398e:	d031      	beq.n	80039f4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	d107      	bne.n	80039a6 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8003996:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <xEventGroupWaitBits+0x1a0>)
 8003998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80039a6:	f001 ff0f 	bl	80057c8 <uxTaskResetEventItemValue>
 80039aa:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80039ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d11a      	bne.n	80039ec <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80039b6:	f002 fc1f 	bl	80061f8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80039ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80039c6:	f000 f8b6 	bl	8003b36 <prvTestWaitCondition>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80039d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80039e8:	f002 fc38 	bl	800625c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80039ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80039f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3740      	adds	r7, #64	@ 0x40
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	e000ed04 	.word	0xe000ed04

08003a04 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08e      	sub	sp, #56	@ 0x38
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <xEventGroupSetBits+0x34>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	613b      	str	r3, [r7, #16]
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a3e:	d30b      	bcc.n	8003a58 <xEventGroupSetBits+0x54>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	60fb      	str	r3, [r7, #12]
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	3308      	adds	r3, #8
 8003a62:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003a64:	f001 f99a 	bl	8004d9c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a78:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003a7a:	e03c      	b.n	8003af6 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003a92:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a9a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ab6:	e008      	b.n	8003aca <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d101      	bne.n	8003aca <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d010      	beq.n	8003af2 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003aea:	4619      	mov	r1, r3
 8003aec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003aee:	f001 fc1d 	bl	800532c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8003af6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d1be      	bne.n	8003a7c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	43db      	mvns	r3, r3
 8003b06:	401a      	ands	r2, r3
 8003b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003b0c:	f001 f954 	bl	8004db8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3738      	adds	r7, #56	@ 0x38
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8003b26:	6839      	ldr	r1, [r7, #0]
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff6b 	bl	8003a04 <xEventGroupSetBits>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003b36:	b480      	push	{r7}
 8003b38:	b087      	sub	sp, #28
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d107      	bne.n	8003b5c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003b56:	2301      	movs	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e007      	b.n	8003b6c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d101      	bne.n	8003b6c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003b6c:	697b      	ldr	r3, [r7, #20]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	4804      	ldr	r0, [pc, #16]	@ (8003ba0 <xEventGroupSetBitsFromISR+0x24>)
 8003b90:	f002 f9e0 	bl	8005f54 <xTimerPendFunctionCallFromISR>
 8003b94:	6178      	str	r0, [r7, #20]

		return xReturn;
 8003b96:	697b      	ldr	r3, [r7, #20]
	}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	08003b1d 	.word	0x08003b1d

08003ba4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f103 0208 	add.w	r2, r3, #8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f103 0208 	add.w	r2, r3, #8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f103 0208 	add.w	r2, r3, #8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	601a      	str	r2, [r3, #0]
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d103      	bne.n	8003c66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	e00c      	b.n	8003c80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	e002      	b.n	8003c74 <vListInsert+0x2e>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d2f6      	bcs.n	8003c6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	601a      	str	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6892      	ldr	r2, [r2, #8]
 8003cce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6852      	ldr	r2, [r2, #4]
 8003cd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d103      	bne.n	8003cec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	1e5a      	subs	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <xQueueGenericReset+0x2c>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60bb      	str	r3, [r7, #8]
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d38:	f002 fa5e 	bl	80061f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d44:	68f9      	ldr	r1, [r7, #12]
 8003d46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	441a      	add	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	441a      	add	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	22ff      	movs	r2, #255	@ 0xff
 8003d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	22ff      	movs	r2, #255	@ 0xff
 8003d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d114      	bne.n	8003db8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01a      	beq.n	8003dcc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3310      	adds	r3, #16
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 fa62 	bl	8005264 <xTaskRemoveFromEventList>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d012      	beq.n	8003dcc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003da6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ddc <xQueueGenericReset+0xd0>)
 8003da8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	e009      	b.n	8003dcc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3310      	adds	r3, #16
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fef1 	bl	8003ba4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3324      	adds	r3, #36	@ 0x24
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff feec 	bl	8003ba4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dcc:	f002 fa46 	bl	800625c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dd0:	2301      	movs	r3, #1
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08e      	sub	sp, #56	@ 0x38
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e06:	bf00      	nop
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	e7fd      	b.n	8003e26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <xQueueGenericCreateStatic+0x56>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <xQueueGenericCreateStatic+0x5a>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <xQueueGenericCreateStatic+0x5c>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	623b      	str	r3, [r7, #32]
}
 8003e52:	bf00      	nop
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <xQueueGenericCreateStatic+0x84>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <xQueueGenericCreateStatic+0x88>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <xQueueGenericCreateStatic+0x8a>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	61fb      	str	r3, [r7, #28]
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	e7fd      	b.n	8003e82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e86:	2350      	movs	r3, #80	@ 0x50
 8003e88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b50      	cmp	r3, #80	@ 0x50
 8003e8e:	d00b      	beq.n	8003ea8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	61bb      	str	r3, [r7, #24]
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ea8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ebc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f840 	bl	8003f50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3730      	adds	r7, #48	@ 0x30
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b08a      	sub	sp, #40	@ 0x28
 8003ede:	af02      	add	r7, sp, #8
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	613b      	str	r3, [r7, #16]
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	e7fd      	b.n	8003f02 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	3350      	adds	r3, #80	@ 0x50
 8003f14:	4618      	mov	r0, r3
 8003f16:	f002 fa91 	bl	800643c <pvPortMalloc>
 8003f1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d011      	beq.n	8003f46 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	3350      	adds	r3, #80	@ 0x50
 8003f2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f34:	79fa      	ldrb	r2, [r7, #7]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f805 	bl	8003f50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f46:	69bb      	ldr	r3, [r7, #24]
	}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e002      	b.n	8003f72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f7e:	2101      	movs	r1, #1
 8003f80:	69b8      	ldr	r0, [r7, #24]
 8003f82:	f7ff fec3 	bl	8003d0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00e      	beq.n	8003fc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2100      	movs	r1, #0
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f837 	bl	8004030 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b086      	sub	sp, #24
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6939      	ldr	r1, [r7, #16]
 8003fe2:	6978      	ldr	r0, [r7, #20]
 8003fe4:	f7ff ff79 	bl	8003eda <xQueueGenericCreate>
 8003fe8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff ffd3 	bl	8003f96 <prvInitialiseMutex>

		return xNewQueue;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
	}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b088      	sub	sp, #32
 8003ffe:	af02      	add	r7, sp, #8
 8004000:	4603      	mov	r3, r0
 8004002:	6039      	str	r1, [r7, #0]
 8004004:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004006:	2301      	movs	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2200      	movs	r2, #0
 8004016:	6939      	ldr	r1, [r7, #16]
 8004018:	6978      	ldr	r0, [r7, #20]
 800401a:	f7ff fee1 	bl	8003de0 <xQueueGenericCreateStatic>
 800401e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff ffb8 	bl	8003f96 <prvInitialiseMutex>

		return xNewQueue;
 8004026:	68fb      	ldr	r3, [r7, #12]
	}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08e      	sub	sp, #56	@ 0x38
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800403e:	2300      	movs	r3, #0
 8004040:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <xQueueGenericSend+0x34>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <xQueueGenericSend+0x42>
 800406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <xQueueGenericSend+0x46>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <xQueueGenericSend+0x48>
 8004076:	2300      	movs	r3, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <xQueueGenericSend+0x64>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	e7fd      	b.n	8004090 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d103      	bne.n	80040a2 <xQueueGenericSend+0x72>
 800409a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <xQueueGenericSend+0x76>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <xQueueGenericSend+0x78>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <xQueueGenericSend+0x94>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	623b      	str	r3, [r7, #32]
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040c4:	f001 faf2 	bl	80056ac <xTaskGetSchedulerState>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <xQueueGenericSend+0xa4>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <xQueueGenericSend+0xa8>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <xQueueGenericSend+0xaa>
 80040d8:	2300      	movs	r3, #0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10b      	bne.n	80040f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	61fb      	str	r3, [r7, #28]
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	e7fd      	b.n	80040f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040f6:	f002 f87f 	bl	80061f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <xQueueGenericSend+0xdc>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d129      	bne.n	8004160 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004112:	f000 fa91 	bl	8004638 <prvCopyDataToQueue>
 8004116:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	2b00      	cmp	r3, #0
 800411e:	d010      	beq.n	8004142 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004122:	3324      	adds	r3, #36	@ 0x24
 8004124:	4618      	mov	r0, r3
 8004126:	f001 f89d 	bl	8005264 <xTaskRemoveFromEventList>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d013      	beq.n	8004158 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004130:	4b3f      	ldr	r3, [pc, #252]	@ (8004230 <xQueueGenericSend+0x200>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	e00a      	b.n	8004158 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004148:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <xQueueGenericSend+0x200>)
 800414a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004158:	f002 f880 	bl	800625c <vPortExitCritical>
				return pdPASS;
 800415c:	2301      	movs	r3, #1
 800415e:	e063      	b.n	8004228 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004166:	f002 f879 	bl	800625c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800416a:	2300      	movs	r3, #0
 800416c:	e05c      	b.n	8004228 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800416e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004174:	f107 0314 	add.w	r3, r7, #20
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f93b 	bl	80053f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800417e:	2301      	movs	r3, #1
 8004180:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004182:	f002 f86b 	bl	800625c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004186:	f000 fe09 	bl	8004d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800418a:	f002 f835 	bl	80061f8 <vPortEnterCritical>
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004194:	b25b      	sxtb	r3, r3
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419a:	d103      	bne.n	80041a4 <xQueueGenericSend+0x174>
 800419c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041aa:	b25b      	sxtb	r3, r3
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d103      	bne.n	80041ba <xQueueGenericSend+0x18a>
 80041b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041ba:	f002 f84f 	bl	800625c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041be:	1d3a      	adds	r2, r7, #4
 80041c0:	f107 0314 	add.w	r3, r7, #20
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 f92a 	bl	8005420 <xTaskCheckForTimeOut>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d124      	bne.n	800421c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041d4:	f000 fb28 	bl	8004828 <prvIsQueueFull>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d018      	beq.n	8004210 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	3310      	adds	r3, #16
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 ffac 	bl	8005144 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041ee:	f000 fab3 	bl	8004758 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041f2:	f000 fde1 	bl	8004db8 <xTaskResumeAll>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f47f af7c 	bne.w	80040f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80041fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004230 <xQueueGenericSend+0x200>)
 8004200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	e772      	b.n	80040f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004212:	f000 faa1 	bl	8004758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004216:	f000 fdcf 	bl	8004db8 <xTaskResumeAll>
 800421a:	e76c      	b.n	80040f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800421c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800421e:	f000 fa9b 	bl	8004758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004222:	f000 fdc9 	bl	8004db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004226:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004228:	4618      	mov	r0, r3
 800422a:	3738      	adds	r7, #56	@ 0x38
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	e000ed04 	.word	0xe000ed04

08004234 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b090      	sub	sp, #64	@ 0x40
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d103      	bne.n	8004272 <xQueueGenericSendFromISR+0x3e>
 800426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <xQueueGenericSendFromISR+0x42>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <xQueueGenericSendFromISR+0x44>
 8004276:	2300      	movs	r3, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800428e:	bf00      	nop
 8004290:	bf00      	nop
 8004292:	e7fd      	b.n	8004290 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d103      	bne.n	80042a2 <xQueueGenericSendFromISR+0x6e>
 800429a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <xQueueGenericSendFromISR+0x72>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <xQueueGenericSendFromISR+0x74>
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	623b      	str	r3, [r7, #32]
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042c4:	f002 f878 	bl	80063b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042c8:	f3ef 8211 	mrs	r2, BASEPRI
 80042cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	61fa      	str	r2, [r7, #28]
 80042de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <xQueueGenericSendFromISR+0xc2>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d12f      	bne.n	8004356 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800430c:	f000 f994 	bl	8004638 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004310:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d112      	bne.n	8004340 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800431a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	2b00      	cmp	r3, #0
 8004320:	d016      	beq.n	8004350 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004324:	3324      	adds	r3, #36	@ 0x24
 8004326:	4618      	mov	r0, r3
 8004328:	f000 ff9c 	bl	8005264 <xTaskRemoveFromEventList>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00e      	beq.n	8004350 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e007      	b.n	8004350 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004340:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004344:	3301      	adds	r3, #1
 8004346:	b2db      	uxtb	r3, r3
 8004348:	b25a      	sxtb	r2, r3
 800434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004350:	2301      	movs	r3, #1
 8004352:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004354:	e001      	b.n	800435a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004356:	2300      	movs	r3, #0
 8004358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800435a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004364:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004368:	4618      	mov	r0, r3
 800436a:	3740      	adds	r7, #64	@ 0x40
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08c      	sub	sp, #48	@ 0x30
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800437c:	2300      	movs	r3, #0
 800437e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <xQueueReceive+0x32>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	623b      	str	r3, [r7, #32]
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	e7fd      	b.n	800439e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <xQueueReceive+0x40>
 80043a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <xQueueReceive+0x44>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <xQueueReceive+0x46>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <xQueueReceive+0x62>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	61fb      	str	r3, [r7, #28]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043d2:	f001 f96b 	bl	80056ac <xTaskGetSchedulerState>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <xQueueReceive+0x72>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <xQueueReceive+0x76>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <xQueueReceive+0x78>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <xQueueReceive+0x94>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	61bb      	str	r3, [r7, #24]
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	e7fd      	b.n	8004400 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004404:	f001 fef8 	bl	80061f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01f      	beq.n	8004454 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004418:	f000 f978 	bl	800470c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	1e5a      	subs	r2, r3, #1
 8004420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004422:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00f      	beq.n	800444c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	3310      	adds	r3, #16
 8004430:	4618      	mov	r0, r3
 8004432:	f000 ff17 	bl	8005264 <xTaskRemoveFromEventList>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800443c:	4b3c      	ldr	r3, [pc, #240]	@ (8004530 <xQueueReceive+0x1c0>)
 800443e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800444c:	f001 ff06 	bl	800625c <vPortExitCritical>
				return pdPASS;
 8004450:	2301      	movs	r3, #1
 8004452:	e069      	b.n	8004528 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800445a:	f001 feff 	bl	800625c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800445e:	2300      	movs	r3, #0
 8004460:	e062      	b.n	8004528 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004468:	f107 0310 	add.w	r3, r7, #16
 800446c:	4618      	mov	r0, r3
 800446e:	f000 ffc1 	bl	80053f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004472:	2301      	movs	r3, #1
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004476:	f001 fef1 	bl	800625c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800447a:	f000 fc8f 	bl	8004d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800447e:	f001 febb 	bl	80061f8 <vPortEnterCritical>
 8004482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004484:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004488:	b25b      	sxtb	r3, r3
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d103      	bne.n	8004498 <xQueueReceive+0x128>
 8004490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800449e:	b25b      	sxtb	r3, r3
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d103      	bne.n	80044ae <xQueueReceive+0x13e>
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044ae:	f001 fed5 	bl	800625c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044b2:	1d3a      	adds	r2, r7, #4
 80044b4:	f107 0310 	add.w	r3, r7, #16
 80044b8:	4611      	mov	r1, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 ffb0 	bl	8005420 <xTaskCheckForTimeOut>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d123      	bne.n	800450e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044c8:	f000 f998 	bl	80047fc <prvIsQueueEmpty>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d017      	beq.n	8004502 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d4:	3324      	adds	r3, #36	@ 0x24
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fe32 	bl	8005144 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044e2:	f000 f939 	bl	8004758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044e6:	f000 fc67 	bl	8004db8 <xTaskResumeAll>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d189      	bne.n	8004404 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80044f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004530 <xQueueReceive+0x1c0>)
 80044f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	e780      	b.n	8004404 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004504:	f000 f928 	bl	8004758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004508:	f000 fc56 	bl	8004db8 <xTaskResumeAll>
 800450c:	e77a      	b.n	8004404 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800450e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004510:	f000 f922 	bl	8004758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004514:	f000 fc50 	bl	8004db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800451a:	f000 f96f 	bl	80047fc <prvIsQueueEmpty>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f43f af6f 	beq.w	8004404 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004526:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004528:	4618      	mov	r0, r3
 800452a:	3730      	adds	r7, #48	@ 0x30
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08e      	sub	sp, #56	@ 0x38
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10b      	bne.n	8004562 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	623b      	str	r3, [r7, #32]
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	e7fd      	b.n	800455e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <xQueueReceiveFromISR+0x3c>
 8004568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <xQueueReceiveFromISR+0x40>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <xQueueReceiveFromISR+0x42>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	61fb      	str	r3, [r7, #28]
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	e7fd      	b.n	800458e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004592:	f001 ff11 	bl	80063b8 <vPortValidateInterruptPriority>
	__asm volatile
 8004596:	f3ef 8211 	mrs	r2, BASEPRI
 800459a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	61ba      	str	r2, [r7, #24]
 80045ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80045ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d02f      	beq.n	800461e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045cc:	f000 f89e 	bl	800470c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	1e5a      	subs	r2, r3, #1
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80045d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d112      	bne.n	8004608 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d016      	beq.n	8004618 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	3310      	adds	r3, #16
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fe38 	bl	8005264 <xTaskRemoveFromEventList>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00e      	beq.n	8004618 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e007      	b.n	8004618 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800460c:	3301      	adds	r3, #1
 800460e:	b2db      	uxtb	r3, r3
 8004610:	b25a      	sxtb	r2, r3
 8004612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004618:	2301      	movs	r3, #1
 800461a:	637b      	str	r3, [r7, #52]	@ 0x34
 800461c:	e001      	b.n	8004622 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800461e:	2300      	movs	r3, #0
 8004620:	637b      	str	r3, [r7, #52]	@ 0x34
 8004622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004624:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f383 8811 	msr	BASEPRI, r3
}
 800462c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800462e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004630:	4618      	mov	r0, r3
 8004632:	3738      	adds	r7, #56	@ 0x38
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d14d      	bne.n	80046fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	4618      	mov	r0, r3
 8004664:	f001 f840 	bl	80056e8 <xTaskPriorityDisinherit>
 8004668:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	e043      	b.n	80046fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d119      	bne.n	80046ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6858      	ldr	r0, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	461a      	mov	r2, r3
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	f002 f930 	bl	80068e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	441a      	add	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d32b      	bcc.n	80046fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	e026      	b.n	80046fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68d8      	ldr	r0, [r3, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	461a      	mov	r2, r3
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	f002 f916 	bl	80068e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	425b      	negs	r3, r3
 80046c6:	441a      	add	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d207      	bcs.n	80046e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e0:	425b      	negs	r3, r3
 80046e2:	441a      	add	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d105      	bne.n	80046fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004702:	697b      	ldr	r3, [r7, #20]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d018      	beq.n	8004750 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	441a      	add	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	d303      	bcc.n	8004740 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68d9      	ldr	r1, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	461a      	mov	r2, r3
 800474a:	6838      	ldr	r0, [r7, #0]
 800474c:	f002 f8cc 	bl	80068e8 <memcpy>
	}
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004760:	f001 fd4a 	bl	80061f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800476a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800476c:	e011      	b.n	8004792 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	2b00      	cmp	r3, #0
 8004774:	d012      	beq.n	800479c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3324      	adds	r3, #36	@ 0x24
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fd72 	bl	8005264 <xTaskRemoveFromEventList>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004786:	f000 feaf 	bl	80054e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	3b01      	subs	r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	dce9      	bgt.n	800476e <prvUnlockQueue+0x16>
 800479a:	e000      	b.n	800479e <prvUnlockQueue+0x46>
					break;
 800479c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	22ff      	movs	r2, #255	@ 0xff
 80047a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047a6:	f001 fd59 	bl	800625c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047aa:	f001 fd25 	bl	80061f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047b6:	e011      	b.n	80047dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d012      	beq.n	80047e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3310      	adds	r3, #16
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fd4d 	bl	8005264 <xTaskRemoveFromEventList>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047d0:	f000 fe8a 	bl	80054e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047d4:	7bbb      	ldrb	r3, [r7, #14]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	dce9      	bgt.n	80047b8 <prvUnlockQueue+0x60>
 80047e4:	e000      	b.n	80047e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	22ff      	movs	r2, #255	@ 0xff
 80047ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80047f0:	f001 fd34 	bl	800625c <vPortExitCritical>
}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004804:	f001 fcf8 	bl	80061f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004810:	2301      	movs	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e001      	b.n	800481a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800481a:	f001 fd1f 	bl	800625c <vPortExitCritical>

	return xReturn;
 800481e:	68fb      	ldr	r3, [r7, #12]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004830:	f001 fce2 	bl	80061f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483c:	429a      	cmp	r2, r3
 800483e:	d102      	bne.n	8004846 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004840:	2301      	movs	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e001      	b.n	800484a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800484a:	f001 fd07 	bl	800625c <vPortExitCritical>

	return xReturn;
 800484e:	68fb      	ldr	r3, [r7, #12]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e014      	b.n	8004892 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004868:	4a0f      	ldr	r2, [pc, #60]	@ (80048a8 <vQueueAddToRegistry+0x50>)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004874:	490c      	ldr	r1, [pc, #48]	@ (80048a8 <vQueueAddToRegistry+0x50>)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800487e:	4a0a      	ldr	r2, [pc, #40]	@ (80048a8 <vQueueAddToRegistry+0x50>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800488a:	e006      	b.n	800489a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b07      	cmp	r3, #7
 8004896:	d9e7      	bls.n	8004868 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004898:	bf00      	nop
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	2000088c 	.word	0x2000088c

080048ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048bc:	f001 fc9c 	bl	80061f8 <vPortEnterCritical>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048c6:	b25b      	sxtb	r3, r3
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d103      	bne.n	80048d6 <vQueueWaitForMessageRestricted+0x2a>
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048dc:	b25b      	sxtb	r3, r3
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d103      	bne.n	80048ec <vQueueWaitForMessageRestricted+0x40>
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048ec:	f001 fcb6 	bl	800625c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3324      	adds	r3, #36	@ 0x24
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fc83 	bl	800520c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004906:	6978      	ldr	r0, [r7, #20]
 8004908:	f7ff ff26 	bl	8004758 <prvUnlockQueue>
	}
 800490c:	bf00      	nop
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08e      	sub	sp, #56	@ 0x38
 8004918:	af04      	add	r7, sp, #16
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	623b      	str	r3, [r7, #32]
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10b      	bne.n	800495e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	61fb      	str	r3, [r7, #28]
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	e7fd      	b.n	800495a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800495e:	235c      	movs	r3, #92	@ 0x5c
 8004960:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b5c      	cmp	r3, #92	@ 0x5c
 8004966:	d00b      	beq.n	8004980 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	61bb      	str	r3, [r7, #24]
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	e7fd      	b.n	800497c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004980:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01e      	beq.n	80049c6 <xTaskCreateStatic+0xb2>
 8004988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01b      	beq.n	80049c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800498e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049a0:	2300      	movs	r3, #0
 80049a2:	9303      	str	r3, [sp, #12]
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	9302      	str	r3, [sp, #8]
 80049a8:	f107 0314 	add.w	r3, r7, #20
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f850 	bl	8004a5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049c0:	f000 f8de 	bl	8004b80 <prvAddNewTaskToReadyList>
 80049c4:	e001      	b.n	80049ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049ca:	697b      	ldr	r3, [r7, #20]
	}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3728      	adds	r7, #40	@ 0x28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08c      	sub	sp, #48	@ 0x30
 80049d8:	af04      	add	r7, sp, #16
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 fd27 	bl	800643c <pvPortMalloc>
 80049ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00e      	beq.n	8004a14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049f6:	205c      	movs	r0, #92	@ 0x5c
 80049f8:	f001 fd20 	bl	800643c <pvPortMalloc>
 80049fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a0a:	e005      	b.n	8004a18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a0c:	6978      	ldr	r0, [r7, #20]
 8004a0e:	f001 fde3 	bl	80065d8 <vPortFree>
 8004a12:	e001      	b.n	8004a18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d017      	beq.n	8004a4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a26:	88fa      	ldrh	r2, [r7, #6]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9303      	str	r3, [sp, #12]
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	9302      	str	r3, [sp, #8]
 8004a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f80e 	bl	8004a5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a42:	69f8      	ldr	r0, [r7, #28]
 8004a44:	f000 f89c 	bl	8004b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e002      	b.n	8004a54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a54:	69bb      	ldr	r3, [r7, #24]
	}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b088      	sub	sp, #32
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	461a      	mov	r2, r3
 8004a76:	21a5      	movs	r1, #165	@ 0xa5
 8004a78:	f001 ff02 	bl	8006880 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a86:	3b01      	subs	r3, #1
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f023 0307 	bic.w	r3, r3, #7
 8004a94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	617b      	str	r3, [r7, #20]
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01f      	beq.n	8004afe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e012      	b.n	8004aea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	7819      	ldrb	r1, [r3, #0]
 8004acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3334      	adds	r3, #52	@ 0x34
 8004ad4:	460a      	mov	r2, r1
 8004ad6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d006      	beq.n	8004af2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2b0f      	cmp	r3, #15
 8004aee:	d9e9      	bls.n	8004ac4 <prvInitialiseNewTask+0x66>
 8004af0:	e000      	b.n	8004af4 <prvInitialiseNewTask+0x96>
			{
				break;
 8004af2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004afc:	e003      	b.n	8004b06 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b08:	2b37      	cmp	r3, #55	@ 0x37
 8004b0a:	d901      	bls.n	8004b10 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b0c:	2337      	movs	r3, #55	@ 0x37
 8004b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b14:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1e:	2200      	movs	r2, #0
 8004b20:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	3304      	adds	r3, #4
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff f85c 	bl	8003be4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2e:	3318      	adds	r3, #24
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff f857 	bl	8003be4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b4a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4e:	2200      	movs	r2, #0
 8004b50:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	69b8      	ldr	r0, [r7, #24]
 8004b60:	f001 fa18 	bl	8005f94 <pxPortInitialiseStack>
 8004b64:	4602      	mov	r2, r0
 8004b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b76:	bf00      	nop
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b88:	f001 fb36 	bl	80061f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	4a2c      	ldr	r2, [pc, #176]	@ (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b96:	4b2c      	ldr	r3, [pc, #176]	@ (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ba4:	4b27      	ldr	r3, [pc, #156]	@ (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d110      	bne.n	8004bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bac:	f000 fcc0 	bl	8005530 <prvInitialiseTaskLists>
 8004bb0:	e00d      	b.n	8004bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bb2:	4b26      	ldr	r3, [pc, #152]	@ (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bba:	4b23      	ldr	r3, [pc, #140]	@ (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d802      	bhi.n	8004bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bce:	4b20      	ldr	r3, [pc, #128]	@ (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <prvAddNewTaskToReadyList+0xd4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d903      	bls.n	8004bf4 <prvAddNewTaskToReadyList+0x74>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	4a18      	ldr	r2, [pc, #96]	@ (8004c54 <prvAddNewTaskToReadyList+0xd4>)
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4a15      	ldr	r2, [pc, #84]	@ (8004c58 <prvAddNewTaskToReadyList+0xd8>)
 8004c02:	441a      	add	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7fe fff7 	bl	8003bfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c10:	f001 fb24 	bl	800625c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c14:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00e      	beq.n	8004c3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d207      	bcs.n	8004c3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <prvAddNewTaskToReadyList+0xdc>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000da0 	.word	0x20000da0
 8004c48:	200008cc 	.word	0x200008cc
 8004c4c:	20000dac 	.word	0x20000dac
 8004c50:	20000dbc 	.word	0x20000dbc
 8004c54:	20000da8 	.word	0x20000da8
 8004c58:	200008d0 	.word	0x200008d0
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d018      	beq.n	8004ca4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c72:	4b14      	ldr	r3, [pc, #80]	@ (8004cc4 <vTaskDelay+0x64>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <vTaskDelay+0x32>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	60bb      	str	r3, [r7, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	e7fd      	b.n	8004c8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c92:	f000 f883 	bl	8004d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c96:	2100      	movs	r1, #0
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fdad 	bl	80057f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c9e:	f000 f88b 	bl	8004db8 <xTaskResumeAll>
 8004ca2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d107      	bne.n	8004cba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004caa:	4b07      	ldr	r3, [pc, #28]	@ (8004cc8 <vTaskDelay+0x68>)
 8004cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000dc8 	.word	0x20000dc8
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	@ 0x28
 8004cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cda:	463a      	mov	r2, r7
 8004cdc:	1d39      	adds	r1, r7, #4
 8004cde:	f107 0308 	add.w	r3, r7, #8
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe fd34 	bl	8003750 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	9202      	str	r2, [sp, #8]
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	460a      	mov	r2, r1
 8004cfa:	4922      	ldr	r1, [pc, #136]	@ (8004d84 <vTaskStartScheduler+0xb8>)
 8004cfc:	4822      	ldr	r0, [pc, #136]	@ (8004d88 <vTaskStartScheduler+0xbc>)
 8004cfe:	f7ff fe09 	bl	8004914 <xTaskCreateStatic>
 8004d02:	4603      	mov	r3, r0
 8004d04:	4a21      	ldr	r2, [pc, #132]	@ (8004d8c <vTaskStartScheduler+0xc0>)
 8004d06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d08:	4b20      	ldr	r3, [pc, #128]	@ (8004d8c <vTaskStartScheduler+0xc0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d10:	2301      	movs	r3, #1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e001      	b.n	8004d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d102      	bne.n	8004d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d20:	f000 fdbe 	bl	80058a0 <xTimerCreateTimerTask>
 8004d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d116      	bne.n	8004d5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	613b      	str	r3, [r7, #16]
}
 8004d3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d40:	4b13      	ldr	r3, [pc, #76]	@ (8004d90 <vTaskStartScheduler+0xc4>)
 8004d42:	f04f 32ff 	mov.w	r2, #4294967295
 8004d46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d48:	4b12      	ldr	r3, [pc, #72]	@ (8004d94 <vTaskStartScheduler+0xc8>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d4e:	4b12      	ldr	r3, [pc, #72]	@ (8004d98 <vTaskStartScheduler+0xcc>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d54:	f001 f9ac 	bl	80060b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d58:	e00f      	b.n	8004d7a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d10b      	bne.n	8004d7a <vTaskStartScheduler+0xae>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	60fb      	str	r3, [r7, #12]
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	e7fd      	b.n	8004d76 <vTaskStartScheduler+0xaa>
}
 8004d7a:	bf00      	nop
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	080072a0 	.word	0x080072a0
 8004d88:	08005501 	.word	0x08005501
 8004d8c:	20000dc4 	.word	0x20000dc4
 8004d90:	20000dc0 	.word	0x20000dc0
 8004d94:	20000dac 	.word	0x20000dac
 8004d98:	20000da4 	.word	0x20000da4

08004d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004da0:	4b04      	ldr	r3, [pc, #16]	@ (8004db4 <vTaskSuspendAll+0x18>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	4a03      	ldr	r2, [pc, #12]	@ (8004db4 <vTaskSuspendAll+0x18>)
 8004da8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000dc8 	.word	0x20000dc8

08004db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dc6:	4b42      	ldr	r3, [pc, #264]	@ (8004ed0 <xTaskResumeAll+0x118>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <xTaskResumeAll+0x2e>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	603b      	str	r3, [r7, #0]
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	e7fd      	b.n	8004de2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004de6:	f001 fa07 	bl	80061f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dea:	4b39      	ldr	r3, [pc, #228]	@ (8004ed0 <xTaskResumeAll+0x118>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	4a37      	ldr	r2, [pc, #220]	@ (8004ed0 <xTaskResumeAll+0x118>)
 8004df2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004df4:	4b36      	ldr	r3, [pc, #216]	@ (8004ed0 <xTaskResumeAll+0x118>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d162      	bne.n	8004ec2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dfc:	4b35      	ldr	r3, [pc, #212]	@ (8004ed4 <xTaskResumeAll+0x11c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05e      	beq.n	8004ec2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e04:	e02f      	b.n	8004e66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e06:	4b34      	ldr	r3, [pc, #208]	@ (8004ed8 <xTaskResumeAll+0x120>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3318      	adds	r3, #24
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe ff50 	bl	8003cb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fe ff4b 	bl	8003cb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e26:	4b2d      	ldr	r3, [pc, #180]	@ (8004edc <xTaskResumeAll+0x124>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d903      	bls.n	8004e36 <xTaskResumeAll+0x7e>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	4a2a      	ldr	r2, [pc, #168]	@ (8004edc <xTaskResumeAll+0x124>)
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a27      	ldr	r2, [pc, #156]	@ (8004ee0 <xTaskResumeAll+0x128>)
 8004e44:	441a      	add	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f7fe fed6 	bl	8003bfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e56:	4b23      	ldr	r3, [pc, #140]	@ (8004ee4 <xTaskResumeAll+0x12c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004e60:	4b21      	ldr	r3, [pc, #132]	@ (8004ee8 <xTaskResumeAll+0x130>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e66:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed8 <xTaskResumeAll+0x120>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1cb      	bne.n	8004e06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e74:	f000 fbfa 	bl	800566c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e78:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <xTaskResumeAll+0x134>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e84:	f000 f846 	bl	8004f14 <xTaskIncrementTick>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004e8e:	4b16      	ldr	r3, [pc, #88]	@ (8004ee8 <xTaskResumeAll+0x130>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f1      	bne.n	8004e84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004ea0:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <xTaskResumeAll+0x134>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ea6:	4b10      	ldr	r3, [pc, #64]	@ (8004ee8 <xTaskResumeAll+0x130>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef0 <xTaskResumeAll+0x138>)
 8004eb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ec2:	f001 f9cb 	bl	800625c <vPortExitCritical>

	return xAlreadyYielded;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000dc8 	.word	0x20000dc8
 8004ed4:	20000da0 	.word	0x20000da0
 8004ed8:	20000d60 	.word	0x20000d60
 8004edc:	20000da8 	.word	0x20000da8
 8004ee0:	200008d0 	.word	0x200008d0
 8004ee4:	200008cc 	.word	0x200008cc
 8004ee8:	20000db4 	.word	0x20000db4
 8004eec:	20000db0 	.word	0x20000db0
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <xTaskGetTickCount+0x1c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f00:	687b      	ldr	r3, [r7, #4]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	20000da4 	.word	0x20000da4

08004f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800505c <xTaskIncrementTick+0x148>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f040 8090 	bne.w	8005048 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f28:	4b4d      	ldr	r3, [pc, #308]	@ (8005060 <xTaskIncrementTick+0x14c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f30:	4a4b      	ldr	r2, [pc, #300]	@ (8005060 <xTaskIncrementTick+0x14c>)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d121      	bne.n	8004f80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f3c:	4b49      	ldr	r3, [pc, #292]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	603b      	str	r3, [r7, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <xTaskIncrementTick+0x46>
 8004f5e:	4b41      	ldr	r3, [pc, #260]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	4b40      	ldr	r3, [pc, #256]	@ (8005068 <xTaskIncrementTick+0x154>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3e      	ldr	r2, [pc, #248]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4a3e      	ldr	r2, [pc, #248]	@ (8005068 <xTaskIncrementTick+0x154>)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	4b3e      	ldr	r3, [pc, #248]	@ (800506c <xTaskIncrementTick+0x158>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3301      	adds	r3, #1
 8004f78:	4a3c      	ldr	r2, [pc, #240]	@ (800506c <xTaskIncrementTick+0x158>)
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	f000 fb76 	bl	800566c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f80:	4b3b      	ldr	r3, [pc, #236]	@ (8005070 <xTaskIncrementTick+0x15c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d349      	bcc.n	800501e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8a:	4b36      	ldr	r3, [pc, #216]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f94:	4b36      	ldr	r3, [pc, #216]	@ (8005070 <xTaskIncrementTick+0x15c>)
 8004f96:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9a:	601a      	str	r2, [r3, #0]
					break;
 8004f9c:	e03f      	b.n	800501e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9e:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d203      	bcs.n	8004fbe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8005070 <xTaskIncrementTick+0x15c>)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fbc:	e02f      	b.n	800501e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe fe78 	bl	8003cb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	3318      	adds	r3, #24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe fe6f 	bl	8003cb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fde:	4b25      	ldr	r3, [pc, #148]	@ (8005074 <xTaskIncrementTick+0x160>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d903      	bls.n	8004fee <xTaskIncrementTick+0xda>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	4a22      	ldr	r2, [pc, #136]	@ (8005074 <xTaskIncrementTick+0x160>)
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8005078 <xTaskIncrementTick+0x164>)
 8004ffc:	441a      	add	r2, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3304      	adds	r3, #4
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7fe fdfa 	bl	8003bfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500e:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <xTaskIncrementTick+0x168>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	429a      	cmp	r2, r3
 8005016:	d3b8      	bcc.n	8004f8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800501c:	e7b5      	b.n	8004f8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800501e:	4b17      	ldr	r3, [pc, #92]	@ (800507c <xTaskIncrementTick+0x168>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005024:	4914      	ldr	r1, [pc, #80]	@ (8005078 <xTaskIncrementTick+0x164>)
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d901      	bls.n	800503a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005036:	2301      	movs	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800503a:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <xTaskIncrementTick+0x16c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005042:	2301      	movs	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e004      	b.n	8005052 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005048:	4b0e      	ldr	r3, [pc, #56]	@ (8005084 <xTaskIncrementTick+0x170>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	4a0d      	ldr	r2, [pc, #52]	@ (8005084 <xTaskIncrementTick+0x170>)
 8005050:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005052:	697b      	ldr	r3, [r7, #20]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000dc8 	.word	0x20000dc8
 8005060:	20000da4 	.word	0x20000da4
 8005064:	20000d58 	.word	0x20000d58
 8005068:	20000d5c 	.word	0x20000d5c
 800506c:	20000db8 	.word	0x20000db8
 8005070:	20000dc0 	.word	0x20000dc0
 8005074:	20000da8 	.word	0x20000da8
 8005078:	200008d0 	.word	0x200008d0
 800507c:	200008cc 	.word	0x200008cc
 8005080:	20000db4 	.word	0x20000db4
 8005084:	20000db0 	.word	0x20000db0

08005088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800508e:	4b28      	ldr	r3, [pc, #160]	@ (8005130 <vTaskSwitchContext+0xa8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005096:	4b27      	ldr	r3, [pc, #156]	@ (8005134 <vTaskSwitchContext+0xac>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800509c:	e042      	b.n	8005124 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800509e:	4b25      	ldr	r3, [pc, #148]	@ (8005134 <vTaskSwitchContext+0xac>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a4:	4b24      	ldr	r3, [pc, #144]	@ (8005138 <vTaskSwitchContext+0xb0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e011      	b.n	80050d0 <vTaskSwitchContext+0x48>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <vTaskSwitchContext+0x42>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	607b      	str	r3, [r7, #4]
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <vTaskSwitchContext+0x3e>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	491a      	ldr	r1, [pc, #104]	@ (800513c <vTaskSwitchContext+0xb4>)
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0e3      	beq.n	80050ac <vTaskSwitchContext+0x24>
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4a13      	ldr	r2, [pc, #76]	@ (800513c <vTaskSwitchContext+0xb4>)
 80050f0:	4413      	add	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3308      	adds	r3, #8
 8005106:	429a      	cmp	r2, r3
 8005108:	d104      	bne.n	8005114 <vTaskSwitchContext+0x8c>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	4a09      	ldr	r2, [pc, #36]	@ (8005140 <vTaskSwitchContext+0xb8>)
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	4a06      	ldr	r2, [pc, #24]	@ (8005138 <vTaskSwitchContext+0xb0>)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000dc8 	.word	0x20000dc8
 8005134:	20000db4 	.word	0x20000db4
 8005138:	20000da8 	.word	0x20000da8
 800513c:	200008d0 	.word	0x200008d0
 8005140:	200008cc 	.word	0x200008cc

08005144 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	60fb      	str	r3, [r7, #12]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800516c:	4b07      	ldr	r3, [pc, #28]	@ (800518c <vTaskPlaceOnEventList+0x48>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3318      	adds	r3, #24
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fe fd66 	bl	8003c46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800517a:	2101      	movs	r1, #1
 800517c:	6838      	ldr	r0, [r7, #0]
 800517e:	f000 fb3b 	bl	80057f8 <prvAddCurrentTaskToDelayedList>
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	200008cc 	.word	0x200008cc

08005190 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	617b      	str	r3, [r7, #20]
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	e7fd      	b.n	80051b6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80051ba:	4b12      	ldr	r3, [pc, #72]	@ (8005204 <vTaskPlaceOnUnorderedEventList+0x74>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10b      	bne.n	80051da <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	613b      	str	r3, [r7, #16]
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	e7fd      	b.n	80051d6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80051da:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <vTaskPlaceOnUnorderedEventList+0x78>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80051e4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051e6:	4b08      	ldr	r3, [pc, #32]	@ (8005208 <vTaskPlaceOnUnorderedEventList+0x78>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3318      	adds	r3, #24
 80051ec:	4619      	mov	r1, r3
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7fe fd05 	bl	8003bfe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051f4:	2101      	movs	r1, #1
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fafe 	bl	80057f8 <prvAddCurrentTaskToDelayedList>
}
 80051fc:	bf00      	nop
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000dc8 	.word	0x20000dc8
 8005208:	200008cc 	.word	0x200008cc

0800520c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	617b      	str	r3, [r7, #20]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <vTaskPlaceOnEventListRestricted+0x54>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3318      	adds	r3, #24
 800523c:	4619      	mov	r1, r3
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7fe fcdd 	bl	8003bfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800524a:	f04f 33ff 	mov.w	r3, #4294967295
 800524e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	68b8      	ldr	r0, [r7, #8]
 8005254:	f000 fad0 	bl	80057f8 <prvAddCurrentTaskToDelayedList>
	}
 8005258:	bf00      	nop
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	200008cc 	.word	0x200008cc

08005264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	60fb      	str	r3, [r7, #12]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3318      	adds	r3, #24
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fd0e 	bl	8003cb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800529c:	4b1d      	ldr	r3, [pc, #116]	@ (8005314 <xTaskRemoveFromEventList+0xb0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11d      	bne.n	80052e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fe fd05 	bl	8003cb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b2:	4b19      	ldr	r3, [pc, #100]	@ (8005318 <xTaskRemoveFromEventList+0xb4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d903      	bls.n	80052c2 <xTaskRemoveFromEventList+0x5e>
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <xTaskRemoveFromEventList+0xb4>)
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4a13      	ldr	r2, [pc, #76]	@ (800531c <xTaskRemoveFromEventList+0xb8>)
 80052d0:	441a      	add	r2, r3
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7fe fc90 	bl	8003bfe <vListInsertEnd>
 80052de:	e005      	b.n	80052ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3318      	adds	r3, #24
 80052e4:	4619      	mov	r1, r3
 80052e6:	480e      	ldr	r0, [pc, #56]	@ (8005320 <xTaskRemoveFromEventList+0xbc>)
 80052e8:	f7fe fc89 	bl	8003bfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <xTaskRemoveFromEventList+0xc0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d905      	bls.n	8005306 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052fa:	2301      	movs	r3, #1
 80052fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <xTaskRemoveFromEventList+0xc4>)
 8005300:	2201      	movs	r2, #1
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e001      	b.n	800530a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800530a:	697b      	ldr	r3, [r7, #20]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000dc8 	.word	0x20000dc8
 8005318:	20000da8 	.word	0x20000da8
 800531c:	200008d0 	.word	0x200008d0
 8005320:	20000d60 	.word	0x20000d60
 8005324:	200008cc 	.word	0x200008cc
 8005328:	20000db4 	.word	0x20000db4

0800532c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005336:	4b2a      	ldr	r3, [pc, #168]	@ (80053e0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10b      	bne.n	8005356 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	613b      	str	r3, [r7, #16]
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	e7fd      	b.n	8005352 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60fb      	str	r3, [r7, #12]
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fe fc97 	bl	8003cb8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	3304      	adds	r3, #4
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe fc92 	bl	8003cb8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005398:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d903      	bls.n	80053a8 <vTaskRemoveFromUnorderedEventList+0x7c>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	4a0f      	ldr	r2, [pc, #60]	@ (80053e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4a0c      	ldr	r2, [pc, #48]	@ (80053e8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80053b6:	441a      	add	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f7fe fc1d 	bl	8003bfe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c8:	4b08      	ldr	r3, [pc, #32]	@ (80053ec <vTaskRemoveFromUnorderedEventList+0xc0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d902      	bls.n	80053d8 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80053d2:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
	}
}
 80053d8:	bf00      	nop
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000dc8 	.word	0x20000dc8
 80053e4:	20000da8 	.word	0x20000da8
 80053e8:	200008d0 	.word	0x200008d0
 80053ec:	200008cc 	.word	0x200008cc
 80053f0:	20000db4 	.word	0x20000db4

080053f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053fc:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <vTaskInternalSetTimeOutState+0x24>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005404:	4b05      	ldr	r3, [pc, #20]	@ (800541c <vTaskInternalSetTimeOutState+0x28>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	605a      	str	r2, [r3, #4]
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	20000db8 	.word	0x20000db8
 800541c:	20000da4 	.word	0x20000da4

08005420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	613b      	str	r3, [r7, #16]
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	e7fd      	b.n	8005444 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10b      	bne.n	8005466 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	60fb      	str	r3, [r7, #12]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005466:	f000 fec7 	bl	80061f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800546a:	4b1d      	ldr	r3, [pc, #116]	@ (80054e0 <xTaskCheckForTimeOut+0xc0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d102      	bne.n	800548a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005484:	2300      	movs	r3, #0
 8005486:	61fb      	str	r3, [r7, #28]
 8005488:	e023      	b.n	80054d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b15      	ldr	r3, [pc, #84]	@ (80054e4 <xTaskCheckForTimeOut+0xc4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d007      	beq.n	80054a6 <xTaskCheckForTimeOut+0x86>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	429a      	cmp	r2, r3
 800549e:	d302      	bcc.n	80054a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054a0:	2301      	movs	r3, #1
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	e015      	b.n	80054d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d20b      	bcs.n	80054c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	1ad2      	subs	r2, r2, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff ff99 	bl	80053f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	e004      	b.n	80054d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054ce:	2301      	movs	r3, #1
 80054d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054d2:	f000 fec3 	bl	800625c <vPortExitCritical>

	return xReturn;
 80054d6:	69fb      	ldr	r3, [r7, #28]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20000da4 	.word	0x20000da4
 80054e4:	20000db8 	.word	0x20000db8

080054e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054ec:	4b03      	ldr	r3, [pc, #12]	@ (80054fc <vTaskMissedYield+0x14>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
}
 80054f2:	bf00      	nop
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20000db4 	.word	0x20000db4

08005500 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005508:	f000 f852 	bl	80055b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800550c:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <prvIdleTask+0x28>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d9f9      	bls.n	8005508 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005514:	4b05      	ldr	r3, [pc, #20]	@ (800552c <prvIdleTask+0x2c>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005524:	e7f0      	b.n	8005508 <prvIdleTask+0x8>
 8005526:	bf00      	nop
 8005528:	200008d0 	.word	0x200008d0
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005536:	2300      	movs	r3, #0
 8005538:	607b      	str	r3, [r7, #4]
 800553a:	e00c      	b.n	8005556 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4a12      	ldr	r2, [pc, #72]	@ (8005590 <prvInitialiseTaskLists+0x60>)
 8005548:	4413      	add	r3, r2
 800554a:	4618      	mov	r0, r3
 800554c:	f7fe fb2a 	bl	8003ba4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3301      	adds	r3, #1
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b37      	cmp	r3, #55	@ 0x37
 800555a:	d9ef      	bls.n	800553c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800555c:	480d      	ldr	r0, [pc, #52]	@ (8005594 <prvInitialiseTaskLists+0x64>)
 800555e:	f7fe fb21 	bl	8003ba4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005562:	480d      	ldr	r0, [pc, #52]	@ (8005598 <prvInitialiseTaskLists+0x68>)
 8005564:	f7fe fb1e 	bl	8003ba4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005568:	480c      	ldr	r0, [pc, #48]	@ (800559c <prvInitialiseTaskLists+0x6c>)
 800556a:	f7fe fb1b 	bl	8003ba4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800556e:	480c      	ldr	r0, [pc, #48]	@ (80055a0 <prvInitialiseTaskLists+0x70>)
 8005570:	f7fe fb18 	bl	8003ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005574:	480b      	ldr	r0, [pc, #44]	@ (80055a4 <prvInitialiseTaskLists+0x74>)
 8005576:	f7fe fb15 	bl	8003ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800557a:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <prvInitialiseTaskLists+0x78>)
 800557c:	4a05      	ldr	r2, [pc, #20]	@ (8005594 <prvInitialiseTaskLists+0x64>)
 800557e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005580:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <prvInitialiseTaskLists+0x7c>)
 8005582:	4a05      	ldr	r2, [pc, #20]	@ (8005598 <prvInitialiseTaskLists+0x68>)
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	200008d0 	.word	0x200008d0
 8005594:	20000d30 	.word	0x20000d30
 8005598:	20000d44 	.word	0x20000d44
 800559c:	20000d60 	.word	0x20000d60
 80055a0:	20000d74 	.word	0x20000d74
 80055a4:	20000d8c 	.word	0x20000d8c
 80055a8:	20000d58 	.word	0x20000d58
 80055ac:	20000d5c 	.word	0x20000d5c

080055b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055b6:	e019      	b.n	80055ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055b8:	f000 fe1e 	bl	80061f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055bc:	4b10      	ldr	r3, [pc, #64]	@ (8005600 <prvCheckTasksWaitingTermination+0x50>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fb75 	bl	8003cb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005604 <prvCheckTasksWaitingTermination+0x54>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005604 <prvCheckTasksWaitingTermination+0x54>)
 80055d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <prvCheckTasksWaitingTermination+0x58>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3b01      	subs	r3, #1
 80055de:	4a0a      	ldr	r2, [pc, #40]	@ (8005608 <prvCheckTasksWaitingTermination+0x58>)
 80055e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055e2:	f000 fe3b 	bl	800625c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f810 	bl	800560c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055ec:	4b06      	ldr	r3, [pc, #24]	@ (8005608 <prvCheckTasksWaitingTermination+0x58>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e1      	bne.n	80055b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000d74 	.word	0x20000d74
 8005604:	20000da0 	.word	0x20000da0
 8005608:	20000d88 	.word	0x20000d88

0800560c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800561a:	2b00      	cmp	r3, #0
 800561c:	d108      	bne.n	8005630 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005622:	4618      	mov	r0, r3
 8005624:	f000 ffd8 	bl	80065d8 <vPortFree>
				vPortFree( pxTCB );
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 ffd5 	bl	80065d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800562e:	e019      	b.n	8005664 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005636:	2b01      	cmp	r3, #1
 8005638:	d103      	bne.n	8005642 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 ffcc 	bl	80065d8 <vPortFree>
	}
 8005640:	e010      	b.n	8005664 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005648:	2b02      	cmp	r3, #2
 800564a:	d00b      	beq.n	8005664 <prvDeleteTCB+0x58>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	60fb      	str	r3, [r7, #12]
}
 800565e:	bf00      	nop
 8005660:	bf00      	nop
 8005662:	e7fd      	b.n	8005660 <prvDeleteTCB+0x54>
	}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005672:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <prvResetNextTaskUnblockTime+0x38>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d104      	bne.n	8005686 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800567c:	4b0a      	ldr	r3, [pc, #40]	@ (80056a8 <prvResetNextTaskUnblockTime+0x3c>)
 800567e:	f04f 32ff 	mov.w	r2, #4294967295
 8005682:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005684:	e008      	b.n	8005698 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005686:	4b07      	ldr	r3, [pc, #28]	@ (80056a4 <prvResetNextTaskUnblockTime+0x38>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a04      	ldr	r2, [pc, #16]	@ (80056a8 <prvResetNextTaskUnblockTime+0x3c>)
 8005696:	6013      	str	r3, [r2, #0]
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	20000d58 	.word	0x20000d58
 80056a8:	20000dc0 	.word	0x20000dc0

080056ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056b2:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <xTaskGetSchedulerState+0x34>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ba:	2301      	movs	r3, #1
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	e008      	b.n	80056d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056c0:	4b08      	ldr	r3, [pc, #32]	@ (80056e4 <xTaskGetSchedulerState+0x38>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056c8:	2302      	movs	r3, #2
 80056ca:	607b      	str	r3, [r7, #4]
 80056cc:	e001      	b.n	80056d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056ce:	2300      	movs	r3, #0
 80056d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056d2:	687b      	ldr	r3, [r7, #4]
	}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	20000dac 	.word	0x20000dac
 80056e4:	20000dc8 	.word	0x20000dc8

080056e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d058      	beq.n	80057b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056fe:	4b2f      	ldr	r3, [pc, #188]	@ (80057bc <xTaskPriorityDisinherit+0xd4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	429a      	cmp	r2, r3
 8005706:	d00b      	beq.n	8005720 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
}
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60bb      	str	r3, [r7, #8]
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005744:	1e5a      	subs	r2, r3, #1
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005752:	429a      	cmp	r2, r3
 8005754:	d02c      	beq.n	80057b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800575a:	2b00      	cmp	r3, #0
 800575c:	d128      	bne.n	80057b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	3304      	adds	r3, #4
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe faa8 	bl	8003cb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005774:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005780:	4b0f      	ldr	r3, [pc, #60]	@ (80057c0 <xTaskPriorityDisinherit+0xd8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d903      	bls.n	8005790 <xTaskPriorityDisinherit+0xa8>
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	4a0c      	ldr	r2, [pc, #48]	@ (80057c0 <xTaskPriorityDisinherit+0xd8>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4a09      	ldr	r2, [pc, #36]	@ (80057c4 <xTaskPriorityDisinherit+0xdc>)
 800579e:	441a      	add	r2, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f7fe fa29 	bl	8003bfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057ac:	2301      	movs	r3, #1
 80057ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057b0:	697b      	ldr	r3, [r7, #20]
	}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200008cc 	.word	0x200008cc
 80057c0:	20000da8 	.word	0x20000da8
 80057c4:	200008d0 	.word	0x200008d0

080057c8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80057ce:	4b09      	ldr	r3, [pc, #36]	@ (80057f4 <uxTaskResetEventItemValue+0x2c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d6:	4b07      	ldr	r3, [pc, #28]	@ (80057f4 <uxTaskResetEventItemValue+0x2c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057dc:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <uxTaskResetEventItemValue+0x2c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80057e4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80057e6:	687b      	ldr	r3, [r7, #4]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	200008cc 	.word	0x200008cc

080057f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005802:	4b21      	ldr	r3, [pc, #132]	@ (8005888 <prvAddCurrentTaskToDelayedList+0x90>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005808:	4b20      	ldr	r3, [pc, #128]	@ (800588c <prvAddCurrentTaskToDelayedList+0x94>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3304      	adds	r3, #4
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fa52 	bl	8003cb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d10a      	bne.n	8005832 <prvAddCurrentTaskToDelayedList+0x3a>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005822:	4b1a      	ldr	r3, [pc, #104]	@ (800588c <prvAddCurrentTaskToDelayedList+0x94>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4819      	ldr	r0, [pc, #100]	@ (8005890 <prvAddCurrentTaskToDelayedList+0x98>)
 800582c:	f7fe f9e7 	bl	8003bfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005830:	e026      	b.n	8005880 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4413      	add	r3, r2
 8005838:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800583a:	4b14      	ldr	r3, [pc, #80]	@ (800588c <prvAddCurrentTaskToDelayedList+0x94>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	429a      	cmp	r2, r3
 8005848:	d209      	bcs.n	800585e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800584a:	4b12      	ldr	r3, [pc, #72]	@ (8005894 <prvAddCurrentTaskToDelayedList+0x9c>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b0f      	ldr	r3, [pc, #60]	@ (800588c <prvAddCurrentTaskToDelayedList+0x94>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3304      	adds	r3, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f7fe f9f5 	bl	8003c46 <vListInsert>
}
 800585c:	e010      	b.n	8005880 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800585e:	4b0e      	ldr	r3, [pc, #56]	@ (8005898 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b0a      	ldr	r3, [pc, #40]	@ (800588c <prvAddCurrentTaskToDelayedList+0x94>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3304      	adds	r3, #4
 8005868:	4619      	mov	r1, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f7fe f9eb 	bl	8003c46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005870:	4b0a      	ldr	r3, [pc, #40]	@ (800589c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	429a      	cmp	r2, r3
 8005878:	d202      	bcs.n	8005880 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800587a:	4a08      	ldr	r2, [pc, #32]	@ (800589c <prvAddCurrentTaskToDelayedList+0xa4>)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6013      	str	r3, [r2, #0]
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000da4 	.word	0x20000da4
 800588c:	200008cc 	.word	0x200008cc
 8005890:	20000d8c 	.word	0x20000d8c
 8005894:	20000d5c 	.word	0x20000d5c
 8005898:	20000d58 	.word	0x20000d58
 800589c:	20000dc0 	.word	0x20000dc0

080058a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	@ 0x28
 80058a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058aa:	f000 fb13 	bl	8005ed4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80058ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005924 <xTimerCreateTimerTask+0x84>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d021      	beq.n	80058fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80058be:	1d3a      	adds	r2, r7, #4
 80058c0:	f107 0108 	add.w	r1, r7, #8
 80058c4:	f107 030c 	add.w	r3, r7, #12
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fd ff5b 	bl	8003784 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	9202      	str	r2, [sp, #8]
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	2302      	movs	r3, #2
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	2300      	movs	r3, #0
 80058de:	460a      	mov	r2, r1
 80058e0:	4911      	ldr	r1, [pc, #68]	@ (8005928 <xTimerCreateTimerTask+0x88>)
 80058e2:	4812      	ldr	r0, [pc, #72]	@ (800592c <xTimerCreateTimerTask+0x8c>)
 80058e4:	f7ff f816 	bl	8004914 <xTaskCreateStatic>
 80058e8:	4603      	mov	r3, r0
 80058ea:	4a11      	ldr	r2, [pc, #68]	@ (8005930 <xTimerCreateTimerTask+0x90>)
 80058ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058ee:	4b10      	ldr	r3, [pc, #64]	@ (8005930 <xTimerCreateTimerTask+0x90>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058f6:	2301      	movs	r3, #1
 80058f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10b      	bne.n	8005918 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	613b      	str	r3, [r7, #16]
}
 8005912:	bf00      	nop
 8005914:	bf00      	nop
 8005916:	e7fd      	b.n	8005914 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005918:	697b      	ldr	r3, [r7, #20]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20000dfc 	.word	0x20000dfc
 8005928:	080072a8 	.word	0x080072a8
 800592c:	08005a6d 	.word	0x08005a6d
 8005930:	20000e00 	.word	0x20000e00

08005934 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	@ 0x28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005942:	2300      	movs	r3, #0
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <xTimerGenericCommand+0x30>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	623b      	str	r3, [r7, #32]
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	e7fd      	b.n	8005960 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005964:	4b19      	ldr	r3, [pc, #100]	@ (80059cc <xTimerGenericCommand+0x98>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d02a      	beq.n	80059c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b05      	cmp	r3, #5
 800597c:	dc18      	bgt.n	80059b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800597e:	f7ff fe95 	bl	80056ac <xTaskGetSchedulerState>
 8005982:	4603      	mov	r3, r0
 8005984:	2b02      	cmp	r3, #2
 8005986:	d109      	bne.n	800599c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005988:	4b10      	ldr	r3, [pc, #64]	@ (80059cc <xTimerGenericCommand+0x98>)
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	f107 0110 	add.w	r1, r7, #16
 8005990:	2300      	movs	r3, #0
 8005992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005994:	f7fe fb4c 	bl	8004030 <xQueueGenericSend>
 8005998:	6278      	str	r0, [r7, #36]	@ 0x24
 800599a:	e012      	b.n	80059c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800599c:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <xTimerGenericCommand+0x98>)
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	f107 0110 	add.w	r1, r7, #16
 80059a4:	2300      	movs	r3, #0
 80059a6:	2200      	movs	r2, #0
 80059a8:	f7fe fb42 	bl	8004030 <xQueueGenericSend>
 80059ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80059ae:	e008      	b.n	80059c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059b0:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <xTimerGenericCommand+0x98>)
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	f107 0110 	add.w	r1, r7, #16
 80059b8:	2300      	movs	r3, #0
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	f7fe fc3a 	bl	8004234 <xQueueGenericSendFromISR>
 80059c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3728      	adds	r7, #40	@ 0x28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20000dfc 	.word	0x20000dfc

080059d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059da:	4b23      	ldr	r3, [pc, #140]	@ (8005a68 <prvProcessExpiredTimer+0x98>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fe f965 	bl	8003cb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d023      	beq.n	8005a44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	18d1      	adds	r1, r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	6978      	ldr	r0, [r7, #20]
 8005a0a:	f000 f8d5 	bl	8005bb8 <prvInsertTimerInActiveList>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d020      	beq.n	8005a56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a14:	2300      	movs	r3, #0
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	6978      	ldr	r0, [r7, #20]
 8005a20:	f7ff ff88 	bl	8005934 <xTimerGenericCommand>
 8005a24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d114      	bne.n	8005a56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60fb      	str	r3, [r7, #12]
}
 8005a3e:	bf00      	nop
 8005a40:	bf00      	nop
 8005a42:	e7fd      	b.n	8005a40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	6978      	ldr	r0, [r7, #20]
 8005a5c:	4798      	blx	r3
}
 8005a5e:	bf00      	nop
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000df4 	.word	0x20000df4

08005a6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a74:	f107 0308 	add.w	r3, r7, #8
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 f859 	bl	8005b30 <prvGetNextExpireTime>
 8005a7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4619      	mov	r1, r3
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f805 	bl	8005a94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a8a:	f000 f8d7 	bl	8005c3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a8e:	bf00      	nop
 8005a90:	e7f0      	b.n	8005a74 <prvTimerTask+0x8>
	...

08005a94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a9e:	f7ff f97d 	bl	8004d9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aa2:	f107 0308 	add.w	r3, r7, #8
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f866 	bl	8005b78 <prvSampleTimeNow>
 8005aac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d130      	bne.n	8005b16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <prvProcessTimerOrBlockTask+0x3c>
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d806      	bhi.n	8005ad0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ac2:	f7ff f979 	bl	8004db8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ff81 	bl	80059d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ace:	e024      	b.n	8005b1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ad6:	4b13      	ldr	r3, [pc, #76]	@ (8005b24 <prvProcessTimerOrBlockTask+0x90>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <prvProcessTimerOrBlockTask+0x50>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <prvProcessTimerOrBlockTask+0x52>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b28 <prvProcessTimerOrBlockTask+0x94>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	4619      	mov	r1, r3
 8005af6:	f7fe fed9 	bl	80048ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005afa:	f7ff f95d 	bl	8004db8 <xTaskResumeAll>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b04:	4b09      	ldr	r3, [pc, #36]	@ (8005b2c <prvProcessTimerOrBlockTask+0x98>)
 8005b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	f3bf 8f6f 	isb	sy
}
 8005b14:	e001      	b.n	8005b1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b16:	f7ff f94f 	bl	8004db8 <xTaskResumeAll>
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000df8 	.word	0x20000df8
 8005b28:	20000dfc 	.word	0x20000dfc
 8005b2c:	e000ed04 	.word	0xe000ed04

08005b30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b38:	4b0e      	ldr	r3, [pc, #56]	@ (8005b74 <prvGetNextExpireTime+0x44>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <prvGetNextExpireTime+0x16>
 8005b42:	2201      	movs	r2, #1
 8005b44:	e000      	b.n	8005b48 <prvGetNextExpireTime+0x18>
 8005b46:	2200      	movs	r2, #0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d105      	bne.n	8005b60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b54:	4b07      	ldr	r3, [pc, #28]	@ (8005b74 <prvGetNextExpireTime+0x44>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e001      	b.n	8005b64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b64:	68fb      	ldr	r3, [r7, #12]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000df4 	.word	0x20000df4

08005b78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b80:	f7ff f9b8 	bl	8004ef4 <xTaskGetTickCount>
 8005b84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <prvSampleTimeNow+0x3c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d205      	bcs.n	8005b9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b90:	f000 f93a 	bl	8005e08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e002      	b.n	8005ba2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ba2:	4a04      	ldr	r2, [pc, #16]	@ (8005bb4 <prvSampleTimeNow+0x3c>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000e04 	.word	0x20000e04

08005bb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d812      	bhi.n	8005c04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d302      	bcc.n	8005bf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005bec:	2301      	movs	r3, #1
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	e01b      	b.n	8005c2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bf2:	4b10      	ldr	r3, [pc, #64]	@ (8005c34 <prvInsertTimerInActiveList+0x7c>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f7fe f822 	bl	8003c46 <vListInsert>
 8005c02:	e012      	b.n	8005c2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d206      	bcs.n	8005c1a <prvInsertTimerInActiveList+0x62>
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d302      	bcc.n	8005c1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e007      	b.n	8005c2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c1a:	4b07      	ldr	r3, [pc, #28]	@ (8005c38 <prvInsertTimerInActiveList+0x80>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f7fe f80e 	bl	8003c46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c2a:	697b      	ldr	r3, [r7, #20]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000df8 	.word	0x20000df8
 8005c38:	20000df4 	.word	0x20000df4

08005c3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08e      	sub	sp, #56	@ 0x38
 8005c40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c42:	e0ce      	b.n	8005de2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	da19      	bge.n	8005c7e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c4a:	1d3b      	adds	r3, r7, #4
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	61fb      	str	r3, [r7, #28]
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	e7fd      	b.n	8005c6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c74:	6850      	ldr	r0, [r2, #4]
 8005c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c78:	6892      	ldr	r2, [r2, #8]
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f2c0 80ae 	blt.w	8005de2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c94:	3304      	adds	r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe f80e 	bl	8003cb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff ff6a 	bl	8005b78 <prvSampleTimeNow>
 8005ca4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b09      	cmp	r3, #9
 8005caa:	f200 8097 	bhi.w	8005ddc <prvProcessReceivedCommands+0x1a0>
 8005cae:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb4 <prvProcessReceivedCommands+0x78>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005cdd 	.word	0x08005cdd
 8005cbc:	08005cdd 	.word	0x08005cdd
 8005cc0:	08005d53 	.word	0x08005d53
 8005cc4:	08005d67 	.word	0x08005d67
 8005cc8:	08005db3 	.word	0x08005db3
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005cdd 	.word	0x08005cdd
 8005cd4:	08005d53 	.word	0x08005d53
 8005cd8:	08005d67 	.word	0x08005d67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	18d1      	adds	r1, r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cfc:	f7ff ff5c 	bl	8005bb8 <prvInsertTimerInActiveList>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d06c      	beq.n	8005de0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d061      	beq.n	8005de0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	441a      	add	r2, r3
 8005d24:	2300      	movs	r3, #0
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d2e:	f7ff fe01 	bl	8005934 <xTimerGenericCommand>
 8005d32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d152      	bne.n	8005de0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	61bb      	str	r3, [r7, #24]
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	e7fd      	b.n	8005d4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d58:	f023 0301 	bic.w	r3, r3, #1
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d64:	e03d      	b.n	8005de2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	617b      	str	r3, [r7, #20]
}
 8005d98:	bf00      	nop
 8005d9a:	bf00      	nop
 8005d9c:	e7fd      	b.n	8005d9a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	18d1      	adds	r1, r2, r3
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dac:	f7ff ff04 	bl	8005bb8 <prvInsertTimerInActiveList>
					break;
 8005db0:	e017      	b.n	8005de2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d103      	bne.n	8005dc8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dc2:	f000 fc09 	bl	80065d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005dc6:	e00c      	b.n	8005de2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005dda:	e002      	b.n	8005de2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005ddc:	bf00      	nop
 8005dde:	e000      	b.n	8005de2 <prvProcessReceivedCommands+0x1a6>
					break;
 8005de0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005de2:	4b08      	ldr	r3, [pc, #32]	@ (8005e04 <prvProcessReceivedCommands+0x1c8>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	1d39      	adds	r1, r7, #4
 8005de8:	2200      	movs	r2, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fe fac0 	bl	8004370 <xQueueReceive>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f47f af26 	bne.w	8005c44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	3730      	adds	r7, #48	@ 0x30
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000dfc 	.word	0x20000dfc

08005e08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e0e:	e049      	b.n	8005ea4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e10:	4b2e      	ldr	r3, [pc, #184]	@ (8005ecc <prvSwitchTimerLists+0xc4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8005ecc <prvSwitchTimerLists+0xc4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fd ff45 	bl	8003cb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02f      	beq.n	8005ea4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d90e      	bls.n	8005e74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e62:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <prvSwitchTimerLists+0xc4>)
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f7fd feea 	bl	8003c46 <vListInsert>
 8005e72:	e017      	b.n	8005ea4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e74:	2300      	movs	r3, #0
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7ff fd58 	bl	8005934 <xTimerGenericCommand>
 8005e84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	603b      	str	r3, [r7, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	e7fd      	b.n	8005ea0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ea4:	4b09      	ldr	r3, [pc, #36]	@ (8005ecc <prvSwitchTimerLists+0xc4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1b0      	bne.n	8005e10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005eae:	4b07      	ldr	r3, [pc, #28]	@ (8005ecc <prvSwitchTimerLists+0xc4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005eb4:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <prvSwitchTimerLists+0xc8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a04      	ldr	r2, [pc, #16]	@ (8005ecc <prvSwitchTimerLists+0xc4>)
 8005eba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ebc:	4a04      	ldr	r2, [pc, #16]	@ (8005ed0 <prvSwitchTimerLists+0xc8>)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	6013      	str	r3, [r2, #0]
}
 8005ec2:	bf00      	nop
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000df4 	.word	0x20000df4
 8005ed0:	20000df8 	.word	0x20000df8

08005ed4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005eda:	f000 f98d 	bl	80061f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ede:	4b15      	ldr	r3, [pc, #84]	@ (8005f34 <prvCheckForValidListAndQueue+0x60>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d120      	bne.n	8005f28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ee6:	4814      	ldr	r0, [pc, #80]	@ (8005f38 <prvCheckForValidListAndQueue+0x64>)
 8005ee8:	f7fd fe5c 	bl	8003ba4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005eec:	4813      	ldr	r0, [pc, #76]	@ (8005f3c <prvCheckForValidListAndQueue+0x68>)
 8005eee:	f7fd fe59 	bl	8003ba4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ef2:	4b13      	ldr	r3, [pc, #76]	@ (8005f40 <prvCheckForValidListAndQueue+0x6c>)
 8005ef4:	4a10      	ldr	r2, [pc, #64]	@ (8005f38 <prvCheckForValidListAndQueue+0x64>)
 8005ef6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ef8:	4b12      	ldr	r3, [pc, #72]	@ (8005f44 <prvCheckForValidListAndQueue+0x70>)
 8005efa:	4a10      	ldr	r2, [pc, #64]	@ (8005f3c <prvCheckForValidListAndQueue+0x68>)
 8005efc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005efe:	2300      	movs	r3, #0
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	4b11      	ldr	r3, [pc, #68]	@ (8005f48 <prvCheckForValidListAndQueue+0x74>)
 8005f04:	4a11      	ldr	r2, [pc, #68]	@ (8005f4c <prvCheckForValidListAndQueue+0x78>)
 8005f06:	2110      	movs	r1, #16
 8005f08:	200a      	movs	r0, #10
 8005f0a:	f7fd ff69 	bl	8003de0 <xQueueGenericCreateStatic>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4a08      	ldr	r2, [pc, #32]	@ (8005f34 <prvCheckForValidListAndQueue+0x60>)
 8005f12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f14:	4b07      	ldr	r3, [pc, #28]	@ (8005f34 <prvCheckForValidListAndQueue+0x60>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f1c:	4b05      	ldr	r3, [pc, #20]	@ (8005f34 <prvCheckForValidListAndQueue+0x60>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	490b      	ldr	r1, [pc, #44]	@ (8005f50 <prvCheckForValidListAndQueue+0x7c>)
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fc98 	bl	8004858 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f28:	f000 f998 	bl	800625c <vPortExitCritical>
}
 8005f2c:	bf00      	nop
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000dfc 	.word	0x20000dfc
 8005f38:	20000dcc 	.word	0x20000dcc
 8005f3c:	20000de0 	.word	0x20000de0
 8005f40:	20000df4 	.word	0x20000df4
 8005f44:	20000df8 	.word	0x20000df8
 8005f48:	20000ea8 	.word	0x20000ea8
 8005f4c:	20000e08 	.word	0x20000e08
 8005f50:	080072b0 	.word	0x080072b0

08005f54 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	@ 0x28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8005f62:	f06f 0301 	mvn.w	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f74:	4b06      	ldr	r3, [pc, #24]	@ (8005f90 <xTimerPendFunctionCallFromISR+0x3c>)
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	f107 0114 	add.w	r1, r7, #20
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	f7fe f958 	bl	8004234 <xQueueGenericSendFromISR>
 8005f84:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3728      	adds	r7, #40	@ 0x28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000dfc 	.word	0x20000dfc

08005f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3b04      	subs	r3, #4
 8005fa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3b04      	subs	r3, #4
 8005fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f023 0201 	bic.w	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3b04      	subs	r3, #4
 8005fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fc4:	4a0c      	ldr	r2, [pc, #48]	@ (8005ff8 <pxPortInitialiseStack+0x64>)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3b14      	subs	r3, #20
 8005fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3b04      	subs	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f06f 0202 	mvn.w	r2, #2
 8005fe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3b20      	subs	r3, #32
 8005fe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fea:	68fb      	ldr	r3, [r7, #12]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	08005ffd 	.word	0x08005ffd

08005ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006006:	4b13      	ldr	r3, [pc, #76]	@ (8006054 <prvTaskExitError+0x58>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d00b      	beq.n	8006028 <prvTaskExitError+0x2c>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <prvTaskExitError+0x28>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	60bb      	str	r3, [r7, #8]
}
 800603a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800603c:	bf00      	nop
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0fc      	beq.n	800603e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000010 	.word	0x20000010
	...

08006060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006060:	4b07      	ldr	r3, [pc, #28]	@ (8006080 <pxCurrentTCBConst2>)
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	6808      	ldr	r0, [r1, #0]
 8006066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	f380 8809 	msr	PSP, r0
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f04f 0000 	mov.w	r0, #0
 8006076:	f380 8811 	msr	BASEPRI, r0
 800607a:	4770      	bx	lr
 800607c:	f3af 8000 	nop.w

08006080 <pxCurrentTCBConst2>:
 8006080:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006088:	4808      	ldr	r0, [pc, #32]	@ (80060ac <prvPortStartFirstTask+0x24>)
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	6800      	ldr	r0, [r0, #0]
 800608e:	f380 8808 	msr	MSP, r0
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8814 	msr	CONTROL, r0
 800609a:	b662      	cpsie	i
 800609c:	b661      	cpsie	f
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	df00      	svc	0
 80060a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060aa:	bf00      	nop
 80060ac:	e000ed08 	.word	0xe000ed08

080060b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060b6:	4b47      	ldr	r3, [pc, #284]	@ (80061d4 <xPortStartScheduler+0x124>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a47      	ldr	r2, [pc, #284]	@ (80061d8 <xPortStartScheduler+0x128>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10b      	bne.n	80060d8 <xPortStartScheduler+0x28>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	613b      	str	r3, [r7, #16]
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060d8:	4b3e      	ldr	r3, [pc, #248]	@ (80061d4 <xPortStartScheduler+0x124>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a3f      	ldr	r2, [pc, #252]	@ (80061dc <xPortStartScheduler+0x12c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d10b      	bne.n	80060fa <xPortStartScheduler+0x4a>
	__asm volatile
 80060e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	60fb      	str	r3, [r7, #12]
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop
 80060f8:	e7fd      	b.n	80060f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060fa:	4b39      	ldr	r3, [pc, #228]	@ (80061e0 <xPortStartScheduler+0x130>)
 80060fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	22ff      	movs	r2, #255	@ 0xff
 800610a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800611c:	b2da      	uxtb	r2, r3
 800611e:	4b31      	ldr	r3, [pc, #196]	@ (80061e4 <xPortStartScheduler+0x134>)
 8006120:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006122:	4b31      	ldr	r3, [pc, #196]	@ (80061e8 <xPortStartScheduler+0x138>)
 8006124:	2207      	movs	r2, #7
 8006126:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006128:	e009      	b.n	800613e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800612a:	4b2f      	ldr	r3, [pc, #188]	@ (80061e8 <xPortStartScheduler+0x138>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3b01      	subs	r3, #1
 8006130:	4a2d      	ldr	r2, [pc, #180]	@ (80061e8 <xPortStartScheduler+0x138>)
 8006132:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	b2db      	uxtb	r3, r3
 800613c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006146:	2b80      	cmp	r3, #128	@ 0x80
 8006148:	d0ef      	beq.n	800612a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800614a:	4b27      	ldr	r3, [pc, #156]	@ (80061e8 <xPortStartScheduler+0x138>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f1c3 0307 	rsb	r3, r3, #7
 8006152:	2b04      	cmp	r3, #4
 8006154:	d00b      	beq.n	800616e <xPortStartScheduler+0xbe>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60bb      	str	r3, [r7, #8]
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	e7fd      	b.n	800616a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800616e:	4b1e      	ldr	r3, [pc, #120]	@ (80061e8 <xPortStartScheduler+0x138>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	4a1c      	ldr	r2, [pc, #112]	@ (80061e8 <xPortStartScheduler+0x138>)
 8006176:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006178:	4b1b      	ldr	r3, [pc, #108]	@ (80061e8 <xPortStartScheduler+0x138>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006180:	4a19      	ldr	r2, [pc, #100]	@ (80061e8 <xPortStartScheduler+0x138>)
 8006182:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	b2da      	uxtb	r2, r3
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800618c:	4b17      	ldr	r3, [pc, #92]	@ (80061ec <xPortStartScheduler+0x13c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a16      	ldr	r2, [pc, #88]	@ (80061ec <xPortStartScheduler+0x13c>)
 8006192:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006196:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006198:	4b14      	ldr	r3, [pc, #80]	@ (80061ec <xPortStartScheduler+0x13c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a13      	ldr	r2, [pc, #76]	@ (80061ec <xPortStartScheduler+0x13c>)
 800619e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80061a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061a4:	f000 f8da 	bl	800635c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061a8:	4b11      	ldr	r3, [pc, #68]	@ (80061f0 <xPortStartScheduler+0x140>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061ae:	f000 f8f9 	bl	80063a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061b2:	4b10      	ldr	r3, [pc, #64]	@ (80061f4 <xPortStartScheduler+0x144>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a0f      	ldr	r2, [pc, #60]	@ (80061f4 <xPortStartScheduler+0x144>)
 80061b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80061bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061be:	f7ff ff63 	bl	8006088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061c2:	f7fe ff61 	bl	8005088 <vTaskSwitchContext>
	prvTaskExitError();
 80061c6:	f7ff ff19 	bl	8005ffc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	e000ed00 	.word	0xe000ed00
 80061d8:	410fc271 	.word	0x410fc271
 80061dc:	410fc270 	.word	0x410fc270
 80061e0:	e000e400 	.word	0xe000e400
 80061e4:	20000ef8 	.word	0x20000ef8
 80061e8:	20000efc 	.word	0x20000efc
 80061ec:	e000ed20 	.word	0xe000ed20
 80061f0:	20000010 	.word	0x20000010
 80061f4:	e000ef34 	.word	0xe000ef34

080061f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	607b      	str	r3, [r7, #4]
}
 8006210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006212:	4b10      	ldr	r3, [pc, #64]	@ (8006254 <vPortEnterCritical+0x5c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3301      	adds	r3, #1
 8006218:	4a0e      	ldr	r2, [pc, #56]	@ (8006254 <vPortEnterCritical+0x5c>)
 800621a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800621c:	4b0d      	ldr	r3, [pc, #52]	@ (8006254 <vPortEnterCritical+0x5c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d110      	bne.n	8006246 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006224:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <vPortEnterCritical+0x60>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <vPortEnterCritical+0x4e>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	603b      	str	r3, [r7, #0]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <vPortEnterCritical+0x4a>
	}
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	20000010 	.word	0x20000010
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006262:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <vPortExitCritical+0x50>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10b      	bne.n	8006282 <vPortExitCritical+0x26>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	607b      	str	r3, [r7, #4]
}
 800627c:	bf00      	nop
 800627e:	bf00      	nop
 8006280:	e7fd      	b.n	800627e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006282:	4b0a      	ldr	r3, [pc, #40]	@ (80062ac <vPortExitCritical+0x50>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3b01      	subs	r3, #1
 8006288:	4a08      	ldr	r2, [pc, #32]	@ (80062ac <vPortExitCritical+0x50>)
 800628a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800628c:	4b07      	ldr	r3, [pc, #28]	@ (80062ac <vPortExitCritical+0x50>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d105      	bne.n	80062a0 <vPortExitCritical+0x44>
 8006294:	2300      	movs	r3, #0
 8006296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f383 8811 	msr	BASEPRI, r3
}
 800629e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	20000010 	.word	0x20000010

080062b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062b0:	f3ef 8009 	mrs	r0, PSP
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4b15      	ldr	r3, [pc, #84]	@ (8006310 <pxCurrentTCBConst>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f01e 0f10 	tst.w	lr, #16
 80062c0:	bf08      	it	eq
 80062c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	6010      	str	r0, [r2, #0]
 80062cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80062d4:	f380 8811 	msr	BASEPRI, r0
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f7fe fed2 	bl	8005088 <vTaskSwitchContext>
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	f380 8811 	msr	BASEPRI, r0
 80062ec:	bc09      	pop	{r0, r3}
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	6808      	ldr	r0, [r1, #0]
 80062f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f6:	f01e 0f10 	tst.w	lr, #16
 80062fa:	bf08      	it	eq
 80062fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006300:	f380 8809 	msr	PSP, r0
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst>:
 8006310:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
}
 8006330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006332:	f7fe fdef 	bl	8004f14 <xTaskIncrementTick>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800633c:	4b06      	ldr	r3, [pc, #24]	@ (8006358 <xPortSysTickHandler+0x40>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
}
 800634e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006360:	4b0b      	ldr	r3, [pc, #44]	@ (8006390 <vPortSetupTimerInterrupt+0x34>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006366:	4b0b      	ldr	r3, [pc, #44]	@ (8006394 <vPortSetupTimerInterrupt+0x38>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800636c:	4b0a      	ldr	r3, [pc, #40]	@ (8006398 <vPortSetupTimerInterrupt+0x3c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a0a      	ldr	r2, [pc, #40]	@ (800639c <vPortSetupTimerInterrupt+0x40>)
 8006372:	fba2 2303 	umull	r2, r3, r2, r3
 8006376:	099b      	lsrs	r3, r3, #6
 8006378:	4a09      	ldr	r2, [pc, #36]	@ (80063a0 <vPortSetupTimerInterrupt+0x44>)
 800637a:	3b01      	subs	r3, #1
 800637c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800637e:	4b04      	ldr	r3, [pc, #16]	@ (8006390 <vPortSetupTimerInterrupt+0x34>)
 8006380:	2207      	movs	r2, #7
 8006382:	601a      	str	r2, [r3, #0]
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	e000e010 	.word	0xe000e010
 8006394:	e000e018 	.word	0xe000e018
 8006398:	20000004 	.word	0x20000004
 800639c:	10624dd3 	.word	0x10624dd3
 80063a0:	e000e014 	.word	0xe000e014

080063a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80063b4 <vPortEnableVFP+0x10>
 80063a8:	6801      	ldr	r1, [r0, #0]
 80063aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80063ae:	6001      	str	r1, [r0, #0]
 80063b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063b2:	bf00      	nop
 80063b4:	e000ed88 	.word	0xe000ed88

080063b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d915      	bls.n	80063f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063ca:	4a18      	ldr	r2, [pc, #96]	@ (800642c <vPortValidateInterruptPriority+0x74>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063d4:	4b16      	ldr	r3, [pc, #88]	@ (8006430 <vPortValidateInterruptPriority+0x78>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	7afa      	ldrb	r2, [r7, #11]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d20b      	bcs.n	80063f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	e7fd      	b.n	80063f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006434 <vPortValidateInterruptPriority+0x7c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80063fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006438 <vPortValidateInterruptPriority+0x80>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d90b      	bls.n	800641e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	603b      	str	r3, [r7, #0]
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	e7fd      	b.n	800641a <vPortValidateInterruptPriority+0x62>
	}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	e000e3f0 	.word	0xe000e3f0
 8006430:	20000ef8 	.word	0x20000ef8
 8006434:	e000ed0c 	.word	0xe000ed0c
 8006438:	20000efc 	.word	0x20000efc

0800643c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08a      	sub	sp, #40	@ 0x28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006448:	f7fe fca8 	bl	8004d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800644c:	4b5c      	ldr	r3, [pc, #368]	@ (80065c0 <pvPortMalloc+0x184>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006454:	f000 f924 	bl	80066a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006458:	4b5a      	ldr	r3, [pc, #360]	@ (80065c4 <pvPortMalloc+0x188>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	f040 8095 	bne.w	8006590 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01e      	beq.n	80064aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800646c:	2208      	movs	r2, #8
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4413      	add	r3, r2
 8006472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	2b00      	cmp	r3, #0
 800647c:	d015      	beq.n	80064aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f023 0307 	bic.w	r3, r3, #7
 8006484:	3308      	adds	r3, #8
 8006486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <pvPortMalloc+0x6e>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	617b      	str	r3, [r7, #20]
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	e7fd      	b.n	80064a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d06f      	beq.n	8006590 <pvPortMalloc+0x154>
 80064b0:	4b45      	ldr	r3, [pc, #276]	@ (80065c8 <pvPortMalloc+0x18c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d86a      	bhi.n	8006590 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ba:	4b44      	ldr	r3, [pc, #272]	@ (80065cc <pvPortMalloc+0x190>)
 80064bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064be:	4b43      	ldr	r3, [pc, #268]	@ (80065cc <pvPortMalloc+0x190>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064c4:	e004      	b.n	80064d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d903      	bls.n	80064e2 <pvPortMalloc+0xa6>
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f1      	bne.n	80064c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064e2:	4b37      	ldr	r3, [pc, #220]	@ (80065c0 <pvPortMalloc+0x184>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d051      	beq.n	8006590 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2208      	movs	r2, #8
 80064f2:	4413      	add	r3, r2
 80064f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	1ad2      	subs	r2, r2, r3
 8006506:	2308      	movs	r3, #8
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	429a      	cmp	r2, r3
 800650c:	d920      	bls.n	8006550 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800650e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00b      	beq.n	8006538 <pvPortMalloc+0xfc>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	613b      	str	r3, [r7, #16]
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800654a:	69b8      	ldr	r0, [r7, #24]
 800654c:	f000 f90a 	bl	8006764 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006550:	4b1d      	ldr	r3, [pc, #116]	@ (80065c8 <pvPortMalloc+0x18c>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	4a1b      	ldr	r2, [pc, #108]	@ (80065c8 <pvPortMalloc+0x18c>)
 800655c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800655e:	4b1a      	ldr	r3, [pc, #104]	@ (80065c8 <pvPortMalloc+0x18c>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b1b      	ldr	r3, [pc, #108]	@ (80065d0 <pvPortMalloc+0x194>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d203      	bcs.n	8006572 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800656a:	4b17      	ldr	r3, [pc, #92]	@ (80065c8 <pvPortMalloc+0x18c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a18      	ldr	r2, [pc, #96]	@ (80065d0 <pvPortMalloc+0x194>)
 8006570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	4b13      	ldr	r3, [pc, #76]	@ (80065c4 <pvPortMalloc+0x188>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	431a      	orrs	r2, r3
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006586:	4b13      	ldr	r3, [pc, #76]	@ (80065d4 <pvPortMalloc+0x198>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	4a11      	ldr	r2, [pc, #68]	@ (80065d4 <pvPortMalloc+0x198>)
 800658e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006590:	f7fe fc12 	bl	8004db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00b      	beq.n	80065b6 <pvPortMalloc+0x17a>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	60fb      	str	r3, [r7, #12]
}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
 80065b4:	e7fd      	b.n	80065b2 <pvPortMalloc+0x176>
	return pvReturn;
 80065b6:	69fb      	ldr	r3, [r7, #28]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3728      	adds	r7, #40	@ 0x28
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20004b08 	.word	0x20004b08
 80065c4:	20004b1c 	.word	0x20004b1c
 80065c8:	20004b0c 	.word	0x20004b0c
 80065cc:	20004b00 	.word	0x20004b00
 80065d0:	20004b10 	.word	0x20004b10
 80065d4:	20004b14 	.word	0x20004b14

080065d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d04f      	beq.n	800668a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065ea:	2308      	movs	r3, #8
 80065ec:	425b      	negs	r3, r3
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4413      	add	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	4b25      	ldr	r3, [pc, #148]	@ (8006694 <vPortFree+0xbc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4013      	ands	r3, r2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10b      	bne.n	800661e <vPortFree+0x46>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	60fb      	str	r3, [r7, #12]
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	e7fd      	b.n	800661a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <vPortFree+0x66>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60bb      	str	r3, [r7, #8]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	4b14      	ldr	r3, [pc, #80]	@ (8006694 <vPortFree+0xbc>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4013      	ands	r3, r2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01e      	beq.n	800668a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d11a      	bne.n	800668a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	4b0e      	ldr	r3, [pc, #56]	@ (8006694 <vPortFree+0xbc>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	43db      	mvns	r3, r3
 800665e:	401a      	ands	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006664:	f7fe fb9a 	bl	8004d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	4b0a      	ldr	r3, [pc, #40]	@ (8006698 <vPortFree+0xc0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4413      	add	r3, r2
 8006672:	4a09      	ldr	r2, [pc, #36]	@ (8006698 <vPortFree+0xc0>)
 8006674:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006676:	6938      	ldr	r0, [r7, #16]
 8006678:	f000 f874 	bl	8006764 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800667c:	4b07      	ldr	r3, [pc, #28]	@ (800669c <vPortFree+0xc4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3301      	adds	r3, #1
 8006682:	4a06      	ldr	r2, [pc, #24]	@ (800669c <vPortFree+0xc4>)
 8006684:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006686:	f7fe fb97 	bl	8004db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800668a:	bf00      	nop
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20004b1c 	.word	0x20004b1c
 8006698:	20004b0c 	.word	0x20004b0c
 800669c:	20004b18 	.word	0x20004b18

080066a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80066aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066ac:	4b27      	ldr	r3, [pc, #156]	@ (800674c <prvHeapInit+0xac>)
 80066ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00c      	beq.n	80066d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3307      	adds	r3, #7
 80066be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0307 	bic.w	r3, r3, #7
 80066c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	4a1f      	ldr	r2, [pc, #124]	@ (800674c <prvHeapInit+0xac>)
 80066d0:	4413      	add	r3, r2
 80066d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006750 <prvHeapInit+0xb0>)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066de:	4b1c      	ldr	r3, [pc, #112]	@ (8006750 <prvHeapInit+0xb0>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	4413      	add	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066ec:	2208      	movs	r2, #8
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	1a9b      	subs	r3, r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0307 	bic.w	r3, r3, #7
 80066fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4a15      	ldr	r2, [pc, #84]	@ (8006754 <prvHeapInit+0xb4>)
 8006700:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006702:	4b14      	ldr	r3, [pc, #80]	@ (8006754 <prvHeapInit+0xb4>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800670a:	4b12      	ldr	r3, [pc, #72]	@ (8006754 <prvHeapInit+0xb4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	1ad2      	subs	r2, r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006720:	4b0c      	ldr	r3, [pc, #48]	@ (8006754 <prvHeapInit+0xb4>)
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	4a0a      	ldr	r2, [pc, #40]	@ (8006758 <prvHeapInit+0xb8>)
 800672e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	4a09      	ldr	r2, [pc, #36]	@ (800675c <prvHeapInit+0xbc>)
 8006736:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006738:	4b09      	ldr	r3, [pc, #36]	@ (8006760 <prvHeapInit+0xc0>)
 800673a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	20000f00 	.word	0x20000f00
 8006750:	20004b00 	.word	0x20004b00
 8006754:	20004b08 	.word	0x20004b08
 8006758:	20004b10 	.word	0x20004b10
 800675c:	20004b0c 	.word	0x20004b0c
 8006760:	20004b1c 	.word	0x20004b1c

08006764 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800676c:	4b28      	ldr	r3, [pc, #160]	@ (8006810 <prvInsertBlockIntoFreeList+0xac>)
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	e002      	b.n	8006778 <prvInsertBlockIntoFreeList+0x14>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	429a      	cmp	r2, r3
 8006780:	d8f7      	bhi.n	8006772 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	4413      	add	r3, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	429a      	cmp	r2, r3
 8006792:	d108      	bne.n	80067a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	441a      	add	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	441a      	add	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d118      	bne.n	80067ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4b15      	ldr	r3, [pc, #84]	@ (8006814 <prvInsertBlockIntoFreeList+0xb0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d00d      	beq.n	80067e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	441a      	add	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	e008      	b.n	80067f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <prvInsertBlockIntoFreeList+0xb0>)
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	e003      	b.n	80067f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d002      	beq.n	8006802 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	20004b00 	.word	0x20004b00
 8006814:	20004b08 	.word	0x20004b08

08006818 <sniprintf>:
 8006818:	b40c      	push	{r2, r3}
 800681a:	b530      	push	{r4, r5, lr}
 800681c:	4b17      	ldr	r3, [pc, #92]	@ (800687c <sniprintf+0x64>)
 800681e:	1e0c      	subs	r4, r1, #0
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	b09d      	sub	sp, #116	@ 0x74
 8006824:	da08      	bge.n	8006838 <sniprintf+0x20>
 8006826:	238b      	movs	r3, #139	@ 0x8b
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	f04f 30ff 	mov.w	r0, #4294967295
 800682e:	b01d      	add	sp, #116	@ 0x74
 8006830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006834:	b002      	add	sp, #8
 8006836:	4770      	bx	lr
 8006838:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800683c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006840:	bf14      	ite	ne
 8006842:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006846:	4623      	moveq	r3, r4
 8006848:	9304      	str	r3, [sp, #16]
 800684a:	9307      	str	r3, [sp, #28]
 800684c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006850:	9002      	str	r0, [sp, #8]
 8006852:	9006      	str	r0, [sp, #24]
 8006854:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006858:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800685a:	ab21      	add	r3, sp, #132	@ 0x84
 800685c:	a902      	add	r1, sp, #8
 800685e:	4628      	mov	r0, r5
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	f000 f9a3 	bl	8006bac <_svfiprintf_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	bfbc      	itt	lt
 800686a:	238b      	movlt	r3, #139	@ 0x8b
 800686c:	602b      	strlt	r3, [r5, #0]
 800686e:	2c00      	cmp	r4, #0
 8006870:	d0dd      	beq.n	800682e <sniprintf+0x16>
 8006872:	9b02      	ldr	r3, [sp, #8]
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	e7d9      	b.n	800682e <sniprintf+0x16>
 800687a:	bf00      	nop
 800687c:	20000014 	.word	0x20000014

08006880 <memset>:
 8006880:	4402      	add	r2, r0
 8006882:	4603      	mov	r3, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	d100      	bne.n	800688a <memset+0xa>
 8006888:	4770      	bx	lr
 800688a:	f803 1b01 	strb.w	r1, [r3], #1
 800688e:	e7f9      	b.n	8006884 <memset+0x4>

08006890 <__errno>:
 8006890:	4b01      	ldr	r3, [pc, #4]	@ (8006898 <__errno+0x8>)
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	20000014 	.word	0x20000014

0800689c <__libc_init_array>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4d0d      	ldr	r5, [pc, #52]	@ (80068d4 <__libc_init_array+0x38>)
 80068a0:	4c0d      	ldr	r4, [pc, #52]	@ (80068d8 <__libc_init_array+0x3c>)
 80068a2:	1b64      	subs	r4, r4, r5
 80068a4:	10a4      	asrs	r4, r4, #2
 80068a6:	2600      	movs	r6, #0
 80068a8:	42a6      	cmp	r6, r4
 80068aa:	d109      	bne.n	80068c0 <__libc_init_array+0x24>
 80068ac:	4d0b      	ldr	r5, [pc, #44]	@ (80068dc <__libc_init_array+0x40>)
 80068ae:	4c0c      	ldr	r4, [pc, #48]	@ (80068e0 <__libc_init_array+0x44>)
 80068b0:	f000 fc66 	bl	8007180 <_init>
 80068b4:	1b64      	subs	r4, r4, r5
 80068b6:	10a4      	asrs	r4, r4, #2
 80068b8:	2600      	movs	r6, #0
 80068ba:	42a6      	cmp	r6, r4
 80068bc:	d105      	bne.n	80068ca <__libc_init_array+0x2e>
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c4:	4798      	blx	r3
 80068c6:	3601      	adds	r6, #1
 80068c8:	e7ee      	b.n	80068a8 <__libc_init_array+0xc>
 80068ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ce:	4798      	blx	r3
 80068d0:	3601      	adds	r6, #1
 80068d2:	e7f2      	b.n	80068ba <__libc_init_array+0x1e>
 80068d4:	0800741c 	.word	0x0800741c
 80068d8:	0800741c 	.word	0x0800741c
 80068dc:	0800741c 	.word	0x0800741c
 80068e0:	08007420 	.word	0x08007420

080068e4 <__retarget_lock_acquire_recursive>:
 80068e4:	4770      	bx	lr

080068e6 <__retarget_lock_release_recursive>:
 80068e6:	4770      	bx	lr

080068e8 <memcpy>:
 80068e8:	440a      	add	r2, r1
 80068ea:	4291      	cmp	r1, r2
 80068ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80068f0:	d100      	bne.n	80068f4 <memcpy+0xc>
 80068f2:	4770      	bx	lr
 80068f4:	b510      	push	{r4, lr}
 80068f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068fe:	4291      	cmp	r1, r2
 8006900:	d1f9      	bne.n	80068f6 <memcpy+0xe>
 8006902:	bd10      	pop	{r4, pc}

08006904 <_free_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4605      	mov	r5, r0
 8006908:	2900      	cmp	r1, #0
 800690a:	d041      	beq.n	8006990 <_free_r+0x8c>
 800690c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006910:	1f0c      	subs	r4, r1, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	bfb8      	it	lt
 8006916:	18e4      	addlt	r4, r4, r3
 8006918:	f000 f8e0 	bl	8006adc <__malloc_lock>
 800691c:	4a1d      	ldr	r2, [pc, #116]	@ (8006994 <_free_r+0x90>)
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	b933      	cbnz	r3, 8006930 <_free_r+0x2c>
 8006922:	6063      	str	r3, [r4, #4]
 8006924:	6014      	str	r4, [r2, #0]
 8006926:	4628      	mov	r0, r5
 8006928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692c:	f000 b8dc 	b.w	8006ae8 <__malloc_unlock>
 8006930:	42a3      	cmp	r3, r4
 8006932:	d908      	bls.n	8006946 <_free_r+0x42>
 8006934:	6820      	ldr	r0, [r4, #0]
 8006936:	1821      	adds	r1, r4, r0
 8006938:	428b      	cmp	r3, r1
 800693a:	bf01      	itttt	eq
 800693c:	6819      	ldreq	r1, [r3, #0]
 800693e:	685b      	ldreq	r3, [r3, #4]
 8006940:	1809      	addeq	r1, r1, r0
 8006942:	6021      	streq	r1, [r4, #0]
 8006944:	e7ed      	b.n	8006922 <_free_r+0x1e>
 8006946:	461a      	mov	r2, r3
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	b10b      	cbz	r3, 8006950 <_free_r+0x4c>
 800694c:	42a3      	cmp	r3, r4
 800694e:	d9fa      	bls.n	8006946 <_free_r+0x42>
 8006950:	6811      	ldr	r1, [r2, #0]
 8006952:	1850      	adds	r0, r2, r1
 8006954:	42a0      	cmp	r0, r4
 8006956:	d10b      	bne.n	8006970 <_free_r+0x6c>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	4401      	add	r1, r0
 800695c:	1850      	adds	r0, r2, r1
 800695e:	4283      	cmp	r3, r0
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	d1e0      	bne.n	8006926 <_free_r+0x22>
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	6053      	str	r3, [r2, #4]
 800696a:	4408      	add	r0, r1
 800696c:	6010      	str	r0, [r2, #0]
 800696e:	e7da      	b.n	8006926 <_free_r+0x22>
 8006970:	d902      	bls.n	8006978 <_free_r+0x74>
 8006972:	230c      	movs	r3, #12
 8006974:	602b      	str	r3, [r5, #0]
 8006976:	e7d6      	b.n	8006926 <_free_r+0x22>
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	1821      	adds	r1, r4, r0
 800697c:	428b      	cmp	r3, r1
 800697e:	bf04      	itt	eq
 8006980:	6819      	ldreq	r1, [r3, #0]
 8006982:	685b      	ldreq	r3, [r3, #4]
 8006984:	6063      	str	r3, [r4, #4]
 8006986:	bf04      	itt	eq
 8006988:	1809      	addeq	r1, r1, r0
 800698a:	6021      	streq	r1, [r4, #0]
 800698c:	6054      	str	r4, [r2, #4]
 800698e:	e7ca      	b.n	8006926 <_free_r+0x22>
 8006990:	bd38      	pop	{r3, r4, r5, pc}
 8006992:	bf00      	nop
 8006994:	20004c64 	.word	0x20004c64

08006998 <sbrk_aligned>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4e0f      	ldr	r6, [pc, #60]	@ (80069d8 <sbrk_aligned+0x40>)
 800699c:	460c      	mov	r4, r1
 800699e:	6831      	ldr	r1, [r6, #0]
 80069a0:	4605      	mov	r5, r0
 80069a2:	b911      	cbnz	r1, 80069aa <sbrk_aligned+0x12>
 80069a4:	f000 fba6 	bl	80070f4 <_sbrk_r>
 80069a8:	6030      	str	r0, [r6, #0]
 80069aa:	4621      	mov	r1, r4
 80069ac:	4628      	mov	r0, r5
 80069ae:	f000 fba1 	bl	80070f4 <_sbrk_r>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	d103      	bne.n	80069be <sbrk_aligned+0x26>
 80069b6:	f04f 34ff 	mov.w	r4, #4294967295
 80069ba:	4620      	mov	r0, r4
 80069bc:	bd70      	pop	{r4, r5, r6, pc}
 80069be:	1cc4      	adds	r4, r0, #3
 80069c0:	f024 0403 	bic.w	r4, r4, #3
 80069c4:	42a0      	cmp	r0, r4
 80069c6:	d0f8      	beq.n	80069ba <sbrk_aligned+0x22>
 80069c8:	1a21      	subs	r1, r4, r0
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 fb92 	bl	80070f4 <_sbrk_r>
 80069d0:	3001      	adds	r0, #1
 80069d2:	d1f2      	bne.n	80069ba <sbrk_aligned+0x22>
 80069d4:	e7ef      	b.n	80069b6 <sbrk_aligned+0x1e>
 80069d6:	bf00      	nop
 80069d8:	20004c60 	.word	0x20004c60

080069dc <_malloc_r>:
 80069dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e0:	1ccd      	adds	r5, r1, #3
 80069e2:	f025 0503 	bic.w	r5, r5, #3
 80069e6:	3508      	adds	r5, #8
 80069e8:	2d0c      	cmp	r5, #12
 80069ea:	bf38      	it	cc
 80069ec:	250c      	movcc	r5, #12
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	4606      	mov	r6, r0
 80069f2:	db01      	blt.n	80069f8 <_malloc_r+0x1c>
 80069f4:	42a9      	cmp	r1, r5
 80069f6:	d904      	bls.n	8006a02 <_malloc_r+0x26>
 80069f8:	230c      	movs	r3, #12
 80069fa:	6033      	str	r3, [r6, #0]
 80069fc:	2000      	movs	r0, #0
 80069fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ad8 <_malloc_r+0xfc>
 8006a06:	f000 f869 	bl	8006adc <__malloc_lock>
 8006a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a0e:	461c      	mov	r4, r3
 8006a10:	bb44      	cbnz	r4, 8006a64 <_malloc_r+0x88>
 8006a12:	4629      	mov	r1, r5
 8006a14:	4630      	mov	r0, r6
 8006a16:	f7ff ffbf 	bl	8006998 <sbrk_aligned>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	d158      	bne.n	8006ad2 <_malloc_r+0xf6>
 8006a20:	f8d8 4000 	ldr.w	r4, [r8]
 8006a24:	4627      	mov	r7, r4
 8006a26:	2f00      	cmp	r7, #0
 8006a28:	d143      	bne.n	8006ab2 <_malloc_r+0xd6>
 8006a2a:	2c00      	cmp	r4, #0
 8006a2c:	d04b      	beq.n	8006ac6 <_malloc_r+0xea>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	4639      	mov	r1, r7
 8006a32:	4630      	mov	r0, r6
 8006a34:	eb04 0903 	add.w	r9, r4, r3
 8006a38:	f000 fb5c 	bl	80070f4 <_sbrk_r>
 8006a3c:	4581      	cmp	r9, r0
 8006a3e:	d142      	bne.n	8006ac6 <_malloc_r+0xea>
 8006a40:	6821      	ldr	r1, [r4, #0]
 8006a42:	1a6d      	subs	r5, r5, r1
 8006a44:	4629      	mov	r1, r5
 8006a46:	4630      	mov	r0, r6
 8006a48:	f7ff ffa6 	bl	8006998 <sbrk_aligned>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d03a      	beq.n	8006ac6 <_malloc_r+0xea>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	442b      	add	r3, r5
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	f8d8 3000 	ldr.w	r3, [r8]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	bb62      	cbnz	r2, 8006ab8 <_malloc_r+0xdc>
 8006a5e:	f8c8 7000 	str.w	r7, [r8]
 8006a62:	e00f      	b.n	8006a84 <_malloc_r+0xa8>
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	1b52      	subs	r2, r2, r5
 8006a68:	d420      	bmi.n	8006aac <_malloc_r+0xd0>
 8006a6a:	2a0b      	cmp	r2, #11
 8006a6c:	d917      	bls.n	8006a9e <_malloc_r+0xc2>
 8006a6e:	1961      	adds	r1, r4, r5
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	6025      	str	r5, [r4, #0]
 8006a74:	bf18      	it	ne
 8006a76:	6059      	strne	r1, [r3, #4]
 8006a78:	6863      	ldr	r3, [r4, #4]
 8006a7a:	bf08      	it	eq
 8006a7c:	f8c8 1000 	streq.w	r1, [r8]
 8006a80:	5162      	str	r2, [r4, r5]
 8006a82:	604b      	str	r3, [r1, #4]
 8006a84:	4630      	mov	r0, r6
 8006a86:	f000 f82f 	bl	8006ae8 <__malloc_unlock>
 8006a8a:	f104 000b 	add.w	r0, r4, #11
 8006a8e:	1d23      	adds	r3, r4, #4
 8006a90:	f020 0007 	bic.w	r0, r0, #7
 8006a94:	1ac2      	subs	r2, r0, r3
 8006a96:	bf1c      	itt	ne
 8006a98:	1a1b      	subne	r3, r3, r0
 8006a9a:	50a3      	strne	r3, [r4, r2]
 8006a9c:	e7af      	b.n	80069fe <_malloc_r+0x22>
 8006a9e:	6862      	ldr	r2, [r4, #4]
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	bf0c      	ite	eq
 8006aa4:	f8c8 2000 	streq.w	r2, [r8]
 8006aa8:	605a      	strne	r2, [r3, #4]
 8006aaa:	e7eb      	b.n	8006a84 <_malloc_r+0xa8>
 8006aac:	4623      	mov	r3, r4
 8006aae:	6864      	ldr	r4, [r4, #4]
 8006ab0:	e7ae      	b.n	8006a10 <_malloc_r+0x34>
 8006ab2:	463c      	mov	r4, r7
 8006ab4:	687f      	ldr	r7, [r7, #4]
 8006ab6:	e7b6      	b.n	8006a26 <_malloc_r+0x4a>
 8006ab8:	461a      	mov	r2, r3
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	42a3      	cmp	r3, r4
 8006abe:	d1fb      	bne.n	8006ab8 <_malloc_r+0xdc>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6053      	str	r3, [r2, #4]
 8006ac4:	e7de      	b.n	8006a84 <_malloc_r+0xa8>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	6033      	str	r3, [r6, #0]
 8006aca:	4630      	mov	r0, r6
 8006acc:	f000 f80c 	bl	8006ae8 <__malloc_unlock>
 8006ad0:	e794      	b.n	80069fc <_malloc_r+0x20>
 8006ad2:	6005      	str	r5, [r0, #0]
 8006ad4:	e7d6      	b.n	8006a84 <_malloc_r+0xa8>
 8006ad6:	bf00      	nop
 8006ad8:	20004c64 	.word	0x20004c64

08006adc <__malloc_lock>:
 8006adc:	4801      	ldr	r0, [pc, #4]	@ (8006ae4 <__malloc_lock+0x8>)
 8006ade:	f7ff bf01 	b.w	80068e4 <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	20004c5c 	.word	0x20004c5c

08006ae8 <__malloc_unlock>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	@ (8006af0 <__malloc_unlock+0x8>)
 8006aea:	f7ff befc 	b.w	80068e6 <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	20004c5c 	.word	0x20004c5c

08006af4 <__ssputs_r>:
 8006af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	688e      	ldr	r6, [r1, #8]
 8006afa:	461f      	mov	r7, r3
 8006afc:	42be      	cmp	r6, r7
 8006afe:	680b      	ldr	r3, [r1, #0]
 8006b00:	4682      	mov	sl, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	4690      	mov	r8, r2
 8006b06:	d82d      	bhi.n	8006b64 <__ssputs_r+0x70>
 8006b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b10:	d026      	beq.n	8006b60 <__ssputs_r+0x6c>
 8006b12:	6965      	ldr	r5, [r4, #20]
 8006b14:	6909      	ldr	r1, [r1, #16]
 8006b16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b1a:	eba3 0901 	sub.w	r9, r3, r1
 8006b1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b22:	1c7b      	adds	r3, r7, #1
 8006b24:	444b      	add	r3, r9
 8006b26:	106d      	asrs	r5, r5, #1
 8006b28:	429d      	cmp	r5, r3
 8006b2a:	bf38      	it	cc
 8006b2c:	461d      	movcc	r5, r3
 8006b2e:	0553      	lsls	r3, r2, #21
 8006b30:	d527      	bpl.n	8006b82 <__ssputs_r+0x8e>
 8006b32:	4629      	mov	r1, r5
 8006b34:	f7ff ff52 	bl	80069dc <_malloc_r>
 8006b38:	4606      	mov	r6, r0
 8006b3a:	b360      	cbz	r0, 8006b96 <__ssputs_r+0xa2>
 8006b3c:	6921      	ldr	r1, [r4, #16]
 8006b3e:	464a      	mov	r2, r9
 8006b40:	f7ff fed2 	bl	80068e8 <memcpy>
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	6126      	str	r6, [r4, #16]
 8006b52:	6165      	str	r5, [r4, #20]
 8006b54:	444e      	add	r6, r9
 8006b56:	eba5 0509 	sub.w	r5, r5, r9
 8006b5a:	6026      	str	r6, [r4, #0]
 8006b5c:	60a5      	str	r5, [r4, #8]
 8006b5e:	463e      	mov	r6, r7
 8006b60:	42be      	cmp	r6, r7
 8006b62:	d900      	bls.n	8006b66 <__ssputs_r+0x72>
 8006b64:	463e      	mov	r6, r7
 8006b66:	6820      	ldr	r0, [r4, #0]
 8006b68:	4632      	mov	r2, r6
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	f000 faa8 	bl	80070c0 <memmove>
 8006b70:	68a3      	ldr	r3, [r4, #8]
 8006b72:	1b9b      	subs	r3, r3, r6
 8006b74:	60a3      	str	r3, [r4, #8]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	4433      	add	r3, r6
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b82:	462a      	mov	r2, r5
 8006b84:	f000 fac6 	bl	8007114 <_realloc_r>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d1e0      	bne.n	8006b50 <__ssputs_r+0x5c>
 8006b8e:	6921      	ldr	r1, [r4, #16]
 8006b90:	4650      	mov	r0, sl
 8006b92:	f7ff feb7 	bl	8006904 <_free_r>
 8006b96:	230c      	movs	r3, #12
 8006b98:	f8ca 3000 	str.w	r3, [sl]
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	e7e9      	b.n	8006b7e <__ssputs_r+0x8a>
	...

08006bac <_svfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	4698      	mov	r8, r3
 8006bb2:	898b      	ldrh	r3, [r1, #12]
 8006bb4:	061b      	lsls	r3, r3, #24
 8006bb6:	b09d      	sub	sp, #116	@ 0x74
 8006bb8:	4607      	mov	r7, r0
 8006bba:	460d      	mov	r5, r1
 8006bbc:	4614      	mov	r4, r2
 8006bbe:	d510      	bpl.n	8006be2 <_svfiprintf_r+0x36>
 8006bc0:	690b      	ldr	r3, [r1, #16]
 8006bc2:	b973      	cbnz	r3, 8006be2 <_svfiprintf_r+0x36>
 8006bc4:	2140      	movs	r1, #64	@ 0x40
 8006bc6:	f7ff ff09 	bl	80069dc <_malloc_r>
 8006bca:	6028      	str	r0, [r5, #0]
 8006bcc:	6128      	str	r0, [r5, #16]
 8006bce:	b930      	cbnz	r0, 8006bde <_svfiprintf_r+0x32>
 8006bd0:	230c      	movs	r3, #12
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	b01d      	add	sp, #116	@ 0x74
 8006bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bde:	2340      	movs	r3, #64	@ 0x40
 8006be0:	616b      	str	r3, [r5, #20]
 8006be2:	2300      	movs	r3, #0
 8006be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be6:	2320      	movs	r3, #32
 8006be8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bf0:	2330      	movs	r3, #48	@ 0x30
 8006bf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d90 <_svfiprintf_r+0x1e4>
 8006bf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bfa:	f04f 0901 	mov.w	r9, #1
 8006bfe:	4623      	mov	r3, r4
 8006c00:	469a      	mov	sl, r3
 8006c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c06:	b10a      	cbz	r2, 8006c0c <_svfiprintf_r+0x60>
 8006c08:	2a25      	cmp	r2, #37	@ 0x25
 8006c0a:	d1f9      	bne.n	8006c00 <_svfiprintf_r+0x54>
 8006c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c10:	d00b      	beq.n	8006c2a <_svfiprintf_r+0x7e>
 8006c12:	465b      	mov	r3, fp
 8006c14:	4622      	mov	r2, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff ff6b 	bl	8006af4 <__ssputs_r>
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f000 80a7 	beq.w	8006d72 <_svfiprintf_r+0x1c6>
 8006c24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c26:	445a      	add	r2, fp
 8006c28:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 809f 	beq.w	8006d72 <_svfiprintf_r+0x1c6>
 8006c34:	2300      	movs	r3, #0
 8006c36:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c3e:	f10a 0a01 	add.w	sl, sl, #1
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c4c:	4654      	mov	r4, sl
 8006c4e:	2205      	movs	r2, #5
 8006c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c54:	484e      	ldr	r0, [pc, #312]	@ (8006d90 <_svfiprintf_r+0x1e4>)
 8006c56:	f7f9 facb 	bl	80001f0 <memchr>
 8006c5a:	9a04      	ldr	r2, [sp, #16]
 8006c5c:	b9d8      	cbnz	r0, 8006c96 <_svfiprintf_r+0xea>
 8006c5e:	06d0      	lsls	r0, r2, #27
 8006c60:	bf44      	itt	mi
 8006c62:	2320      	movmi	r3, #32
 8006c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c68:	0711      	lsls	r1, r2, #28
 8006c6a:	bf44      	itt	mi
 8006c6c:	232b      	movmi	r3, #43	@ 0x2b
 8006c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c72:	f89a 3000 	ldrb.w	r3, [sl]
 8006c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c78:	d015      	beq.n	8006ca6 <_svfiprintf_r+0xfa>
 8006c7a:	9a07      	ldr	r2, [sp, #28]
 8006c7c:	4654      	mov	r4, sl
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f04f 0c0a 	mov.w	ip, #10
 8006c84:	4621      	mov	r1, r4
 8006c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c8a:	3b30      	subs	r3, #48	@ 0x30
 8006c8c:	2b09      	cmp	r3, #9
 8006c8e:	d94b      	bls.n	8006d28 <_svfiprintf_r+0x17c>
 8006c90:	b1b0      	cbz	r0, 8006cc0 <_svfiprintf_r+0x114>
 8006c92:	9207      	str	r2, [sp, #28]
 8006c94:	e014      	b.n	8006cc0 <_svfiprintf_r+0x114>
 8006c96:	eba0 0308 	sub.w	r3, r0, r8
 8006c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	46a2      	mov	sl, r4
 8006ca4:	e7d2      	b.n	8006c4c <_svfiprintf_r+0xa0>
 8006ca6:	9b03      	ldr	r3, [sp, #12]
 8006ca8:	1d19      	adds	r1, r3, #4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	9103      	str	r1, [sp, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfbb      	ittet	lt
 8006cb2:	425b      	neglt	r3, r3
 8006cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8006cb8:	9307      	strge	r3, [sp, #28]
 8006cba:	9307      	strlt	r3, [sp, #28]
 8006cbc:	bfb8      	it	lt
 8006cbe:	9204      	strlt	r2, [sp, #16]
 8006cc0:	7823      	ldrb	r3, [r4, #0]
 8006cc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cc4:	d10a      	bne.n	8006cdc <_svfiprintf_r+0x130>
 8006cc6:	7863      	ldrb	r3, [r4, #1]
 8006cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cca:	d132      	bne.n	8006d32 <_svfiprintf_r+0x186>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	9203      	str	r2, [sp, #12]
 8006cd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cd8:	3402      	adds	r4, #2
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006da0 <_svfiprintf_r+0x1f4>
 8006ce0:	7821      	ldrb	r1, [r4, #0]
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	4650      	mov	r0, sl
 8006ce6:	f7f9 fa83 	bl	80001f0 <memchr>
 8006cea:	b138      	cbz	r0, 8006cfc <_svfiprintf_r+0x150>
 8006cec:	9b04      	ldr	r3, [sp, #16]
 8006cee:	eba0 000a 	sub.w	r0, r0, sl
 8006cf2:	2240      	movs	r2, #64	@ 0x40
 8006cf4:	4082      	lsls	r2, r0
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	3401      	adds	r4, #1
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d00:	4824      	ldr	r0, [pc, #144]	@ (8006d94 <_svfiprintf_r+0x1e8>)
 8006d02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d06:	2206      	movs	r2, #6
 8006d08:	f7f9 fa72 	bl	80001f0 <memchr>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d036      	beq.n	8006d7e <_svfiprintf_r+0x1d2>
 8006d10:	4b21      	ldr	r3, [pc, #132]	@ (8006d98 <_svfiprintf_r+0x1ec>)
 8006d12:	bb1b      	cbnz	r3, 8006d5c <_svfiprintf_r+0x1b0>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	3307      	adds	r3, #7
 8006d18:	f023 0307 	bic.w	r3, r3, #7
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	9303      	str	r3, [sp, #12]
 8006d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d22:	4433      	add	r3, r6
 8006d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d26:	e76a      	b.n	8006bfe <_svfiprintf_r+0x52>
 8006d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	2001      	movs	r0, #1
 8006d30:	e7a8      	b.n	8006c84 <_svfiprintf_r+0xd8>
 8006d32:	2300      	movs	r3, #0
 8006d34:	3401      	adds	r4, #1
 8006d36:	9305      	str	r3, [sp, #20]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f04f 0c0a 	mov.w	ip, #10
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d44:	3a30      	subs	r2, #48	@ 0x30
 8006d46:	2a09      	cmp	r2, #9
 8006d48:	d903      	bls.n	8006d52 <_svfiprintf_r+0x1a6>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0c6      	beq.n	8006cdc <_svfiprintf_r+0x130>
 8006d4e:	9105      	str	r1, [sp, #20]
 8006d50:	e7c4      	b.n	8006cdc <_svfiprintf_r+0x130>
 8006d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d56:	4604      	mov	r4, r0
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e7f0      	b.n	8006d3e <_svfiprintf_r+0x192>
 8006d5c:	ab03      	add	r3, sp, #12
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	462a      	mov	r2, r5
 8006d62:	4b0e      	ldr	r3, [pc, #56]	@ (8006d9c <_svfiprintf_r+0x1f0>)
 8006d64:	a904      	add	r1, sp, #16
 8006d66:	4638      	mov	r0, r7
 8006d68:	f3af 8000 	nop.w
 8006d6c:	1c42      	adds	r2, r0, #1
 8006d6e:	4606      	mov	r6, r0
 8006d70:	d1d6      	bne.n	8006d20 <_svfiprintf_r+0x174>
 8006d72:	89ab      	ldrh	r3, [r5, #12]
 8006d74:	065b      	lsls	r3, r3, #25
 8006d76:	f53f af2d 	bmi.w	8006bd4 <_svfiprintf_r+0x28>
 8006d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d7c:	e72c      	b.n	8006bd8 <_svfiprintf_r+0x2c>
 8006d7e:	ab03      	add	r3, sp, #12
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	462a      	mov	r2, r5
 8006d84:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <_svfiprintf_r+0x1f0>)
 8006d86:	a904      	add	r1, sp, #16
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f000 f879 	bl	8006e80 <_printf_i>
 8006d8e:	e7ed      	b.n	8006d6c <_svfiprintf_r+0x1c0>
 8006d90:	080073e0 	.word	0x080073e0
 8006d94:	080073ea 	.word	0x080073ea
 8006d98:	00000000 	.word	0x00000000
 8006d9c:	08006af5 	.word	0x08006af5
 8006da0:	080073e6 	.word	0x080073e6

08006da4 <_printf_common>:
 8006da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	4616      	mov	r6, r2
 8006daa:	4698      	mov	r8, r3
 8006dac:	688a      	ldr	r2, [r1, #8]
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	bfb8      	it	lt
 8006db8:	4613      	movlt	r3, r2
 8006dba:	6033      	str	r3, [r6, #0]
 8006dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b10a      	cbz	r2, 8006dca <_printf_common+0x26>
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	6033      	str	r3, [r6, #0]
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	0699      	lsls	r1, r3, #26
 8006dce:	bf42      	ittt	mi
 8006dd0:	6833      	ldrmi	r3, [r6, #0]
 8006dd2:	3302      	addmi	r3, #2
 8006dd4:	6033      	strmi	r3, [r6, #0]
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	f015 0506 	ands.w	r5, r5, #6
 8006ddc:	d106      	bne.n	8006dec <_printf_common+0x48>
 8006dde:	f104 0a19 	add.w	sl, r4, #25
 8006de2:	68e3      	ldr	r3, [r4, #12]
 8006de4:	6832      	ldr	r2, [r6, #0]
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	42ab      	cmp	r3, r5
 8006dea:	dc26      	bgt.n	8006e3a <_printf_common+0x96>
 8006dec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006df0:	6822      	ldr	r2, [r4, #0]
 8006df2:	3b00      	subs	r3, #0
 8006df4:	bf18      	it	ne
 8006df6:	2301      	movne	r3, #1
 8006df8:	0692      	lsls	r2, r2, #26
 8006dfa:	d42b      	bmi.n	8006e54 <_printf_common+0xb0>
 8006dfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e00:	4641      	mov	r1, r8
 8006e02:	4638      	mov	r0, r7
 8006e04:	47c8      	blx	r9
 8006e06:	3001      	adds	r0, #1
 8006e08:	d01e      	beq.n	8006e48 <_printf_common+0xa4>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6922      	ldr	r2, [r4, #16]
 8006e0e:	f003 0306 	and.w	r3, r3, #6
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	bf02      	ittt	eq
 8006e16:	68e5      	ldreq	r5, [r4, #12]
 8006e18:	6833      	ldreq	r3, [r6, #0]
 8006e1a:	1aed      	subeq	r5, r5, r3
 8006e1c:	68a3      	ldr	r3, [r4, #8]
 8006e1e:	bf0c      	ite	eq
 8006e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e24:	2500      	movne	r5, #0
 8006e26:	4293      	cmp	r3, r2
 8006e28:	bfc4      	itt	gt
 8006e2a:	1a9b      	subgt	r3, r3, r2
 8006e2c:	18ed      	addgt	r5, r5, r3
 8006e2e:	2600      	movs	r6, #0
 8006e30:	341a      	adds	r4, #26
 8006e32:	42b5      	cmp	r5, r6
 8006e34:	d11a      	bne.n	8006e6c <_printf_common+0xc8>
 8006e36:	2000      	movs	r0, #0
 8006e38:	e008      	b.n	8006e4c <_printf_common+0xa8>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4641      	mov	r1, r8
 8006e40:	4638      	mov	r0, r7
 8006e42:	47c8      	blx	r9
 8006e44:	3001      	adds	r0, #1
 8006e46:	d103      	bne.n	8006e50 <_printf_common+0xac>
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e50:	3501      	adds	r5, #1
 8006e52:	e7c6      	b.n	8006de2 <_printf_common+0x3e>
 8006e54:	18e1      	adds	r1, r4, r3
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	2030      	movs	r0, #48	@ 0x30
 8006e5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e5e:	4422      	add	r2, r4
 8006e60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e68:	3302      	adds	r3, #2
 8006e6a:	e7c7      	b.n	8006dfc <_printf_common+0x58>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4622      	mov	r2, r4
 8006e70:	4641      	mov	r1, r8
 8006e72:	4638      	mov	r0, r7
 8006e74:	47c8      	blx	r9
 8006e76:	3001      	adds	r0, #1
 8006e78:	d0e6      	beq.n	8006e48 <_printf_common+0xa4>
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7d9      	b.n	8006e32 <_printf_common+0x8e>
	...

08006e80 <_printf_i>:
 8006e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	7e0f      	ldrb	r7, [r1, #24]
 8006e86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e88:	2f78      	cmp	r7, #120	@ 0x78
 8006e8a:	4691      	mov	r9, r2
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	469a      	mov	sl, r3
 8006e92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e96:	d807      	bhi.n	8006ea8 <_printf_i+0x28>
 8006e98:	2f62      	cmp	r7, #98	@ 0x62
 8006e9a:	d80a      	bhi.n	8006eb2 <_printf_i+0x32>
 8006e9c:	2f00      	cmp	r7, #0
 8006e9e:	f000 80d2 	beq.w	8007046 <_printf_i+0x1c6>
 8006ea2:	2f58      	cmp	r7, #88	@ 0x58
 8006ea4:	f000 80b9 	beq.w	800701a <_printf_i+0x19a>
 8006ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006eb0:	e03a      	b.n	8006f28 <_printf_i+0xa8>
 8006eb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006eb6:	2b15      	cmp	r3, #21
 8006eb8:	d8f6      	bhi.n	8006ea8 <_printf_i+0x28>
 8006eba:	a101      	add	r1, pc, #4	@ (adr r1, 8006ec0 <_printf_i+0x40>)
 8006ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ec0:	08006f19 	.word	0x08006f19
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006ea9 	.word	0x08006ea9
 8006ecc:	08006ea9 	.word	0x08006ea9
 8006ed0:	08006ea9 	.word	0x08006ea9
 8006ed4:	08006ea9 	.word	0x08006ea9
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006ea9 	.word	0x08006ea9
 8006ee0:	08006ea9 	.word	0x08006ea9
 8006ee4:	08006ea9 	.word	0x08006ea9
 8006ee8:	08006ea9 	.word	0x08006ea9
 8006eec:	0800702d 	.word	0x0800702d
 8006ef0:	08006f57 	.word	0x08006f57
 8006ef4:	08006fe7 	.word	0x08006fe7
 8006ef8:	08006ea9 	.word	0x08006ea9
 8006efc:	08006ea9 	.word	0x08006ea9
 8006f00:	0800704f 	.word	0x0800704f
 8006f04:	08006ea9 	.word	0x08006ea9
 8006f08:	08006f57 	.word	0x08006f57
 8006f0c:	08006ea9 	.word	0x08006ea9
 8006f10:	08006ea9 	.word	0x08006ea9
 8006f14:	08006fef 	.word	0x08006fef
 8006f18:	6833      	ldr	r3, [r6, #0]
 8006f1a:	1d1a      	adds	r2, r3, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6032      	str	r2, [r6, #0]
 8006f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e09d      	b.n	8007068 <_printf_i+0x1e8>
 8006f2c:	6833      	ldr	r3, [r6, #0]
 8006f2e:	6820      	ldr	r0, [r4, #0]
 8006f30:	1d19      	adds	r1, r3, #4
 8006f32:	6031      	str	r1, [r6, #0]
 8006f34:	0606      	lsls	r6, r0, #24
 8006f36:	d501      	bpl.n	8006f3c <_printf_i+0xbc>
 8006f38:	681d      	ldr	r5, [r3, #0]
 8006f3a:	e003      	b.n	8006f44 <_printf_i+0xc4>
 8006f3c:	0645      	lsls	r5, r0, #25
 8006f3e:	d5fb      	bpl.n	8006f38 <_printf_i+0xb8>
 8006f40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	da03      	bge.n	8006f50 <_printf_i+0xd0>
 8006f48:	232d      	movs	r3, #45	@ 0x2d
 8006f4a:	426d      	negs	r5, r5
 8006f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f50:	4859      	ldr	r0, [pc, #356]	@ (80070b8 <_printf_i+0x238>)
 8006f52:	230a      	movs	r3, #10
 8006f54:	e011      	b.n	8006f7a <_printf_i+0xfa>
 8006f56:	6821      	ldr	r1, [r4, #0]
 8006f58:	6833      	ldr	r3, [r6, #0]
 8006f5a:	0608      	lsls	r0, r1, #24
 8006f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f60:	d402      	bmi.n	8006f68 <_printf_i+0xe8>
 8006f62:	0649      	lsls	r1, r1, #25
 8006f64:	bf48      	it	mi
 8006f66:	b2ad      	uxthmi	r5, r5
 8006f68:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f6a:	4853      	ldr	r0, [pc, #332]	@ (80070b8 <_printf_i+0x238>)
 8006f6c:	6033      	str	r3, [r6, #0]
 8006f6e:	bf14      	ite	ne
 8006f70:	230a      	movne	r3, #10
 8006f72:	2308      	moveq	r3, #8
 8006f74:	2100      	movs	r1, #0
 8006f76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f7a:	6866      	ldr	r6, [r4, #4]
 8006f7c:	60a6      	str	r6, [r4, #8]
 8006f7e:	2e00      	cmp	r6, #0
 8006f80:	bfa2      	ittt	ge
 8006f82:	6821      	ldrge	r1, [r4, #0]
 8006f84:	f021 0104 	bicge.w	r1, r1, #4
 8006f88:	6021      	strge	r1, [r4, #0]
 8006f8a:	b90d      	cbnz	r5, 8006f90 <_printf_i+0x110>
 8006f8c:	2e00      	cmp	r6, #0
 8006f8e:	d04b      	beq.n	8007028 <_printf_i+0x1a8>
 8006f90:	4616      	mov	r6, r2
 8006f92:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f96:	fb03 5711 	mls	r7, r3, r1, r5
 8006f9a:	5dc7      	ldrb	r7, [r0, r7]
 8006f9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fa0:	462f      	mov	r7, r5
 8006fa2:	42bb      	cmp	r3, r7
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	d9f4      	bls.n	8006f92 <_printf_i+0x112>
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d10b      	bne.n	8006fc4 <_printf_i+0x144>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	07df      	lsls	r7, r3, #31
 8006fb0:	d508      	bpl.n	8006fc4 <_printf_i+0x144>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	6861      	ldr	r1, [r4, #4]
 8006fb6:	4299      	cmp	r1, r3
 8006fb8:	bfde      	ittt	le
 8006fba:	2330      	movle	r3, #48	@ 0x30
 8006fbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fc4:	1b92      	subs	r2, r2, r6
 8006fc6:	6122      	str	r2, [r4, #16]
 8006fc8:	f8cd a000 	str.w	sl, [sp]
 8006fcc:	464b      	mov	r3, r9
 8006fce:	aa03      	add	r2, sp, #12
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	f7ff fee6 	bl	8006da4 <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d14a      	bne.n	8007072 <_printf_i+0x1f2>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	b004      	add	sp, #16
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	f043 0320 	orr.w	r3, r3, #32
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	4833      	ldr	r0, [pc, #204]	@ (80070bc <_printf_i+0x23c>)
 8006ff0:	2778      	movs	r7, #120	@ 0x78
 8006ff2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	6831      	ldr	r1, [r6, #0]
 8006ffa:	061f      	lsls	r7, r3, #24
 8006ffc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007000:	d402      	bmi.n	8007008 <_printf_i+0x188>
 8007002:	065f      	lsls	r7, r3, #25
 8007004:	bf48      	it	mi
 8007006:	b2ad      	uxthmi	r5, r5
 8007008:	6031      	str	r1, [r6, #0]
 800700a:	07d9      	lsls	r1, r3, #31
 800700c:	bf44      	itt	mi
 800700e:	f043 0320 	orrmi.w	r3, r3, #32
 8007012:	6023      	strmi	r3, [r4, #0]
 8007014:	b11d      	cbz	r5, 800701e <_printf_i+0x19e>
 8007016:	2310      	movs	r3, #16
 8007018:	e7ac      	b.n	8006f74 <_printf_i+0xf4>
 800701a:	4827      	ldr	r0, [pc, #156]	@ (80070b8 <_printf_i+0x238>)
 800701c:	e7e9      	b.n	8006ff2 <_printf_i+0x172>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	f023 0320 	bic.w	r3, r3, #32
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	e7f6      	b.n	8007016 <_printf_i+0x196>
 8007028:	4616      	mov	r6, r2
 800702a:	e7bd      	b.n	8006fa8 <_printf_i+0x128>
 800702c:	6833      	ldr	r3, [r6, #0]
 800702e:	6825      	ldr	r5, [r4, #0]
 8007030:	6961      	ldr	r1, [r4, #20]
 8007032:	1d18      	adds	r0, r3, #4
 8007034:	6030      	str	r0, [r6, #0]
 8007036:	062e      	lsls	r6, r5, #24
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	d501      	bpl.n	8007040 <_printf_i+0x1c0>
 800703c:	6019      	str	r1, [r3, #0]
 800703e:	e002      	b.n	8007046 <_printf_i+0x1c6>
 8007040:	0668      	lsls	r0, r5, #25
 8007042:	d5fb      	bpl.n	800703c <_printf_i+0x1bc>
 8007044:	8019      	strh	r1, [r3, #0]
 8007046:	2300      	movs	r3, #0
 8007048:	6123      	str	r3, [r4, #16]
 800704a:	4616      	mov	r6, r2
 800704c:	e7bc      	b.n	8006fc8 <_printf_i+0x148>
 800704e:	6833      	ldr	r3, [r6, #0]
 8007050:	1d1a      	adds	r2, r3, #4
 8007052:	6032      	str	r2, [r6, #0]
 8007054:	681e      	ldr	r6, [r3, #0]
 8007056:	6862      	ldr	r2, [r4, #4]
 8007058:	2100      	movs	r1, #0
 800705a:	4630      	mov	r0, r6
 800705c:	f7f9 f8c8 	bl	80001f0 <memchr>
 8007060:	b108      	cbz	r0, 8007066 <_printf_i+0x1e6>
 8007062:	1b80      	subs	r0, r0, r6
 8007064:	6060      	str	r0, [r4, #4]
 8007066:	6863      	ldr	r3, [r4, #4]
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	2300      	movs	r3, #0
 800706c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007070:	e7aa      	b.n	8006fc8 <_printf_i+0x148>
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	4632      	mov	r2, r6
 8007076:	4649      	mov	r1, r9
 8007078:	4640      	mov	r0, r8
 800707a:	47d0      	blx	sl
 800707c:	3001      	adds	r0, #1
 800707e:	d0ad      	beq.n	8006fdc <_printf_i+0x15c>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	079b      	lsls	r3, r3, #30
 8007084:	d413      	bmi.n	80070ae <_printf_i+0x22e>
 8007086:	68e0      	ldr	r0, [r4, #12]
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	4298      	cmp	r0, r3
 800708c:	bfb8      	it	lt
 800708e:	4618      	movlt	r0, r3
 8007090:	e7a6      	b.n	8006fe0 <_printf_i+0x160>
 8007092:	2301      	movs	r3, #1
 8007094:	4632      	mov	r2, r6
 8007096:	4649      	mov	r1, r9
 8007098:	4640      	mov	r0, r8
 800709a:	47d0      	blx	sl
 800709c:	3001      	adds	r0, #1
 800709e:	d09d      	beq.n	8006fdc <_printf_i+0x15c>
 80070a0:	3501      	adds	r5, #1
 80070a2:	68e3      	ldr	r3, [r4, #12]
 80070a4:	9903      	ldr	r1, [sp, #12]
 80070a6:	1a5b      	subs	r3, r3, r1
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	dcf2      	bgt.n	8007092 <_printf_i+0x212>
 80070ac:	e7eb      	b.n	8007086 <_printf_i+0x206>
 80070ae:	2500      	movs	r5, #0
 80070b0:	f104 0619 	add.w	r6, r4, #25
 80070b4:	e7f5      	b.n	80070a2 <_printf_i+0x222>
 80070b6:	bf00      	nop
 80070b8:	080073f1 	.word	0x080073f1
 80070bc:	08007402 	.word	0x08007402

080070c0 <memmove>:
 80070c0:	4288      	cmp	r0, r1
 80070c2:	b510      	push	{r4, lr}
 80070c4:	eb01 0402 	add.w	r4, r1, r2
 80070c8:	d902      	bls.n	80070d0 <memmove+0x10>
 80070ca:	4284      	cmp	r4, r0
 80070cc:	4623      	mov	r3, r4
 80070ce:	d807      	bhi.n	80070e0 <memmove+0x20>
 80070d0:	1e43      	subs	r3, r0, #1
 80070d2:	42a1      	cmp	r1, r4
 80070d4:	d008      	beq.n	80070e8 <memmove+0x28>
 80070d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070de:	e7f8      	b.n	80070d2 <memmove+0x12>
 80070e0:	4402      	add	r2, r0
 80070e2:	4601      	mov	r1, r0
 80070e4:	428a      	cmp	r2, r1
 80070e6:	d100      	bne.n	80070ea <memmove+0x2a>
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070f2:	e7f7      	b.n	80070e4 <memmove+0x24>

080070f4 <_sbrk_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d06      	ldr	r5, [pc, #24]	@ (8007110 <_sbrk_r+0x1c>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	f7f9 ff18 	bl	8000f34 <_sbrk>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_sbrk_r+0x1a>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_sbrk_r+0x1a>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	20004c58 	.word	0x20004c58

08007114 <_realloc_r>:
 8007114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007118:	4680      	mov	r8, r0
 800711a:	4615      	mov	r5, r2
 800711c:	460c      	mov	r4, r1
 800711e:	b921      	cbnz	r1, 800712a <_realloc_r+0x16>
 8007120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007124:	4611      	mov	r1, r2
 8007126:	f7ff bc59 	b.w	80069dc <_malloc_r>
 800712a:	b92a      	cbnz	r2, 8007138 <_realloc_r+0x24>
 800712c:	f7ff fbea 	bl	8006904 <_free_r>
 8007130:	2400      	movs	r4, #0
 8007132:	4620      	mov	r0, r4
 8007134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007138:	f000 f81a 	bl	8007170 <_malloc_usable_size_r>
 800713c:	4285      	cmp	r5, r0
 800713e:	4606      	mov	r6, r0
 8007140:	d802      	bhi.n	8007148 <_realloc_r+0x34>
 8007142:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007146:	d8f4      	bhi.n	8007132 <_realloc_r+0x1e>
 8007148:	4629      	mov	r1, r5
 800714a:	4640      	mov	r0, r8
 800714c:	f7ff fc46 	bl	80069dc <_malloc_r>
 8007150:	4607      	mov	r7, r0
 8007152:	2800      	cmp	r0, #0
 8007154:	d0ec      	beq.n	8007130 <_realloc_r+0x1c>
 8007156:	42b5      	cmp	r5, r6
 8007158:	462a      	mov	r2, r5
 800715a:	4621      	mov	r1, r4
 800715c:	bf28      	it	cs
 800715e:	4632      	movcs	r2, r6
 8007160:	f7ff fbc2 	bl	80068e8 <memcpy>
 8007164:	4621      	mov	r1, r4
 8007166:	4640      	mov	r0, r8
 8007168:	f7ff fbcc 	bl	8006904 <_free_r>
 800716c:	463c      	mov	r4, r7
 800716e:	e7e0      	b.n	8007132 <_realloc_r+0x1e>

08007170 <_malloc_usable_size_r>:
 8007170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007174:	1f18      	subs	r0, r3, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfbc      	itt	lt
 800717a:	580b      	ldrlt	r3, [r1, r0]
 800717c:	18c0      	addlt	r0, r0, r3
 800717e:	4770      	bx	lr

08007180 <_init>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr

0800718c <_fini>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr
